(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{140:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return c})),a.d(e,"metadata",(function(){return i})),a.d(e,"rightToc",(function(){return l})),a.d(e,"Video",(function(){return o})),a.d(e,"default",(function(){return p}));var n=a(2),r=a(6),b=(a(0),a(171)),c=(a(373),{id:"visual-formatter-basic-concepts",title:"Basic Concepts",sidebar_label:"Basic Concepts"}),i={unversionedId:"scan2deploy/visual-formatter-basic-concepts",id:"scan2deploy/visual-formatter-basic-concepts",isDocsHomePage:!1,title:"Basic Concepts",description:"This section explains the types and components constituting the Visual Formatter tool.",source:"@site/docs/scan2deploy/visual-formatter-basic-concepts.md",slug:"/scan2deploy/visual-formatter-basic-concepts",permalink:"/scan2deploy/visual-formatter-basic-concepts",version:"current",sidebar_label:"Basic Concepts",sidebar:"Scan2DeployStudio",previous:{title:"Scan2Deploy Studio",permalink:"/scan2deploy/studio"},next:{title:"UI Controls",permalink:"/scan2deploy/visual-formatter-ui-controls"}},l=[{value:"Data Types",id:"data-types",children:[]},{value:"Inputs and Outputs",id:"inputs-and-outputs",children:[{value:"Inputs",id:"inputs",children:[]},{value:"Outputs",id:"outputs",children:[]}]},{value:"Operations",id:"operations",children:[{value:"Arithmetic Operations",id:"arithmetic-operations",children:[]},{value:"Boolean Operations",id:"boolean-operations",children:[]},{value:"Inequality Operations",id:"inequality-operations",children:[]},{value:"String Operations",id:"string-operations",children:[]},{value:"Conditions",id:"conditions",children:[]}]}],o=function(t){var e=t.children,a=t.width;return Object(b.b)("video",{controls:!0,allowFullScreen:!0,style:{width:a}},e)},s={rightToc:l,Video:o};function p(t){var e=t.components,c=Object(r.a)(t,["components"]);return Object(b.b)("wrapper",Object(n.a)({},s,c,{components:e,mdxType:"MDXLayout"}),Object(b.b)("p",null,"This section explains the types and components constituting the Visual Formatter tool."),Object(b.b)("h2",{id:"data-types"},"Data Types"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Color"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Represents"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",Object(n.a)({parentName:"td"},{src:"https://via.placeholder.com/15/7B68EE/000000?text=+",alt:"#7B68EE"}))," ",Object(b.b)("inlineCode",{parentName:"td"},"#7B68EE")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A text.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",Object(n.a)({parentName:"td"},{src:"https://via.placeholder.com/15/C70D3A/000000?text=+",alt:"#C70D3A"}))," ",Object(b.b)("inlineCode",{parentName:"td"},"#C70D3A")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A numeric value that can be integer or floating point.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",Object(n.a)({parentName:"td"},{src:"https://via.placeholder.com/15/006064/000000?text=+",alt:"#006064"}))," ",Object(b.b)("inlineCode",{parentName:"td"},"#006064")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"True or false value, generally used to check on some condition.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",Object(n.a)({parentName:"td"},{src:"https://via.placeholder.com/15/36802D/000000?text=+",alt:"#36802D"}))," ",Object(b.b)("inlineCode",{parentName:"td"},"#36802D")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Depending on the sub-type, it is used to set a value from a predefined list of constants. Mainly used to represent the ",Object(b.b)("inlineCode",{parentName:"td"},"BarcodeType"),".")))),Object(b.b)("p",null,"You can specify a datatype value directly inside the nodes representing ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#operations"}),"Operations"),", only for the input connectors. You can also drag and drop the Constant block of the Parameters tab inside the flowchart area, as shown in the video below."),Object(b.b)(o,{width:"100%",mdxType:"Video"},Object(b.b)("source",{src:"/img/visual-formatter/video-drag-drop-constant.mp4",type:"video/mp4"})),Object(b.b)("h2",{id:"inputs-and-outputs"},"Inputs and Outputs"),Object(b.b)("p",null,"The most common inputs and outputs are available in the tool. The inputs are filled when a barcode is read and the flow will be executed in order to manipulate them and obtain specific outputs."),Object(b.b)("h3",{id:"inputs"},"Inputs"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Represents"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"barcodeStringIn"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The barcode text read from the scanner.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"barcodeTypeIn"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enum BarcodeType"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The barcode symbology.")))),Object(b.b)("h3",{id:"outputs"},"Outputs"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Represents"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"barcodeStringOutput"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"String"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The barcode text as it has been modified by the tool. If it is not included in the chart, it will assume the value of barcodeStringIn.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"barcodeTypeOut"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enum BarcodeType"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The barcode symbology as it has been modified by the tool. If it is not included in the chart, it will assume the value of barcodeTypeIn")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"executeStandardFormatterOut"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"True to also run the Standard Formatter after the Visual Formatter has executed, false to skip it. If not included in the chart, it will assume the ",Object(b.b)("em",{parentName:"td"},"false")," value.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"propagateResultOut"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"True to propagate the result in the system and eventually receive the resulting barcode, false to not propagate, thus ignoring the barcode data completely. If not included in the chart, it will assume the ",Object(b.b)("em",{parentName:"td"},"true")," value.")))),Object(b.b)("p",null,"You can add inputs/outputs by dragging and dropping the Input/Output block of the Parameters tab inside the flowchart area, as shown in the video below."),Object(b.b)(o,{width:"100%",mdxType:"Video"},Object(b.b)("source",{src:"/img/visual-formatter/video-drag-drop-input-output.mp4",type:"video/mp4"})),Object(b.b)("h2",{id:"operations"},"Operations"),Object(b.b)("p",null,"Each operation is represented by a node with inputs and outputs. The inputs and outputs are shown as circles with an internal color that represent the type of input/output to use and have a unique name. The inputs can be connected to other nodes outputs, as well as to input blocks or constants, while the outputs work in the opposite way. The inputs can also be initialized without an explicit connection by using the UI component to the right of the name. Below the graphical representation of the SubString node is shown."),Object(b.b)("p",null,Object(b.b)("img",{alt:"Operation Block",src:a(391).default})),Object(b.b)("p",null,"Operation nodes are divided in sub-sections depending on the type of operation executed. Every sub-section has a different color to help during the editing of the formatter flow."),Object(b.b)("h3",{id:"arithmetic-operations"},"Arithmetic Operations"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Appearance"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"+"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/arithmetic/add.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Addition between numbers (2 minimum).")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/arithmetic/subtract.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Subtraction between 2 numbers.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"*"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/arithmetic/multiply.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Multiplication between numbers (2 minimum).")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"/"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/arithmetic/divide.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Division between 2 numbers.")))),Object(b.b)("h3",{id:"boolean-operations"},"Boolean Operations"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Appearance"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Not"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/boolean/not.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Inverts the value of the input boolean.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"And"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/boolean/and.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Executes a logic AND between multiple booleans (2 minimum).")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Or"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/boolean/or.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Executes a logical OR between multiple booleans (2 minimum).")))),Object(b.b)("h3",{id:"inequality-operations"},"Inequality Operations"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Appearance"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),">","="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/inequality/greater-equals.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Checks if n1 ",">","= n2, with n1 and n2 both numbers, returning a boolean with the result of the check.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),">"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/inequality/greater.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Checks if n1 ",">"," n2, with n1 and n2 both numbers, returning a boolean with the result of the check.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/inequality/equals.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Equality check, works also for types different than numbers.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"<"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/inequality/less.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Checks if n1 ","<"," n2, with n1 and n2 both numbers, returning a boolean with the result of the check.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"<","="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/inequality/less-equals.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Checks if n1 ","<","= n2, with n1 and n2 both numbers, returning a boolean with the result of the check.")))),Object(b.b)("h3",{id:"string-operations"},"String Operations"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Appearance"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Remove First"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/remove-first.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Removes the first num characters from inStr.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Remove Last"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/remove-last.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Removes the last num character from inStr.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Sub String"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/sub-string.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Creates a substring starting from the input string. The number idBegin represents the index of the first character to take to form the substring, this number starts from 0 to indicate to include the first character of the string (1 for the second and so on). The number idEnd is the index of the first character of the string to exclude from the substring, meaning this character will not be includued in the output string. Example: taking into consideration the string "Welcome", with idBegin = 2 and idEnd = 4 the output string will be "lc".')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Length"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/length.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns the length of str.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Contains"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/contains.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Checks if str contains the string match and returns true in that case.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Concat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/concat.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Concatenates multitple strings (minimum 2).")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Index Of"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/index-of.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns the index of the first occurrence of match inside str. This index represents the beginning of the first match string found in str. It returns -1 if no occurrence is found.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Last Index Of"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/last-index-of.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns the index of the last occurrence of match inside str. This index represents the beginning of the last match string found in str. It returns -1 if no occurrence is found.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Search"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/search.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Works as Index Of but the match string can also be a regular expression.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Replace"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/replace.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Replaces every occurrence of searchValueStr (found inside inStr) with newValueStr.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"To Upper Case"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/to-upper-case.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Converts the input string to uppercase letters.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"To Lower Case"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/to-lower-case.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Converts the input string to lowercase letters.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Trim"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/trim.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Removes whitespaces at the start and at the end of the input string.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Char At"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/char-at.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Extract a single character from the string, specified by the input index (starting from 0 for the first character).")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Split"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/split.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Splits the string using the provided separator. The output is an array of strings.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Substitute Chars"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/substitute-chars.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Substitutes every character of fromChars found inside inStr in the corresponding character of toChars (found in the same position). Example: inStr = "abc", fromChars = "ab", "toChars" = "de", outStr = "dec".')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Starts With"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/starts-with.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns true if str starts with match, false otherwise.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Ends With"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/string/ends-with.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns true if str ends with match, false otherwise.")))),Object(b.b)("h3",{id:"conditions"},"Conditions"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Appearance"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"If"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/conditions/if.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Takes as input a boolean named condition, if the boolean is true the trueValue set as input is passed as output, otherwise the falseValue will be taken. The inputs called trueValue and falseValue, as well as the output called out, can have a different type that will be selected during the node creation.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Switch"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("img",{src:"/img/visual-formatter/blocks/conditions/switch.png"})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Works as a switch condition. The type input is used as selector and can have a specified datatype. The input corresponding to the type value will be moved to the output. If the type value is not found in the input list, the default input will be considered. The input values can also have a specified datatype.")))))}p.isMDXComponent=!0},391:function(t,e,a){"use strict";a.r(e),e.default=a.p+"assets/images/sub-string-54866701019db84243d390480cf731d2.png"}}]);