(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{276:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return g}));var r=n(3),o=n(8),a=(n(0),n(314)),i={id:"log4j2xml",title:"Logging Configuration Reference",sidebar_label:"log4j2.xml"},l={unversionedId:"javapos/configref/log4j2xml",id:"javapos/configref/log4j2xml",isDocsHomePage:!1,title:"Logging Configuration Reference",description:"Overview",source:"@site/docs/javapos/configref/log4j2xml.md",slug:"/javapos/configref/log4j2xml",permalink:"/javapos/configref/log4j2xml",version:"current",sidebar_label:"log4j2.xml",sidebar:"JavaPOS",previous:{title:"JPOS Configuration Reference",permalink:"/javapos/configref/jposproperties"},next:{title:"Developing with JavaPOS",permalink:"/javapos/develop/overview"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Reference",id:"reference",children:[{value:"Character Set Encoding",id:"character-set-encoding",children:[]},{value:"Log Level",id:"log-level",children:[]},{value:"Log File Size",id:"log-file-size",children:[]},{value:"Rollover Strategy",id:"rollover-strategy",children:[]}]},{value:"Default configuration file",id:"default-configuration-file",children:[{value:"Microsoft Windows Platform",id:"microsoft-windows-platform",children:[]}]}],s={rightToc:c};function g(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("p",null,"Datalogic JavaPOS API uses Apache Log4j2 to provide logging services.  This document covers the default configuration of logging for Datalogic JavaPOS as well as a reference for some of the more common configuration changes. For a full reference to all available configuration options, please see the Apache Log4j2 Configuration ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://logging.apache.org/log4j/2.x/manual/configuration.html"}),"Manual"),"."),Object(a.b)("h2",{id:"reference"},"Reference"),Object(a.b)("h3",{id:"character-set-encoding"},"Character Set Encoding"),Object(a.b)("p",null,"Encoding is controlled by the first line of the configuration file. The encoding attribute accepts the name of whichever encoding is preferred for logging. Datalogic JavaPOS distributes with a default of windows-1252 encoding on the Microsoft Windows platform, and UTF-8 encoding on the Linux platform."),Object(a.b)("h4",{id:"example-encoding-for-windows"},"Example Encoding for Windows"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'<?xml version="1.0" encoding="windows-1252"?>\n')),Object(a.b)("h4",{id:"example-encoding-for-linux"},"Example Encoding for Linux"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'<?xml version="1.0" encoding="utf-8"?>\n')),Object(a.b)("h3",{id:"log-level"},"Log Level"),Object(a.b)("p",null,"The threshold for logging messages can be adjusted in the ",Object(a.b)("strong",{parentName:"p"},"Loggers")," element.  Datalogic JavaPOS is distributed with a default ",Object(a.b)("strong",{parentName:"p"},"Root")," element with the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"level"))," attribute defaulted to ",Object(a.b)("strong",{parentName:"p"},"debug"),". This denotes that all messages of level ",Object(a.b)("strong",{parentName:"p"},"debug")," and lower are logged. The log level can be adjusted by changing the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"level"))," attribute to one of the following levels:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"trace - Entry and Exit to specific methods"),Object(a.b)("li",{parentName:"ul"},"debug - Debugging information"),Object(a.b)("li",{parentName:"ul"},"info - Informational Messages"),Object(a.b)("li",{parentName:"ul"},"warn - Warnings"),Object(a.b)("li",{parentName:"ul"},"error - Error Messages"),Object(a.b)("li",{parentName:"ul"},"fatal - Fatal Errors")),Object(a.b)("h4",{id:"example-log-levels"},"Example Log Levels"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'<Root level="trace">\n<Root level="debug">\n<Root level="info">\n<Root level="warn">\n<Root level="error">\n<Root level="fatal">\n')),Object(a.b)("h3",{id:"log-file-size"},"Log File Size"),Object(a.b)("p",null,"The maximum size of each rolling log file can be adjusted in the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"size"))," attribute of the ",Object(a.b)("strong",{parentName:"p"},"SizeBasedTriggeringPolicy")," element. Datalogic JavaPOS ships with a default setting of 20 MB for the size of each rolling log file. To set a custom size for each rolling log file, adjust the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"size"))," attribute to the desired size."),Object(a.b)("h4",{id:"example-size-adjustment"},"Example Size adjustment"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'<SizeBasedTriggeringPolicy size="25 MB" />\n')),Object(a.b)("h3",{id:"rollover-strategy"},"Rollover Strategy"),Object(a.b)("h4",{id:"rollover-size"},"Rollover Size"),Object(a.b)("p",null,"The number of files to use when rolling over can be adjusted in the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"max"))," attribute of the ",Object(a.b)("strong",{parentName:"p"},"DefaultRolloverStrategy")," element. Datalogic JavaPOS ships with a default setting of 5 rolling log files. To set a custom number of rolling log files, adjust the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"max"))," attribute to the desired number of rollover files."),Object(a.b)("h5",{id:"example-rollover-max-adjustment"},"Example Rollover max adjustment"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'<DefaultRolloverStrategy max="10" fileIndex="min"/>\n')),Object(a.b)("h4",{id:"rollover-direction"},"Rollover Direction"),Object(a.b)("p",null,"The direction that files rollover can be adjusted in the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"fileIndex"))," attribute of the ",Object(a.b)("strong",{parentName:"p"},"DefaultRolloverStrategy")," element. Datalogic JavaPOS ships with a default setting of rolling to the minimum file. This means that the log file is rolled to name-1 and each log file is moved forward. To change direction, adjust the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"fileIndex"))," attribute to the desired direction."),Object(a.b)("h2",{id:"default-configuration-file"},"Default configuration file"),Object(a.b)("h3",{id:"microsoft-windows-platform"},"Microsoft Windows Platform"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'<?xml version="1.0" encoding="windows-1252"?>\n<Configuration status="WARN">\n<Appenders>\n    <Console name="Console" target="SYSTEM_OUT">\n    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>\n    </Console>\n    <RollingFile name="RollingFile" filename="${env:TEMP}/jposTraceR.log"\n                filePattern="${env:TEMP}/jposTraceR-%i.log">\n        <PatternLayout>\n            <pattern>%d{DEFAULT} [%t] %-5level %c{1} - %msg %throwable{short.localizedMessage}%n</pattern>\n        </PatternLayout>\n        <Policies>\n            <OnStartupTriggeringPolicy />\n            <SizeBasedTriggeringPolicy size="20 MB" />\n        </Policies>\n        <DefaultRolloverStrategy max="5" fileIndex="min"/>\n    </RollingFile>\n</Appenders>\n<Loggers>\n    <Root level="debug">\n    <AppenderRef ref="RollingFile" />\n    </Root>\n</Loggers>\n</Configuration>\n')))}g.isMDXComponent=!0},314:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),g=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=g(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=g(n),f=r,u=b["".concat(i,".").concat(f)]||b[f]||p[f]||a;return n?o.a.createElement(u,l(l({ref:t},s),{},{components:n})):o.a.createElement(u,l({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);