"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[25706],{14766:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=i(85893),a=i(11151);i(74866),i(85162);const t={id:"documentation",title:"Documentation",sidebar_label:"Documentation"},s=void 0,l={id:"codiscan-ios-sdk/documentation",title:"Documentation",description:"Device Manager",source:"@site/docs/codiscan-ios-sdk/documentation.md",sourceDirName:"codiscan-ios-sdk",slug:"/codiscan-ios-sdk/documentation",permalink:"/codiscan-ios-sdk/documentation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"documentation",title:"Documentation",sidebar_label:"Documentation"},sidebar:"CodiscanIosSDK",previous:{title:"Architecture",permalink:"/codiscan-ios-sdk/architecture"}},c={},d=[{value:"Device Manager",id:"device-manager",level:2},{value:"Initializers",id:"initializers",level:3},{value:"Instance Methods",id:"instance-methods",level:3},{value:"Pairing",id:"pairing",level:5},{value:"Barcode read",id:"barcode-read",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Commands",id:"commands",level:4},{value:"DeviceManagerDelegate",id:"devicemanagerdelegate",level:2},{value:"BarcodeData",id:"barcodedata",level:2},{value:"Instance Properties",id:"instance-properties",level:3},{value:"ConfigValue",id:"configvalue",level:2},{value:"Instance Properties",id:"instance-properties-1",level:3},{value:"DeviceDetails",id:"devicedetails",level:2},{value:"Instance Properties",id:"instance-properties-2",level:3},{value:"BatteryDataField",id:"batterydatafield",level:2},{value:"Enumeration Cases",id:"enumeration-cases",level:3},{value:"Instance Properties",id:"instance-properties-3",level:3},{value:"BleManagerError",id:"blemanagererror",level:2},{value:"Enumeration Cases",id:"enumeration-cases-1",level:3},{value:"DeviceManagerError",id:"devicemanagererror",level:2},{value:"Enumeration Cases",id:"enumeration-cases-2",level:3}];function o(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"device-manager",children:"Device Manager"}),"\n",(0,r.jsx)(n.p,{children:"The main class responsible for managing BLE device interactions, including pairing, configuration, barcode reading, and streaming device data."}),"\n",(0,r.jsx)(n.p,{children:"This class offers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Device pairing with dynamic barcode generation."}),"\n",(0,r.jsx)(n.li,{children:"Reading barcodes from connected devices."}),"\n",(0,r.jsx)(n.li,{children:"Applying device configurations via XML files."}),"\n",(0,r.jsx)(n.li,{children:"Getting and setting single configuration values."}),"\n",(0,r.jsx)(n.li,{children:"Streaming device info and battery stats."}),"\n",(0,r.jsx)(n.li,{children:"Graceful handling of disconnection, errors, and device unlinking."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"initializers",children:"Initializers"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"init()"})}),"\n",(0,r.jsx)(n.p,{children:"Initializes a new instance of DeviceManager."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func setDelegate(DeviceManagerDelegate?)"})}),"\n",(0,r.jsx)(n.p,{children:"Sets the delegate to receive device events."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Swift",children:"let manager = DeviceManager()\nmanager.setDelegate(self)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,r.jsx)(n.h5,{id:"pairing",children:"Pairing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func startPairing()"})}),"\n",(0,r.jsx)(n.p,{children:"Begins the pairing process with the BLE device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func stopPairing()"})}),"\n",(0,r.jsx)(n.p,{children:"Stops the pairing process."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Swift",children:"manager.startPairing()   // Begin pairing process\nmanager.stopPairing()    // Cancel pairing\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func appMovedToForeground()"})}),"\n",(0,r.jsx)(n.p,{children:"Call this method to notify that the hosting app moved to foreground. It is important to call this method whenever the app moves to foreground otherwise the SDK could have problems linking with a device previously linked and unlinked."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Swift",children:'struct ContentView: View {\n    @Environment(\\.scenePhase) private var scenePhase\n\n    let deviceManager = DeviceManager()\n\n    var body: some View {\n            VStack {\n                Text("Your app")\n            }\n            .onChange(of: scenePhase) { newPhase in\n                if newPhase == .active {\n                    deviceManager.appMovedToForeground()\n                }\n            }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"barcode-read",children:"Barcode read"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func startReadingBarcode()"})}),"\n",(0,r.jsx)(n.p,{children:"Sends a command to begin barcode scanning on the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func stopReadingBarcode()"})}),"\n",(0,r.jsx)(n.p,{children:"Sends a command to stop barcode scanning on the device."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Swift",children:"manager.startReadingBarcode()\nmanager.stopReadingBarcode()\n"})}),"\n",(0,r.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func applyConfig(from: URL)"})}),"\n",(0,r.jsx)(n.p,{children:"Applies configuration to the device from a local XML file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func restoreDefaultConfig()"})}),"\n",(0,r.jsx)(n.p,{children:"Restores the device to its default configuration."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func setConfigValue(for: String, value: String)"})}),"\n",(0,r.jsx)(n.p,{children:"Sets a configuration value on the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func getConfigValue(for: String)"})}),"\n",(0,r.jsx)(n.p,{children:"Restores the device to its default configuration."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Swift",children:'manager.applyConfig(from: configURL)                      // Apply configuration from XML\nmanager.setConfigValue(for: "code", value: "value")       // Set single value\nmanager.getConfigValue(for: "code")                       // Read config value\nmanager.restoreDefaultConfig()                            // Reset config\n'})}),"\n",(0,r.jsx)(n.h4,{id:"commands",children:"Commands"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func findMyDevice()"})}),"\n",(0,r.jsx)(n.p,{children:"Sends a \u201cfind my device\u201d command to the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func unlinkDevice()"})}),"\n",(0,r.jsx)(n.p,{children:"Starts the unlinking process to disconnect and unlink the device."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Swift",children:"manager.findMyDevice()      // Triggers device indicator\nmanager.unlinkDevice()      // Unlinks the device\n"})}),"\n",(0,r.jsx)(n.h2,{id:"devicemanagerdelegate",children:"DeviceManagerDelegate"}),"\n",(0,r.jsx)(n.p,{children:"A protocol that defines the delegate methods for DeviceManager. Use this to respond to key events like connection, disconnection, barcode reads, and errors."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didConnect()"})}),"\n",(0,r.jsx)(n.p,{children:"Called when a device is connected."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didDisconnect()"})}),"\n",(0,r.jsx)(n.p,{children:"Called when the device disconnects."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didFailWith(error: DeviceManagerError)"})}),"\n",(0,r.jsx)(n.p,{children:"Called when a device-related error occurs."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didGeneratePairingBarcode(UIImage)"})}),"\n",(0,r.jsx)(n.p,{children:"Called when a pairing barcode is generated."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didGetConfigData([ConfigValue])"})}),"\n",(0,r.jsx)(n.p,{children:"Called when configuration values are successfully get from the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didReadBarcodeData(BarcodeData)"})}),"\n",(0,r.jsx)(n.p,{children:"Called when a barcode is read from the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didRestoreConnection()"})}),"\n",(0,r.jsx)(n.p,{children:"Called when the connection to a previously linked device is restored."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didSetConfigData([ConfigValue])"})}),"\n",(0,r.jsx)(n.p,{children:"Called when configuration values are successfully set on the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didUnlink()"})}),"\n",(0,r.jsx)(n.p,{children:"Called when the device is unlinked."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didUpdateBatteryData(BatteryData)"})}),"\n",(0,r.jsx)(n.p,{children:"Called when new battery data is received."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"func didUpdateDeviceDetails(DeviceDetails)"})}),"\n",(0,r.jsx)(n.p,{children:"Called when updated device details are received."}),"\n",(0,r.jsx)(n.h2,{id:"barcodedata",children:"BarcodeData"}),"\n",(0,r.jsx)(n.p,{children:"Represents the data of a barcode."}),"\n",(0,r.jsx)(n.h3,{id:"instance-properties",children:"Instance Properties"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"let barcodeID: String"})}),"\n",(0,r.jsx)(n.p,{children:"Represents barcode type."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"let data: String"})}),"\n",(0,r.jsx)(n.p,{children:"Represents raw data converted to a string."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"let rawData: [UInt8]"})}),"\n",(0,r.jsx)(n.p,{children:"Represents raw data in bytes."}),"\n",(0,r.jsx)(n.h2,{id:"configvalue",children:"ConfigValue"}),"\n",(0,r.jsx)(n.p,{children:"Represents a codiscan configuration value"}),"\n",(0,r.jsx)(n.h3,{id:"instance-properties-1",children:"Instance Properties"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"var code: String"})}),"\n",(0,r.jsx)(n.p,{children:"The code of the configuration property"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"var data: String"})}),"\n",(0,r.jsx)(n.p,{children:"The value of the configuration property"}),"\n",(0,r.jsx)(n.h2,{id:"devicedetails",children:"DeviceDetails"}),"\n",(0,r.jsx)(n.p,{children:"A simple struct represeting information of a codiscan device"}),"\n",(0,r.jsx)(n.h3,{id:"instance-properties-2",children:"Instance Properties"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"let model: String?"})}),"\n",(0,r.jsx)(n.p,{children:"Codiscan device model name"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"let serialNumber: String?"})}),"\n",(0,r.jsx)(n.p,{children:"Codiscan device serial number"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"let swRevision: String?"})}),"\n",(0,r.jsx)(n.p,{children:"Codiscan device firmware version."}),"\n",(0,r.jsx)(n.h2,{id:"batterydatafield",children:"BatteryDataField"}),"\n",(0,r.jsx)(n.p,{children:"Represents the key of a battery data field"}),"\n",(0,r.jsx)(n.h3,{id:"enumeration-cases",children:"Enumeration Cases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case batteryCurrent"})}),"\n",(0,r.jsx)(n.p,{children:"Battery latest current"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case batteryCycleCount"})}),"\n",(0,r.jsx)(n.p,{children:"Battery cycle count"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case batterySoC"})}),"\n",(0,r.jsx)(n.p,{children:"Battery state of charge"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case batterySoH"})}),"\n",(0,r.jsx)(n.p,{children:"Battery state of health"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case batteryTemp"})}),"\n",(0,r.jsx)(n.p,{children:"Battery latest temperature (in tenths of a celsius degree)"}),"\n",(0,r.jsx)(n.h3,{id:"instance-properties-3",children:"Instance Properties"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"var description: String"})}),"\n",(0,r.jsx)(n.p,{children:"Human readable description of a battery data field."}),"\n",(0,r.jsx)(n.h2,{id:"blemanagererror",children:"BleManagerError"}),"\n",(0,r.jsx)(n.p,{children:"Represents an error in the BLE layer"}),"\n",(0,r.jsx)(n.h3,{id:"enumeration-cases-1",children:"Enumeration Cases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case connectionFailed(Error)"})}),"\n",(0,r.jsx)(n.p,{children:"The connection has failed with the associated error value"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case disconnectedPeripheral"})}),"\n",(0,r.jsx)(n.p,{children:"The codiscan device has been disconnected."}),"\n",(0,r.jsx)(n.h2,{id:"devicemanagererror",children:"DeviceManagerError"}),"\n",(0,r.jsx)(n.p,{children:"Represents errors that may occur while using the DeviceManager."}),"\n",(0,r.jsx)(n.h3,{id:"enumeration-cases-2",children:"Enumeration Cases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case alreadyPaired"})}),"\n",(0,r.jsx)(n.p,{children:"The device is already paired and it should be manually unpaired from the iPhone settings to be connected again."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case barcodeGenerationFailed"})}),"\n",(0,r.jsx)(n.p,{children:"Barcode generation failed."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case ble(BleManagerError)"})}),"\n",(0,r.jsx)(n.p,{children:"An error from the BLEManager layer."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case configParserInitFailed"})}),"\n",(0,r.jsx)(n.p,{children:"Failed to initialize the configuration parser."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"case configParsingFailed"})}),"\n",(0,r.jsx)(n.p,{children:"Failed to parse the configuration file."})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},85162:(e,n,i)=>{i.d(n,{Z:()=>s});i(67294);var r=i(36905);const a={tabItem:"tabItem_Ymn6"};var t=i(85893);function s(e){let{children:n,hidden:i,className:s}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:i,children:n})}},74866:(e,n,i)=>{i.d(n,{Z:()=>D});var r=i(67294),a=i(36905),t=i(12466),s=i(16550),l=i(20469),c=i(91980),d=i(67392),o=i(50012);function u(e){var n,i;return null!=(n=null==(i=r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:i.filter(Boolean))?n:[]}function h(e){const{values:n,children:i}=e;return(0,r.useMemo)((()=>{const e=null!=n?n:function(e){return u(e).map((e=>{let{props:{value:n,label:i,attributes:r,default:a}}=e;return{value:n,label:i,attributes:r,default:a}}))}(i);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,i])}function p(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:i}=e;const a=(0,s.k6)(),t=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=i?i:null}({queryString:n,groupId:i});return[(0,c._X)(t),(0,r.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(a.location.search);n.set(t,e),a.replace({...a.location,search:n.toString()})}),[t,a])]}function m(e){const{defaultValue:n,queryString:i=!1,groupId:a}=e,t=h(e),[s,c]=(0,r.useState)((()=>function(e){var n;let{defaultValue:i,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(i){if(!p({value:i,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+i+'" but none of its children has the corresponding value. Available values are: '+r.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return i}const a=null!=(n=r.find((e=>e.default)))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:t}))),[d,u]=g({queryString:i,groupId:a}),[m,x]=function(e){let{groupId:n}=e;const i=function(e){return e?"docusaurus.tab."+e:null}(n),[a,t]=(0,o.Nk)(i);return[a,(0,r.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:a}),v=(()=>{const e=null!=d?d:m;return p({value:e,tabValues:t})?e:null})();(0,l.Z)((()=>{v&&c(v)}),[v]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:t}))throw new Error("Can't select invalid tab value="+e);c(e),u(e),x(e)}),[u,x,t]),tabValues:t}}var x=i(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=i(85893);function j(e){let{className:n,block:i,selectedValue:r,selectValue:s,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,t.o5)(),o=e=>{const n=e.currentTarget,i=c.indexOf(n),a=l[i].value;a!==r&&(d(n),s(a))},u=e=>{var n;let i=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{var r;const n=c.indexOf(e.currentTarget)+1;i=null!=(r=c[n])?r:c[0];break}case"ArrowLeft":{var a;const n=c.indexOf(e.currentTarget)-1;i=null!=(a=c[n])?a:c[c.length-1];break}}null==(n=i)||n.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":i},n),children:l.map((e=>{let{value:n,label:i,attributes:t}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:u,onClick:o,...t,className:(0,a.Z)("tabs__item",v.tabItem,null==t?void 0:t.className,{"tabs__item--active":r===n}),children:null!=i?i:n},n)}))})}function b(e){let{lazy:n,children:i,selectedValue:a}=e;const t=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=m(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",v.tabList),children:[(0,f.jsx)(j,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function D(e){const n=(0,x.Z)();return(0,f.jsx)(y,{...e,children:u(e.children)},String(n))}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>s});var r=i(67294);const a={},t=r.createContext(a);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);