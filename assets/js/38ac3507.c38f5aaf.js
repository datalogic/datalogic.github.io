"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[56194],{82216:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var a=t(85893),s=t(11151);const c={id:"sample-code",title:"Sample Code",sidebar_label:"Sample Code"},i=void 0,o={id:"capturesdk/sample-code",title:"Sample Code",description:"USB Scanner",source:"@site/docs/capturesdk/sample-code.md",sourceDirName:"capturesdk",slug:"/capturesdk/sample-code",permalink:"/capturesdk/sample-code",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"sample-code",title:"Sample Code",sidebar_label:"Sample Code"},sidebar:"CaptureSDK",previous:{title:"Enumerations",permalink:"/capturesdk/enums"}},r={},l=[{value:"USB Scanner",id:"usb-scanner",level:2},{value:"Detect the Connected Devices List",id:"detect-the-connected-devices-list",level:3},{value:"Open the connected device and setup the scan listener to get the barcode scanning data",id:"open-the-connected-device-and-setup-the-scan-listener-to-get-the-barcode-scanning-data",level:3},{value:"Bluetooth Scanner",id:"bluetooth-scanner",level:2},{value:"Steps to pair the Bluetooth Scanner with SPP profile",id:"steps-to-pair-the-bluetooth-scanner-with-spp-profile",level:3},{value:"Steps to connect the Bluetooth Scanner to receive scanning data",id:"steps-to-connect-the-bluetooth-scanner-to-receive-scanning-data",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"usb-scanner",children:"USB Scanner"}),"\n",(0,a.jsx)(n.h3,{id:"detect-the-connected-devices-list",children:"Detect the Connected Devices List"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Kotlin",children:"var usbDeviceManager: DatalogicDeviceManager\n\nusbDeviceManager.detectDevice(context) { devices ->\n                _deviceList.postValue(ArrayList(devices))\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"open-the-connected-device-and-setup-the-scan-listener-to-get-the-barcode-scanning-data",children:"Open the connected device and setup the scan listener to get the barcode scanning data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Kotlin",children:"// Open the device\nval result = device.openDevice(context)\n\nwhen (result) {\nUSBConstants.SUCCESS -> {\n                       \t //Setup listener\n            \t\tscanEvent = object : UsbScanListener {\n\t\t\t//The onScan() function will be called when scanner scan the barcode\n                \t\t\toverride fun onScan(scanData: UsbScanData) {\n                    \t\t\tsetScannedData(scanData)\n                                       }\n               \t\t  }\n          }                \n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"bluetooth-scanner",children:"Bluetooth Scanner"}),"\n",(0,a.jsx)(n.h3,{id:"steps-to-pair-the-bluetooth-scanner-with-spp-profile",children:"Steps to pair the Bluetooth Scanner with SPP profile"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Kotlin",children:'var usbDeviceManager: DatalogicDeviceManager\n\n// Create the barcode image to pair scanner\nval bitmap = usbDeviceManager.qrCodeGenerator(context, BluetoothProfile.SPP)\n\n// Start to pair the Bluetooth scanner\nusbDeviceManager.stopScanBluetoothDevices(context)\nusbDeviceManager.scanBluetoothDevices(context) { pairingData ->\n    val status = pairingData.pairingStatus\n    val message = pairingData.message\n    val name = pairingData.deviceName\n    \n    when (status) {\n        BluetoothPairingStatus.Successful -> {\n            if (message.contains("connected")) {\n                setPairingStatus(PairingStatus.Connected)\n            } else {\n                setPairingStatus(PairingStatus.Paired)\n            }\n        }\n        BluetoothPairingStatus.Unsuccessful -> {\n            if (message == "Permission denied") {\n                setPairingStatus(PairingStatus.PermissionDenied)\n            } else {\n                setPairingStatus(PairingStatus.Error)\n            }\n        }\n        BluetoothPairingStatus.Timeout -> {\n            setPairingStatus(PairingStatus.Timeout)\n        }\n    }\n}\n\n// We need to scan the bitmap image with Bluetooth scanner here\u2026\n\n// Remove Bluetooth device scanning setup\nusbDeviceManager.stopScanBluetoothDevices(context)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"steps-to-connect-the-bluetooth-scanner-to-receive-scanning-data",children:"Steps to connect the Bluetooth Scanner to receive scanning data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Kotlin",children:'// Create the scanning listener \nbluetoothScanEvent = object : UsbScanListener {\n    override fun onScan(scanData: UsbScanData) {\n        setScannedData(scanData)\n    }\n}\n\n// Connect the Bluetooth scanner \nCoroutineScope(Dispatchers.IO).launch {\n    device.connectDevice(bluetoothScanEvent, context) { status ->\n        if (status == BluetoothPairingStatus.Successful) {\n            _status.postValue(DeviceStatus.OPENED)\n            _deviceStatus.postValue("Device opened")\n        } else {\n            _status.postValue(DeviceStatus.CLOSED)\n            _deviceStatus.postValue("No device selected")\n        }\n    }\n}\n\n// When the scanner scan barcode, the scanning data should be returned on bluetoothScanEvent\n//\u2026\n\n// Disconnect the Bluetooth scanner\ndevice .clearConnection(context)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var a=t(67294);const s={},c=a.createContext(s);function i(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);