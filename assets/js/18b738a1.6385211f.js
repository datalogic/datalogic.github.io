"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[87236],{74946:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var n=s(85893),t=s(11151);const l={title:"CE Device Sync API",sidebar_label:"API"},r=void 0,c={id:"cesync/api",title:"CE Device Sync API",description:"static class USBLAN",source:"@site/docs/cesync/api.md",sourceDirName:"cesync",slug:"/cesync/api",permalink:"/cesync/api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"CE Device Sync API",sidebar_label:"API"},sidebar:"CESyncSDK",previous:{title:"Overview",permalink:"/cesync/overview"},next:{title:"Sample Apps",permalink:"/cesync/samples"}},o={},a=[{value:"static class USBLAN",id:"static-class-usblan",level:2},{value:"Methods",id:"methods",level:3},{value:"static bool StartProcess(string exec, string params)",id:"static-bool-startprocessstring-exec-string-params",level:4},{value:"static IEnumerable&lt;SimpleFileInfo&gt; FindFiles(string directory, string mask)",id:"static-ienumerablesimplefileinfo-findfilesstring-directory-string-mask",level:4},{value:"static IEnumerable&lt;SimpleFileInfo&gt; FindDirectories(string directory, string mask)",id:"static-ienumerablesimplefileinfo-finddirectoriesstring-directory-string-mask",level:4},{value:"static bool CreateDirectory(string deviceDirName)",id:"static-bool-createdirectorystring-devicedirname",level:4},{value:"static bool PushFileToDevice(string localFilePath, string deviceFilePath, bool replaceExisting)",id:"static-bool-pushfiletodevicestring-localfilepath-string-devicefilepath-bool-replaceexisting",level:4},{value:"static bool PullFileFromDevice(string deviceFilePath, string localFilePath, bool replaceExisting)",id:"static-bool-pullfilefromdevicestring-devicefilepath-string-localfilepath-bool-replaceexisting",level:4},{value:"static bool SetFileDateTime(string deviceFilePath, DateTime lastWriteDateTime)",id:"static-bool-setfiledatetimestring-devicefilepath-datetime-lastwritedatetime",level:4},{value:"static bool DeleteFile(string deviceFilePath)",id:"static-bool-deletefilestring-devicefilepath",level:4},{value:"class SimpleFileInfo",id:"class-simplefileinfo",level:2},{value:"Members",id:"members",level:3},{value:"Constructors",id:"constructors",level:3},{value:"SimpleFileInfo(IO.FileInfo fi)",id:"simplefileinfoiofileinfo-fi",level:4},{value:"SimpleFileInfo(string fullName, long length, DateTime lastWriteTime)",id:"simplefileinfostring-fullname-long-length-datetime-lastwritetime",level:4}];function d(e){const i={h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"static-class-usblan",children:"static class USBLAN"}),"\n",(0,n.jsx)(i.h3,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(i.h4,{id:"static-bool-startprocessstring-exec-string-params",children:"static bool StartProcess(string exec, string params)"}),"\n",(0,n.jsx)(i.p,{children:"Start a process on the device."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string exe"}),": Path to the program to execute."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string parms"}),": Parameters to send to exe. If using multiple parameters, separate with a space."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": True if process successfully started, or was already running. False otherwise."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-ienumerablesimplefileinfo-findfilesstring-directory-string-mask",children:"static IEnumerable<SimpleFileInfo> FindFiles(string directory, string mask)"}),"\n",(0,n.jsx)(i.p,{children:"Search a directory on the device for files whose names satisfy the mask."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string directory"}),": Path to the directory on device to search inside."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string mask"}),": Name or pattern to search."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": IEnumerable of the query results. Entries contain info on files. Null if an error occurred."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-ienumerablesimplefileinfo-finddirectoriesstring-directory-string-mask",children:"static IEnumerable<SimpleFileInfo> FindDirectories(string directory, string mask)"}),"\n",(0,n.jsx)(i.p,{children:"Search a directory on the device for directories whose names satisfy the mask."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string directory"}),": Path to the directory on device to search inside."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string mask"}),": Name or pattern to search."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": IEnumerable of the query results. Entries contain info on directories. Null if an error occurred."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-bool-createdirectorystring-devicedirname",children:"static bool CreateDirectory(string deviceDirName)"}),"\n",(0,n.jsx)(i.p,{children:"Create a new directory on the device."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string deviceDirName"}),": The path to the new directory on the device."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": True if directory did not already exist and was successfully created. False otherwise."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-bool-pushfiletodevicestring-localfilepath-string-devicefilepath-bool-replaceexisting",children:"static bool PushFileToDevice(string localFilePath, string deviceFilePath, bool replaceExisting)"}),"\n",(0,n.jsx)(i.p,{children:"Copy a file from the host machine to the device."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string localFilePath"}),": Source path on host."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string deviceFilePath"}),": Destination path on device."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"bool replaceExisting"}),": Should an existing file be overwritten?"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": True if file successfully copied to device, False otherwise."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-bool-pullfilefromdevicestring-devicefilepath-string-localfilepath-bool-replaceexisting",children:"static bool PullFileFromDevice(string deviceFilePath, string localFilePath, bool replaceExisting)"}),"\n",(0,n.jsx)(i.p,{children:"Copy a file from the device to the host machine."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string deviceFilePath"}),": Source path on device."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string localFilePath"}),": Destination path on host."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"bool replaceExisting"}),": Should an existing file be overwritten?"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": True if file successfully pulled from device and written to local file, False otherwise."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-bool-setfiledatetimestring-devicefilepath-datetime-lastwritedatetime",children:"static bool SetFileDateTime(string deviceFilePath, DateTime lastWriteDateTime)"}),"\n",(0,n.jsx)(i.p,{children:"Set the last modified time of a file on the device."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string deviceFilePath"}),": Path to file on device."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"DateTime lastWriteDateTime"}),": The time the file will be set to."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": True if time on file is successfully set, False otherwise."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h4,{id:"static-bool-deletefilestring-devicefilepath",children:"static bool DeleteFile(string deviceFilePath)"}),"\n",(0,n.jsx)(i.p,{children:"Delete a specified file from the device."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Parameters"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string deviceFilePath"}),": Path to file on device."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Returns"}),": True if file found, file is not Read-only, and file successfully deleted from device. False otherwise."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:"class-simplefileinfo",children:"class SimpleFileInfo"}),"\n",(0,n.jsx)(i.h3,{id:"members",children:"Members"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string Name"}),": The name of the file."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string DirectoryName"}),": The path of the directory the file is in."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string Extension"}),": The file extension."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string fullName"}),": The full file path."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"DateTime LastWriteTime"}),": The last time the file was modified."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"long Length"}),": Length of the file."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(i.h4,{id:"simplefileinfoiofileinfo-fi",children:"SimpleFileInfo(IO.FileInfo fi)"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"FileInfo fi"}),": Make a new object representing this object."]}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"simplefileinfostring-fullname-long-length-datetime-lastwritetime",children:"SimpleFileInfo(string fullName, long length, DateTime lastWriteTime)"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"string fullName"}),": Full file path."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"long length"}),": Length of the file."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"DateTime lastWriteTime"}),": Last modified time."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,i,s)=>{s.d(i,{Z:()=>c,a:()=>r});var n=s(67294);const t={},l=n.createContext(t);function r(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);