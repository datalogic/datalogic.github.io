"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[9701],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(a),c=r,g=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},59881:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=["components"],o={id:"api",title:"React Native API",sidebar_label:"API"},p=void 0,s={unversionedId:"reactnative/api",id:"reactnative/api",title:"React Native API",description:"API Reference",source:"@site/docs/reactnative/api.md",sourceDirName:"reactnative",slug:"/reactnative/api",permalink:"/reactnative/api",tags:[],version:"current",frontMatter:{id:"api",title:"React Native API",sidebar_label:"API"},sidebar:"ReactNativeSDK",previous:{title:"Overview",permalink:"/reactnative/overview"},next:{title:"Sample Apps",permalink:"/reactnative/samples"}},d={},u=[{value:"API Reference",id:"api-reference",level:2},{value:"Namespaces",id:"namespaces",level:3},{value:"BarcodeManager",id:"barcodemanager",level:3},{value:".addReadListener(<code>promise</code>): number",id:"addreadlistenerpromise-number",level:4},{value:"Response",id:"response",level:5},{value:"Example",id:"example",level:5},{value:".pressTrigger(<code>promise</code>): number",id:"presstriggerpromise-number",level:4},{value:"Response",id:"response-1",level:5},{value:"Example",id:"example-1",level:5},{value:".releaseTrigger(<code>promise</code>): number",id:"releasetriggerpromise-number",level:4},{value:"Response",id:"response-2",level:5},{value:"Example",id:"example-2",level:5},{value:"AutoScanTrigger",id:"autoscantrigger",level:3},{value:".isAvailable(<code>promise</code>): boolean",id:"isavailablepromise-boolean",level:4},{value:"Response",id:"response-3",level:5},{value:"Example",id:"example-3",level:5},{value:".getSupportedRanges(<code>promise</code>): Object",id:"getsupportedrangespromise-object",level:4},{value:"Response",id:"response-4",level:5},{value:"Example",id:"example-4",level:5},{value:".getCurrentRange(<code>promise</code>): Object",id:"getcurrentrangepromise-object",level:4},{value:"Response",id:"response-5",level:5},{value:"Example",id:"example-5",level:5},{value:".setCurrentRange(<code>rangeId</code>, <code>promise</code>): boolean",id:"setcurrentrangerangeid-promise-boolean",level:4},{value:"Response",id:"response-6",level:5},{value:"Example",id:"example-6",level:5},{value:"KeyboardManager",id:"keyboardmanager",level:3},{value:".getAllAvailableTriggers (<code>promise</code>): Object",id:"getallavailabletriggers-promise-object",level:4},{value:"Response",id:"response-7",level:5},{value:"Example",id:"example-7",level:5},{value:".setAllAvailableTriggers(<code>enable</code>, <code>promise</code>): boolean",id:"setallavailabletriggersenable-promise-boolean",level:4},{value:"Response",id:"response-8",level:5},{value:"Example",id:"example-8",level:5},{value:".setTriggers(<code>config</code>, <code>promise</code>): boolean",id:"settriggersconfig-promise-boolean",level:4},{value:"Response",id:"response-9",level:5},{value:"Example",id:"example-9",level:5},{value:"LedManager",id:"ledmanager",level:3},{value:".setLed(<code>object</code>, <code>promise</code>): boolean",id:"setledobject-promise-boolean",level:4},{value:"Response",id:"response-10",level:5},{value:"Example",id:"example-10",level:5},{value:"ScannerProperties",id:"scannerproperties",level:3},{value:".edit(<code>promise</code>): Object",id:"editpromise-object",level:4},{value:"Response",id:"response-11",level:5},{value:"Example",id:"example-11",level:5},{value:".store(<code>properties</code>, <code>promise</code>): boolean",id:"storeproperties-promise-boolean",level:4},{value:"Response",id:"response-12",level:5},{value:"Examples",id:"examples",level:5}],m={toc:u};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"api-reference"},"API Reference"),(0,l.kt)("p",null,"All functions are asynchronous. All functions will, at a minimum, include a ",(0,l.kt)("inlineCode",{parentName:"p"},"promise")," parameter, which will return the success or failure result of the Java/Kotlin function."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"promise")," will be returned in most cases, and will return the same value as the standard\nJava/Kotlin function would.")),(0,l.kt)("h3",{id:"namespaces"},"Namespaces"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Namespace"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#barcodemanager"},"BarcodeManager")),(0,l.kt)("td",{parentName:"tr",align:null},"receive barcode data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#autoscantrigger"},"AutoScanTrigger")),(0,l.kt)("td",{parentName:"tr",align:null},"work the the autoscan features")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#keyboardmanager"},"KeyboardManager")),(0,l.kt)("td",{parentName:"tr",align:null},"set usable device triggers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#ledmanager"},"LedManager")),(0,l.kt)("td",{parentName:"tr",align:null},"control device LEDs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#scannerproperties"},"ScannerProperties")),(0,l.kt)("td",{parentName:"tr",align:null},"define available symbologies")))),(0,l.kt)("h3",{id:"barcodemanager"},"BarcodeManager"),(0,l.kt)("hr",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#addreadlistenerpromise-number"},"addReadListener")),(0,l.kt)("td",{parentName:"tr",align:null},"Register to receive barcode data on each scan.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#presstriggerpromise-number"},"pressTrigger")),(0,l.kt)("td",{parentName:"tr",align:null},"Simulate a trigger button press.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#releasetriggerpromise-number"},"releaseTrigger")),(0,l.kt)("td",{parentName:"tr",align:null},"Simulate a trigger button release.")))),(0,l.kt)("h4",{id:"addreadlistenerpromise-number"},".addReadListener(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): number"),(0,l.kt)("p",null,"Register to receive barcode data on each scan. The ",(0,l.kt)("inlineCode",{parentName:"p"},"callback")," you send to the NativeEventEmitter (see example below) will be called ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"every time"))," a barcode is successfully scanned. Therefore, you will typically only need to call ",(0,l.kt)("inlineCode",{parentName:"p"},"barcodeManager.addReadListener()")," ",(0,l.kt)("em",{parentName:"p"},"once")," in your application."),(0,l.kt)("h5",{id:"response"},"Response"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"barcodeData")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," - the barcode data scanned."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"barcodeType")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," - will be one of the ",(0,l.kt)("inlineCode",{parentName:"li"},"BarcodeID")," values defined in the ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/datalogic/datalogic-android-sdk/blob/master/sdk/src/main/java/com/datalogic/decode/BarcodeID.java"},"BarcodeID class")," in the ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/datalogic/datalogic-android-sdk"},"Datalogic Android SDK"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "barcodeData": "EUG2997",\n   "barcodeType": "CODE128"\n}\n')),(0,l.kt)("h5",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { NativeEventEmitter, Alert } from 'react-native';\nimport { BarcodeManager } from '@datalogic/react-native-datalogic-module';\n...\nconst eventEmitter = new NativeEventEmitter(BarcodeManager);\neventEmitter.addListener('successCallback', map => {\n  Alert.alert('Barcode Result', map.barcodeData + '\\n' + map.barcodeType);\n});\nBarcodeManager.addReadListener();\n")),(0,l.kt)("h4",{id:"presstriggerpromise-number"},".pressTrigger(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): number"),(0,l.kt)("p",null,"Call this method to simulate a trigger button press. The method does not always immediately start a capture; instead it behaves like pressing a physical scan button."),(0,l.kt)("h5",{id:"response-1"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"number")," with  SUCCESS (0) in case of success, otherwise a possible error code, matching one of the DecodeException error constants."),(0,l.kt)("h5",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { BarcodeManager } from '@datalogic/react-native-datalogic-module';\n...\nvar triggerReturn = await BarcodeManager.pressTrigger();\nif (triggerReturn === 0) {\n  console.log('Press Trigger Success');\n} else {\n  console.log('Press Trigger Failure: ' + triggerReturn);\n}\n")),(0,l.kt)("h4",{id:"releasetriggerpromise-number"},".releaseTrigger(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): number"),(0,l.kt)("p",null,"Call this method to simulate a release of a trigger button. The method does not always immediately stop a capture; instead it behaves like releasing a physical scan button."),(0,l.kt)("h5",{id:"response-2"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"number")," with  SUCCESS (0) in case of success, otherwise a possible error code, matching one of the DecodeException error constants."),(0,l.kt)("h5",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { BarcodeManager } from '@datalogic/react-native-datalogic-module';\n...\nvar triggerReturn = await BarcodeManager.releaseTrigger();\nif (triggerReturn === 0) {\n  console.log('Release Trigger Success');\n} else {\n  console.log('Release Trigger Failure: ' + triggerReturn);\n}\n")),(0,l.kt)("h3",{id:"autoscantrigger"},"AutoScanTrigger"),(0,l.kt)("hr",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#isavailablepromise-boolean"},"isAvailable")),(0,l.kt)("td",{parentName:"tr",align:null},"Determine if the auto scan feature is available on this device.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getsupportedrangespromise-object"},"getSupportedRanges")),(0,l.kt)("td",{parentName:"tr",align:null},"Get the supported ranges of the autoscan feature.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getcurrentrangepromise-object"},"getCurrentRange")),(0,l.kt)("td",{parentName:"tr",align:null},"Get the current range of the autoscan feature.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#setcurrentrangerangeid-promise-boolean"},"setCurrentRange")),(0,l.kt)("td",{parentName:"tr",align:null},"Set the current range of the autoscan feature.")))),(0,l.kt)("h4",{id:"isavailablepromise-boolean"},".isAvailable(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): boolean"),(0,l.kt)("p",null,"Determine if the auto scan feature is available on this device."),(0,l.kt)("h5",{id:"response-3"},"Response"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," - indicates if autoscan is supported or not on this device.")),(0,l.kt)("h5",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { AutoScanTrigger } from '@datalogic/react-native-datalogic-module';\n...\nvar isAvailableReturn = await AutoScanTrigger.isAvailable();\nconsole.log(isAvailableReturn);\n")),(0,l.kt)("h4",{id:"getsupportedrangespromise-object"},".getSupportedRanges(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): Object"),(0,l.kt)("p",null,"Get the supported ranges of the autoscan feature."),(0,l.kt)("h5",{id:"response-4"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"supportedRanges")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")," - provides array of ranges device supports. The array will be null if device does not support autoscan. Each object in the array contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"number")," - unique value for a step in the supported ranges"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," - descriptive text related to the ",(0,l.kt)("inlineCode",{parentName:"li"},"id"))),(0,l.kt)("p",null,"If AutoScan is not supported by device:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"null\n")),(0,l.kt)("p",null,"If AutoScan is supported:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "supportedRanges":[\n  {\n    "id":0,\n    "name":"Near"\n  },\n  {\n    "id":1,\n    "name":"Intermediate"\n  },\n  {\n    "id":2,\n    "name":"Far"\n  }\n  ]\n}\n')),(0,l.kt)("h5",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { AutoScanTrigger } from '@datalogic/react-native-datalogic-module';\n...\nvar supportedRangesReturn = await AutoScanTrigger.getSupportedRanges();\nconsole.log(supportedRangesReturn);\n")),(0,l.kt)("h4",{id:"getcurrentrangepromise-object"},".getCurrentRange(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): Object"),(0,l.kt)("p",null,"Get the current range of the autoscan feature."),(0,l.kt)("h5",{id:"response-5"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"currentRange")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"object")," - contains 2 fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("p",null,"If AutoScan is not supported by device:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"null\n")),(0,l.kt)("p",null,"If AutoScan is supported:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "currentRange":\n  {\n      "id":1,\n      "name":"Intermediate"\n  }\n}\n')),(0,l.kt)("h5",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { AutoScanTrigger } from '@datalogic/react-native-datalogic-module';\n...\nvar currentRangeReturn = await AutoScanTrigger.getCurrentRange();\nconsole.log(currentRangeReturn);\n")),(0,l.kt)("h4",{id:"setcurrentrangerangeid-promise-boolean"},".setCurrentRange(",(0,l.kt)("inlineCode",{parentName:"h4"},"rangeId"),", ",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): boolean"),(0,l.kt)("p",null,"Set the current range of the autoscan feature."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"rangeId")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"number")," - should match one of the ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," values retrieved by the getSupportedRanges function."),(0,l.kt)("h5",{id:"response-6"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Boolean")," with true or false depending on success. "),(0,l.kt)("h5",{id:"example-6"},"Example"),(0,l.kt)("p",null,'Set current range to "Intermediate"'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var setRangeReturn = await AutoScanTrigger.setCurrentRange(0);\nconsole.log(setRangeReturn);\n")),(0,l.kt)("h3",{id:"keyboardmanager"},"KeyboardManager"),(0,l.kt)("hr",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getallavailabletriggers-promise-object"},"getAllAvailableTriggers")),(0,l.kt)("td",{parentName:"tr",align:null},"Get all the available triggers of the device.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#setallavailabletriggersenable-promise-boolean"},"setAllAvailableTriggers")),(0,l.kt)("td",{parentName:"tr",align:null},"Set all the devices triggers on or off.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#settriggersconfig-promise-boolean"},"setTriggers")),(0,l.kt)("td",{parentName:"tr",align:null},"Set one or more triggers on or off.")))),(0,l.kt)("h4",{id:"getallavailabletriggers-promise-object"},".getAllAvailableTriggers (",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): Object"),(0,l.kt)("p",null,"Get all the available triggers of the device."),(0,l.kt)("h5",{id:"response-7"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"triggers")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")," - each Object in the triggers Object contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enabled")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("p",null,"Typical response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "triggers":[\n    {\n        "enabled":true,\n        "id":0,\n        "name":"Left Trigger"\n    },\n    {\n        "enabled":false,\n        "id":1,\n        "name":"Right Trigger"\n    },\n    {\n        "enabled":false,\n        "id":2,\n        "name":"Pistol Trigger"\n    }\n    ]\n}\n')),(0,l.kt)("h5",{id:"example-7"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var getTriggersReturn = await KeyboardManager.getAllAvailableTriggers();\nconsole.log(getTriggersReturn);\n")),(0,l.kt)("h4",{id:"setallavailabletriggersenable-promise-boolean"},".setAllAvailableTriggers(",(0,l.kt)("inlineCode",{parentName:"h4"},"enable"),", ",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): boolean"),(0,l.kt)("p",null,"Set all the devices triggers on or off."),(0,l.kt)("h5",{id:"response-8"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," with true/false based on success"),(0,l.kt)("h5",{id:"example-8"},"Example"),(0,l.kt)("p",null,"Turn all triggers on."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var setTriggersReturn = await KeyboardManager.setAllAvailableTriggers(\n  true\n);\nconsole.log(setTriggersReturn);\n")),(0,l.kt)("h4",{id:"settriggersconfig-promise-boolean"},".setTriggers(",(0,l.kt)("inlineCode",{parentName:"h4"},"config"),", ",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): boolean"),(0,l.kt)("p",null,"Set one or more triggers on or off. You will likely call ",(0,l.kt)("inlineCode",{parentName:"p"},"getAllAvailableTriggers"),", edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"enabled")," flags of each returned object as desired, and then resubmit by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"setTriggers"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"config")," : ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")," - each object in the array represents an individual trigger. Each object in the array contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enabled")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,l.kt)("h5",{id:"response-9"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," with true/false based on success."),(0,l.kt)("h5",{id:"example-9"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var triggersArray = [\n  { enabled: false, id: 0, name: 'Left Trigger' },\n  { enabled: true, id: 1, name: 'Right Trigger' },\n  { enabled: false, id: 2, name: 'Pistol Trigger' },\n];\nvar setTriggersReturn = await KeyboardManager.setTriggers(triggersArray);\nconsole.log(setTriggersReturn);\n")),(0,l.kt)("h3",{id:"ledmanager"},"LedManager"),(0,l.kt)("hr",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#setledobject-promise-boolean"},"setLed")),(0,l.kt)("td",{parentName:"tr",align:null},"Set various device LEDs.")))),(0,l.kt)("h4",{id:"setledobject-promise-boolean"},".setLed(",(0,l.kt)("inlineCode",{parentName:"h4"},"object"),", ",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): boolean"),(0,l.kt)("p",null,"Set the various device LEDs. A list of enum values for LEDs can be found ",(0,l.kt)("a",{parentName:"p",href:"https://datalogic.github.io/android-sdk-docs/reference/com/datalogic/device/notification/Led.html"},"here"),"."),(0,l.kt)("h5",{id:"response-10"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," with true/false based on success."),(0,l.kt)("h5",{id:"example-10"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var ledMap = { led: 'LED_GREEN_SPOT', enable: false };\nvar setLedReturn = await LedManager.setLed(ledMap);\nconsole.log(setLedReturn);\n")),(0,l.kt)("h3",{id:"scannerproperties"},"ScannerProperties"),(0,l.kt)("hr",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#editpromise-object"},"edit")),(0,l.kt)("td",{parentName:"tr",align:null},"Get a list of supported properties along with the state of each (enabled or disabled).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#storeproperties-promise-boolean"},"store")),(0,l.kt)("td",{parentName:"tr",align:null},"Apply changes to one or more properties with the values supplied.")))),(0,l.kt)("h4",{id:"editpromise-object"},".edit(",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): Object"),(0,l.kt)("p",null,"Get a list of supported scanner properties along with the state of each (enabled or disabled)."),(0,l.kt)("h5",{id:"response-11"},"Response"),(0,l.kt)("p",null,"A single Object containing Objects for each of the available symbologies. Each symbology contains, at a minimum, these fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enable")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," - if scanner is set to detect this barcode type or not"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"supported")," : ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," - if the scanner supports the given barcode type or not")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "keyboardWedge":{"enable":true,"supported":true},\n  "aztec":{"enable":true,"supported":true},\n  "codabar":{"enable":true,"supported":true},\n  "code128":{"enable":true,"supported":true},\n  "code39":{"enable":true,"supported":true},\n  "code93":{"enable":false,"supported":true},\n  "composite":{"enable":false,"supported":true},\n  "datamatrix":{"enable":true,"supported":true},\n  "digimarc":{"enable":false,"supported":false},\n  "discrete25":{"enable":false,"supported":true},\n  "ean13":{"enable":true,"supported":true},\n  "ean8":{"enable":true,"supported":true},\n  "gs1DataBar_14":{"enable":true,"supported":true},\n  "gs1DataBar_Expanded":{"enable":true,"supported":true},\n  "gs1DataBar_Limited":{"enable":true,"supported":true},\n  "interleaved25":{"enable":true,"supported":true},\n  "matrix25":{"enable":false,"supported":true},\n  "maxicode":{"enable":false,"supported":true},\n  "microQr":{"enable":false,"supported":true},\n  "micropdf417":{"enable":false,"supported":true},\n  "msi":{"enable":false,"supported":true},\n  "p4State":{"enable":false,"supported":true},\n  "pAus":{"enable":false,"supported":true},\n  "pJap":{"enable":false,"supported":true},\n  "pKix":{"enable":false,"supported":true},\n  "pPlanet":{"enable":false,"supported":true},\n  "pPostnet":{"enable":false,"supported":true},\n  "pRM":{"enable":false,"supported":true},\n  "pdf417":{"enable":true,"supported":true},\n  "qrCode":{"enable":true,"supported":true},\n  "upcA":{"enable":true,"supported":true},\n  "upcE":{"enable":true,"supported":true}\n}\n')),(0,l.kt)("h5",{id:"example-11"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var editReturn = await ScannerProperties.edit();\nconsole.log(JSON.stringify(editReturn, undefined, 1));\n")),(0,l.kt)("h4",{id:"storeproperties-promise-boolean"},".store(",(0,l.kt)("inlineCode",{parentName:"h4"},"properties"),", ",(0,l.kt)("inlineCode",{parentName:"h4"},"promise"),"): boolean"),(0,l.kt)("p",null,"Apply changes to one or more symbologies with the values supplied in ",(0,l.kt)("inlineCode",{parentName:"p"},"properties"),"."),(0,l.kt)("h5",{id:"response-12"},"Response"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," with true/false based on success."),(0,l.kt)("h5",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Disable keyboardWedge symbology, enable aztec symbology."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var storeMap = {\n  keyboardWedge: { enable: false, supported: true },\n  aztec: { enable: true },\n};\nvar storeReturn = await ScannerProperties.store(storeMap);\nconsole.log(JSON.stringify(storeReturn, undefined, 1));\n")))}c.isMDXComponent=!0}}]);