"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[8156],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=i.createContext({}),l=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return i.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},b=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),b=l(t),f=r,m=b["".concat(u,".").concat(f)]||b[f]||p[f]||s;return t?i.createElement(m,o(o({ref:n},c),{},{components:t})):i.createElement(m,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=b;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var l=2;l<s;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}b.displayName="MDXCreateElement"},81708:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var i=t(87462),r=t(63366),s=(t(67294),t(3905)),o=["components"],a={id:"javaxusbproperties",title:"javax.usb.properties Reference",sidebar_label:"javax.usb.properties"},u=void 0,l={unversionedId:"javapos/configref/javaxusbproperties",id:"javapos/configref/javaxusbproperties",title:"javax.usb.properties Reference",description:"Overview",source:"@site/docs/javapos/configref/javaxusbproperties.md",sourceDirName:"javapos/configref",slug:"/javapos/configref/javaxusbproperties",permalink:"/javapos/configref/javaxusbproperties",tags:[],version:"current",frontMatter:{id:"javaxusbproperties",title:"javax.usb.properties Reference",sidebar_label:"javax.usb.properties"},sidebar:"JavaPOS",previous:{title:"LabelIdentifiers.csv",permalink:"/javapos/configref/labelparsercsv"},next:{title:"jpos.properties",permalink:"/javapos/configref/jposproperties"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Default configuration file",id:"default-configuration-file",level:2}],b={toc:p};function f(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,i.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"The javax.usb.properties file is used to configure the USB implementation on Linux operating systems. For more information regarding the settings and usages, please refer to the ",(0,s.kt)("a",{parentName:"p",href:"http://javax-usb.sourceforge.net/"},"JSR80 project documentation"),"."),(0,s.kt)("h2",{id:"default-configuration-file"},"Default configuration file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"#\n# Properties file for javax.usb\n#\n# This file is provided by the Linux implementation of javax.usb.\n#\n# The 2.4 kernel does not support control-type queueing nor interrupt-type\n# queueing (see below to enable javax.usb internal queueing).\n#\n# Some 2.4 kernels do not properly handle hotplug notification, specifically\n# those somewhere after 2.4.19.  See below to enable polling instead.\n#\n\n################################################################################\n# Properties required/used by javax.usb API\n################################################################################\n\n# This is required by the API, this is the class that the API will create\n# to implement UsbServices.\njavax.usb.services = com.ibm.jusb.os.linux.LinuxUsbServices\n#javax.usb.services = de.ailis.usb4java.Services \n\n################################################################################\n# Properties required/used by javax.usb Common Reference Implementation\n################################################################################\n\n# These properties enable queueing for different pipe types.  If the operating\n# system does not support queueing for a particular pipe type (or at all),\n# enable queueing here.  This queueing is most likely much slower than OS-level\n# queueing, so if the OS supports queueing, these should not be enabled.\n#com.ibm.jusb.UsbPipeImp.queueSubmissions.control = true\n#com.ibm.jusb.UsbPipeImp.queueSubmissions.interrupt = false\n#com.ibm.jusb.UsbPipeImp.queueSubmissions.isochronous = false\n#com.ibm.jusb.UsbPipeImp.queueSubmissions.bulk = false\n\n# This property is similar to the UsbPipe-specific queueing properties, but\n# this applies only to the Default Control Pipe queueing.\ncom.ibm.jusb.UsbDeviceImp.queueSubmissions = true\n\n################################################################################\n# Properties required/used by javax.usb Linux Implementation\n################################################################################\n\n# If polling should be used instead of waiting for a hotplug notification.\n# Some kernel versions have a bug, and don't update the device node(s) until\n# many seconds after waking up threads waiting on the devices file.\n# If you are not getting hotplug events on a moderately to heavily loaded system,\n# use polling.\n# Note that since the new (buggy?) kernel behavior breaks javax.usb, this defaults to true!\n# If you know your kernel isn't broken you can set this to false.\ncom.ibm.jusb.os.linux.LinuxUsbServices.topologyUpdateUsePolling = true\n\n# If polling is disabled, this is how long in ms to delay after a\n# hotplug event is signalled to re-enumerate the USB bus.\n# If polling is enabled, this is how often to poll.\ncom.ibm.jusb.os.linux.LinuxUsbServices.topologyUpdateDelay = 500\n\n# After new device(s) are detected, the device's driver is probably taking its\n# sweet time talking to them.  This delay lets the Linux driver (if any) have some time to\n# talk before we send a device connection event, which may cause an application\n# to immediately start talking to the device.\ncom.ibm.jusb.os.linux.LinuxUsbServices.topologyUpdateNewDeviceDelay = 100\n\n################################################################################\n# Tracing properties used by javax.usb Linux Implementation\n################################################################################\n\n# These rest apply to JNI tracing levels.  This is a little better than it used to be,\n# but it needs more improvement as far as controlling the tracers and levels.\n\n# This either disables tracing entirely, or enables some amount of tracing.\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.tracing = true\n\n# This defines where the JNI tracing output is sent.\n# The default is stderr.  Note that if append mode is used, the trace file will\n# grow ever-larger every time javax.usb is run, and its size should be managed\n# somehow.  In file mode, the file size will not be managed/limited by javax.usb.\n#  1 - stdout\n#  2 - stderr\n#  3 - file (truncate mode)\n#  4 - file (append mode)\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_output = 2\n\n# This is the filename to trace to, if trace_output is set to file tracing.\n# There is NO DEFAULT to this, it must be set if trace_output is set to file tracing.\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_filename = \n\n# This sets the tracing level.  Higher levels mean more tracing.\n# This level applies to ALL tracers.  See each tracer for their levels.\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_level = 4\n\n# This enables or disables default tracing.  This is the most used tracer.\n# The trace_data must also be enabled.\n# These are the levels for this tracer.\n#  0 - CRITICAL\n#  1 - ERROR\n#  2 - INFO\n#  3 - FUNCTION\n#  4 - DEBUG\n#  5 - OTHER\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_default = true\n\n# This enables or disables hotplug tracing.\n# The trace_data must also be enabled.\n# These are the levels for this tracer.\n#  0 - CRITICAL\n#  1 - ERROR\n#  2 - CHANGE\n#  3 - DEVICE\n#  4 - OTHER\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_hotplug = true\n\n# This enables or disables xfer tracing.\n# The trace_data must also be enabled.\n# These are the levels for this tracer.\n#  0 - CRITICAL\n#  1 - ERROR\n#  2 - REQUEST\n#  3 - METADATA\n#  4 - DATA\n#  5 - OTHER\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_xfer = true\n\n# This enables or disables urb tracing.\n# The trace_data must also be enabled.\n# WARNING!  DATA-level tracing will generate a LOT of output.\n# These are the levels for this tracer.\n#  2 - METADATA\n#  3 - DATA\n#com.ibm.jusb.os.linux.LinuxUsbServices.JNI.trace_urb = false\n")))}f.isMDXComponent=!0}}]);