"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[35194],{44790:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>o,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=s(85893),r=s(11151);const i={id:"interfaces",title:"Interfaces",sidebar_label:"Interfaces"},c=void 0,a={id:"capturesdk/interfaces",title:"Interfaces",description:"The SDK has a series of interfaces that expose abstract methods that you can overwrite to receive callbacks to events. Examples of other similar interfaces can be found in the Datalogic USB SDK//datalogic.github.io/android-sdk-docs/reference/com/datalogic/decode/package-summary.html).",source:"@site/docs/capturesdk/interfaces.md",sourceDirName:"capturesdk",slug:"/capturesdk/interfaces",permalink:"/capturesdk/interfaces",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"interfaces",title:"Interfaces",sidebar_label:"Interfaces"},sidebar:"CaptureSDK",previous:{title:"Special Settings and Limitations",permalink:"/capturesdk/settings-and-limitations"},next:{title:"Classes",permalink:"/capturesdk/classes"}},d={},l=[{value:"UsbListener",id:"usblistener",level:2},{value:"UsbScanListener",id:"usbscanlistener",level:2},{value:"StatusListener",id:"statuslistener",level:2},{value:"UsbDioListener",id:"usbdiolistener",level:2},{value:"UsbScaleListener",id:"usbscalelistener",level:2}];function h(e){const t={a:"a",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The SDK has a series of interfaces that expose abstract methods that you can overwrite to receive callbacks to events. Examples of other similar interfaces can be found in the Datalogic USB SDK: (",(0,n.jsx)(t.a,{href:"https://datalogic.github.io/android-sdk-docs/reference/com/datalogic/decode/package-summary.html",children:"https://datalogic.github.io/android-sdk-docs/reference/com/datalogic/decode/package-summary.html"}),")."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Interfaces"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"UsbListener"}),(0,n.jsx)(t.td,{children:"Listen to USB Scanner device connection events (connected or disconnected)."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"UsbScanListener"}),(0,n.jsx)(t.td,{children:"Listen to USB Scan events."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"StatusListener"}),(0,n.jsx)(t.td,{children:"Listen to when a device status gets changed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"UsbDioListener"}),(0,n.jsx)(t.td,{children:"Listen to when a DIO command gets execute."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"UsbScaleListener"}),(0,n.jsx)(t.td,{children:"Listen to USB scale events that will return the scale data."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"usblistener",children:"UsbListener"}),"\n",(0,n.jsx)(t.p,{children:"Interface with an abstract method that is triggered when a USB Scanner device is connected or disconnected with the mobile device."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Public Abstract Methods"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"void onDeviceAttachedListener()"}),(0,n.jsx)(t.td,{children:"Called when a USB Scanner connection event is fired."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"void onDeviceDetachedListener()"}),(0,n.jsx)(t.td,{children:"Called when a USB Scanner disconnection event is fired."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"usbscanlistener",children:"UsbScanListener"}),"\n",(0,n.jsx)(t.p,{children:"Interface with a single abstract method that is triggered when a USB Scanner device scans a barcode."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Public Abstract Methods"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fun onScan(scanData: UsbScanData)"}),(0,n.jsx)(t.td,{children:"Called when a USB Scanner scan event is fired. Receives ScanData of the scanned barcode as an argument."})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"statuslistener",children:"StatusListener"}),"\n",(0,n.jsx)(t.p,{children:"Interface with abstract method that is triggered when a when a device status get changed."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Public Abstract Methods"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["fun onStatus(productId",":String",", status: DeviceStatus)"]}),(0,n.jsx)(t.td,{children:"Called when a USB device status event is fired."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fun onError(errorStatus : Int)"}),(0,n.jsx)(t.td,{children:"Function called when error occurred."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"usbdiolistener",children:"UsbDioListener"}),"\n",(0,n.jsx)(t.p,{children:"Interface with abstract method that is triggered when a DIO Commands get failed."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Public Abstract Methods"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fun fireDioErrorEvent(errorCode: Int,  message: String)"}),(0,n.jsx)(t.td,{children:"Called when a DIO Commands get failed."})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"usbscalelistener",children:"UsbScaleListener"}),"\n",(0,n.jsx)(t.p,{children:"Interface with a single abstract method that is triggered when a USB Scanner device returns the scale value."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Public Abstract Methods"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fun onScale(scaleData: ScaleData)"}),(0,n.jsx)(t.td,{children:"Called when a USB Scanner scale event is fired. Receives ScaleData of the scale data as an argument."})]})})]})]})}function o(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>c});var n=s(67294);const r={},i=n.createContext(r);function c(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);