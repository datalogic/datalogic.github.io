"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[39430],{34279:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=i(85893),a=i(11151);const s={id:"interfaces",title:"Interfaces"},r=void 0,c={id:"aladdin/codiscan/interfaces",title:"Interfaces",description:"Summary",source:"@site/docs/aladdin/codiscan/interfaces.md",sourceDirName:"aladdin/codiscan",slug:"/aladdin/codiscan/interfaces",permalink:"/aladdin/codiscan/interfaces",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"interfaces",title:"Interfaces"},sidebar:"Aladdin",previous:{title:"ConfigurationManager",permalink:"/aladdin/codiscan/configuration"},next:{title:"Data Classes",permalink:"/aladdin/codiscan/data-classes"}},l={},d=[{value:"Summary",id:"summary",level:2},{value:"BatteryStatusListener",id:"batterystatuslistener",level:3},{value:"Abstract Functions",id:"abstract-functions",level:4},{value:"Example",id:"example",level:4},{value:"ConnectListener",id:"connectlistener",level:3},{value:"Abstract Functions",id:"abstract-functions-1",level:4},{value:"Example",id:"example-1",level:4},{value:"DeviceDetailsListener",id:"devicedetailslistener",level:3},{value:"Abstract Functions",id:"abstract-functions-2",level:4},{value:"Example",id:"example-2",level:4},{value:"DisconnectListener",id:"disconnectlistener",level:3},{value:"Abstract Functions",id:"abstract-functions-3",level:4},{value:"Example",id:"example-3",level:4},{value:"GetConfigListener",id:"getconfiglistener",level:3},{value:"Abstract Functions",id:"abstract-functions-4",level:4},{value:"Example",id:"example-4",level:4},{value:"PairingCodeListener",id:"pairingcodelistener",level:3},{value:"Abstract Functions",id:"abstract-functions-5",level:4},{value:"Example",id:"example-5",level:4},{value:"ScanListener",id:"scanlistener",level:3},{value:"Abstract Functions",id:"abstract-functions-6",level:4},{value:"Example",id:"example-6",level:4},{value:"SetConfigListener",id:"setconfiglistener",level:3},{value:"Abstract Functions",id:"abstract-functions-7",level:4},{value:"Example",id:"example-7",level:4}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"The CODiScan\u2122 HS7600 SDK contains a series of interfaces, which when implemented, can be used to receive callbacks pertaining to the pairing with, or status of, a connected CODiScan\u2122 HS7600 device."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Interfaces"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#batterystatuslistener",children:(0,t.jsx)(n.strong,{children:"BatteryStatusListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive battery status callbacks."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#connectlistener",children:(0,t.jsx)(n.strong,{children:"ConnectListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive connect callbacks."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#devicedetailslistener",children:(0,t.jsx)(n.strong,{children:"DeviceDetailsListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive device details callbacks."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#disconnectlistener",children:(0,t.jsx)(n.strong,{children:"DisconnectListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive disconnect callbacks."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#getconfiglistener",children:(0,t.jsx)(n.strong,{children:"GetConfigListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive get configuration values callback."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#pairingcodelistener",children:(0,t.jsx)(n.strong,{children:"PairingCodeListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive pairing code callback."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#scanlistener",children:(0,t.jsx)(n.strong,{children:"ScanListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive scan callbacks."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#setconfiglistener",children:(0,t.jsx)(n.strong,{children:"SetConfigListener"})})}),(0,t.jsx)(n.td,{children:"Interface to receive set configuration values callback."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"batterystatuslistener",children:"BatteryStatusListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive battery status callbacks."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onBatteryStatus(batteryData: BatteryData)"})," - triggered after ",(0,t.jsx)(n.a,{href:"./device#triggerbatterystatus",children:"triggerBatteryStatus"})," is called, when battery data is received from the connected CODiScan device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : BatteryStatusListener {\n    override fun onBatteryStatus(batteryData: BatteryData) {\n        Log.i("MY_APP", "Remaining battery percentage of CODiScan device: ${batteryData.batteryCharge}")\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"connectlistener",children:"ConnectListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive connect callbacks."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-1",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onConnect()"})," - triggered when a CODiScan device is connected with the Android device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : ConnectListener {\n    override fun onConnect() {\n        Log.i("MY_APP", "Connected to the CODiScan device.")\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"devicedetailslistener",children:"DeviceDetailsListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive device details callbacks."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-2",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onDeviceDetails(deviceData: DeviceData)"})," - triggered after ",(0,t.jsx)(n.a,{href:"./device#triggerdevicedetails",children:"triggerDeviceDetails"})," is called, when device data is received from the connected CODiScan device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : DeviceDetailsListener {\n    override fun onDeviceDetails(deviceData: DeviceData) {\n        Log.i("MY_APP", "Connected CODiScan\'s device ID: ${deviceData.deviceId}")\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"disconnectlistener",children:"DisconnectListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive disconnect callbacks."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-3",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onDisconnect()"})," - triggered when a CODiScan device is disconnected from the Android device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : DisconnectListener {\n    override fun onDisconnect() {\n        Log.i("MY_APP", "Disconnected from the CODiScan.")\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getconfiglistener",children:"GetConfigListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive get configuration values callback."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-4",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onGetConfig(ints: HashMap<Int, Int>, strings: HashMap<Int, String>)"})," - triggered after ",(0,t.jsx)(n.a,{href:"./configuration#get",children:"get"})," is called, when configuration parameter values are received from the connected CODiScan device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : GetConfigListener {\n    override fun onGetConfig(ints: HashMap<Int, Int>, strings: HashMap<Int, String>) {\n        ints.entries.forEach { entry ->\n            Log.i("CODISCAN", "Property ID ${entry.key} has value: ${entry.value}")\n        }\n        strings.entries.forEach { entry ->\n            Log.i("CODISCAN", "Property ID ${entry.key} has value: ${entry.value}")\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"pairingcodelistener",children:"PairingCodeListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive pairing code callback."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-5",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onPairingCode(pairingData: PairingData)"})," - triggered after ",(0,t.jsx)(n.a,{href:"./device#triggerpairingobject",children:"triggerPairingObject"})," is called, when a pairing code is received from the CODiScan service."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : PairingCodeListener {\n    private val dataMatrixViewModel: DataMatrixViewModel by viewModels()\n    override fun onPairingCode(pairingData: PairingData) {\n        Log.i("MY_APP", "Pairing code: ${pairingData.pairingCode}")\n        dataMatrixViewModel.setDataMatrix(pairingData.bitmap)\n    }\n\n    @Composable\n    fun DataMatrix(){\n        val image by dataMatrixViewModel.dataMatrixImage.observeAsState()\n        Image(image!!,"", modifier = Modifier.width(240.dp).height(240.dp))\n    }\n}\n\nclass DataMatrixViewModel: ViewModel() {\n    private val _dataMatrixImage = MutableLiveData<ImageBitmap>()\n    val dataMatrixImage: LiveData<ImageBitmap> = _dataMatrixImage\n\n    fun setDataMatrix(raw: Bitmap){\n        viewModelScope.launch {\n            _dataMatrixImage.value = raw.asImageBitmap()\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"scanlistener",children:"ScanListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive scan callbacks."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-6",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onScan(scanData: ScanData)"})," - triggered after a barcode is scanned from the connected CODiScan device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : ScanListener {\n    override fun onScan(scanData: ScanData) {\n        Log.i("MY_APP", "Scan data: ${scanData.barcodeData}")\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setconfiglistener",children:"SetConfigListener"}),"\n",(0,t.jsx)(n.p,{children:"Interface to receive set configuration values callback."}),"\n",(0,t.jsx)(n.h4,{id:"abstract-functions-7",children:"Abstract Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onSetConfig(status: Int, message: String)"})," - triggered after ",(0,t.jsx)(n.a,{href:"./configuration#set",children:"set"})," is called, when status is received, regarding applying new configuration values, from the connected CODiScan device."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'Class MyClass : SetConfigListener {\n    override fun onSetConfig(status: Int, message: String) {\n        Log.i("MY_APP", "Set config status $status: $message")\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>r});var t=i(67294);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);