"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[64337],{55649:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var r=i(85893),s=i(11151);const t={id:"configuration",title:"ConfigurationManager"},l=void 0,a={id:"aladdin/codiscan/configuration",title:"ConfigurationManager",description:"Summary",source:"@site/docs/aladdin/codiscan/configuration-manager.md",sourceDirName:"aladdin/codiscan",slug:"/aladdin/codiscan/configuration",permalink:"/aladdin/codiscan/configuration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"configuration",title:"ConfigurationManager"},sidebar:"Aladdin",previous:{title:"DeviceManager",permalink:"/aladdin/codiscan/device"},next:{title:"Interfaces",permalink:"/aladdin/codiscan/interfaces"}},c={},d=[{value:"Summary",id:"summary",level:2},{value:"Functions",id:"functions",level:3},{value:"Functions",id:"functions-1",level:2},{value:"set",id:"set",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"get",id:"get",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"registerGetListener",id:"registergetlistener",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"removeGetListener",id:"removegetlistener",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"registerSetListener",id:"registersetlistener",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"removeSetListener",id:"removesetlistener",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Inner class of the CodiscanSDK class. Used to set/get configuration values of a connected CODiScan device."}),"\n",(0,r.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Function"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#set",children:(0,r.jsx)(n.strong,{children:"set"})})}),(0,r.jsx)(n.td,{children:"Set given integer and/or string properties of the connected CODiScan device."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#get",children:(0,r.jsx)(n.strong,{children:"get"})})}),(0,r.jsxs)(n.td,{children:["Get values for the given ",(0,r.jsx)(n.a,{href:"/aladdin/codiscan/property-id",children:"PropertyID"}),"s from the connected CODiScan device."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registergetlistener",children:(0,r.jsx)(n.strong,{children:"registerGetListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#getconfiglistener",children:"GetConfigListener"})," to receive onGetConfig callbacks when property values are received from the connected CODiScan device. Triggered by ",(0,r.jsx)(n.a,{href:"#get",children:(0,r.jsx)(n.strong,{children:"get"})}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removegetlistener",children:(0,r.jsx)(n.strong,{children:"removeGetListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#getconfiglistener",children:"GetConfigListener"})," to stop receiving onGetConfig callbacks."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registersetlistener",children:(0,r.jsx)(n.strong,{children:"registerSetListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#setconfiglistener",children:"SetConfigListener"})," to receive onSetConfig callbacks when status has been received from applying property values of the connected CODiScan device. Triggered by ",(0,r.jsx)(n.a,{href:"#set",children:(0,r.jsx)(n.strong,{children:"set"})}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removesetlistener",children:(0,r.jsx)(n.strong,{children:"removeSetListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#setconfiglistener",children:"SetConfigListener"})," to stop receiving onSetConfig callbacks."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"functions-1",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"set",children:"set"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun set(ints: HashMap<Int, Int>, strings: HashMap<Int, String>): Int\n"})}),"\n",(0,r.jsx)(n.p,{children:"Set given integer and/or string properties of the connected CODiScan device."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["ints - map of the given ",(0,r.jsx)(n.a,{href:"/aladdin/codiscan/property-id",children:"PropertyID"}),"'s key and values."]}),"\n",(0,r.jsxs)(n.li,{children:["strings - map of the given string ",(0,r.jsx)(n.a,{href:"/aladdin/codiscan/property-id",children:"PropertyID"}),"'s key and values."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"1 -> Fail, CODiScan device disconnected."}),"\n",(0,r.jsx)(n.li,{children:"4 -> Fail, no configuration values to set."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n",(0,r.jsx)(n.li,{children:"8 -> Fail, bad configuration values given."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.configurationManager.set(hashMapOf(PropertyID.AZTEC_ENABLE to 1), hashMapOf(PropertyID.LABEL_ID_AZTEC to "ABC")) != 0) {\n    Log.i("MY_APP", "Something went wrong with setting values to the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get",children:"get"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun get(ids: IntArray): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Get values for the given ",(0,r.jsx)(n.a,{href:"/aladdin/codiscan/property-id",children:"PropertyID"}),"s from the connected CODiScan device."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["ids - the given ",(0,r.jsx)(n.a,{href:"/aladdin/codiscan/property-id",children:"PropertyID"}),"s to retrieve the values of."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"1 -> Fail, CODiScan device disconnected."}),"\n",(0,r.jsx)(n.li,{children:"4 -> Fail, no configuration values to get."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n",(0,r.jsx)(n.li,{children:"8 -> Fail, bad configuration values given."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.configurationManager.get(intArrayOf(PropertyID.AZTEC_ENABLE, PropertyID.LABEL_ID_AZTEC)) != 0) {\n    Log.i("MY_APP", "Something went wrong with getting values from the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registergetlistener",children:"registerGetListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerGetListener(listener: GetConfigListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#getconfiglistener",children:"GetConfigListener"})," to receive onGetConfig callbacks when property values are received from the connected CODiScan device. Triggered by ",(0,r.jsx)(n.a,{href:"#get",children:(0,r.jsx)(n.strong,{children:"get"})}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#getconfiglistener",children:"GetConfigListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.configurationManager.registerGetListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the get listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removegetlistener",children:"removeGetListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeGetListener(listener: GetConfigListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#getconfiglistener",children:"GetConfigListener"})," to stop receiving onGetConfig callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#getconfiglistener",children:"GetConfigListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.configurationManager.removeGetListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the get listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registersetlistener",children:"registerSetListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerGetListener(listener: GetConfigListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#setconfiglistener",children:"SetConfigListener"})," to receive onSetConfig callbacks when status has been received from applying property values of the connected CODiScan device. Triggered by ",(0,r.jsx)(n.a,{href:"#set",children:(0,r.jsx)(n.strong,{children:"set"})}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#setconfiglistener",children:"SetConfigListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.configurationManager.registerSetListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the set listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removesetlistener",children:"removeSetListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeSetListener(listener: GetConfigListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#setconfiglistener",children:"SetConfigListener"})," to stop receiving onSetConfig callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#setconfiglistener",children:"SetConfigListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.configurationManager.removeSetListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the set listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>l});var r=i(67294);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);