"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[63961],{82964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(85893),r=n(11151);n(74866),n(85162),n(10993);const i={id:"native-integration",title:"Native Interface Integration",sidebar_label:"Native Interface"},o=void 0,l={id:"aladdin/native-integration",title:"Native Interface Integration",description:"Native Interface Integration is only supported on Datalogic devices with SDK version 1.38 or newer.",source:"@site/docs/aladdin/native-integration.mdx",sourceDirName:"aladdin",slug:"/aladdin/native-integration",permalink:"/aladdin/native-integration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"native-integration",title:"Native Interface Integration",sidebar_label:"Native Interface"},sidebar:"Aladdin",previous:{title:"Web Socket",permalink:"/aladdin/web-socket"},next:{title:"Find My Device",permalink:"/aladdin/find-my-device"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Enhanced Data Processing",id:"enhanced-data-processing",level:2},{value:"Output Options",id:"output-options",level:2},{value:"External Scanner Source",id:"external-scanner-source",level:2}];function u(e){const t={a:"a",admonition:"admonition",h2:"h2",p:"p",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.admonition,{type:"important",children:(0,a.jsx)(t.p,{children:"Native Interface Integration is only supported on Datalogic devices with SDK version 1.38 or newer."})}),"\n",(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(t.p,{children:"The Native Interface Integration method is intended for use on Datalogic devices with an integrated barcode scanner.  When this integration method is enabled, barcode data is sent to the native barcode interface of the device.  This data is then treated, in most cases, as though it came from the internal scanner."}),"\n",(0,a.jsx)(t.h2,{id:"enhanced-data-processing",children:"Enhanced Data Processing"}),"\n",(0,a.jsxs)(t.p,{children:["When Native Interface Integration is used, CODiScan barcode data is processed by ",(0,a.jsx)(t.a,{href:"../scan2deploy/visual-formatter-basic-concepts",children:"Visual Formatter"})," before it is outputted.  This allows CODiScan users the flexibility to alter barcode data before it is outputted in ways that are not possible with other integration methods."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsx)(t.p,{children:"Internal scanner configuration does not affect CODiScan barcode data output."})}),"\n",(0,a.jsx)(t.h2,{id:"output-options",children:"Output Options"}),"\n",(0,a.jsxs)(t.p,{children:["Native Interface Integration allows for customers already using the ",(0,a.jsx)(t.a,{href:"../android/overview",children:"Datalogic Android SDK"})," to collect barcode data from an internal barcode scanner to seamlessly collect data from the CODiScan.  This is because barcode data from both sources is sent to the same ",(0,a.jsx)(t.a,{href:"https://datalogic.github.io/android-sdk-docs/reference/com/datalogic/decode/package-summary.html",children:"SDK interface"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Customers not using the ",(0,a.jsx)(t.a,{href:"../android/overview",children:"Datalogic Android SDK"})," can also benefit from this integration method by using ",(0,a.jsx)(t.a,{href:"../wedge/overview",children:"Datalogic Wedge"})," which allows for barcode data to be transmitted as keyboard input without the need of the Aladdin on-screen keyboard."]}),"\n",(0,a.jsx)(t.h2,{id:"external-scanner-source",children:"External Scanner Source"}),"\n",(0,a.jsxs)(t.p,{children:["Native Interface Integration can also be enabled or disabled using the ",(0,a.jsx)(t.a,{href:"https://datalogic.github.io/android-sdk-docs/reference/com/datalogic/decode/configuration/ExtScannerSource.html",children:"ExtScannerSource"})," decoding property."]})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},85162:(e,t,n)=>{n.d(t,{Z:()=>o});n(67294);var a=n(36905);const r={tabItem:"tabItem_Ymn6"};var i=n(85893);function o(e){let{children:t,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:n,children:t})}},74866:(e,t,n)=>{n.d(t,{Z:()=>I});var a=n(67294),r=n(36905),i=n(12466),o=n(16550),l=n(20469),s=n(91980),c=n(67392),u=n(50012);function d(e){var t,n;return null!=(t=null==(n=a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=null!=t?t:function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=h(e),[o,s]=(0,a.useState)((()=>function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}const r=null!=(t=a.find((e=>e.default)))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[c,d]=p({queryString:n,groupId:r}),[m,v]=function(e){let{groupId:t}=e;const n=function(e){return e?"docusaurus.tab."+e:null}(t),[r,i]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=null!=c?c:m;return f({value:e,tabValues:i})?e:null})();(0,l.Z)((()=>{b&&s(b)}),[b]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:i}))throw new Error("Can't select invalid tab value="+e);s(e),d(e),v(e)}),[d,v,i]),tabValues:i}}var v=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(85893);function x(e){let{className:t,block:n,selectedValue:a,selectValue:o,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=s.indexOf(t),r=l[n].value;r!==a&&(c(t),o(r))},d=e=>{var t;let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{var a;const t=s.indexOf(e.currentTarget)+1;n=null!=(a=s[t])?a:s[0];break}case"ArrowLeft":{var r;const t=s.indexOf(e.currentTarget)-1;n=null!=(r=s[t])?r:s[s.length-1];break}}null==(t=n)||t.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>s.push(e),onKeyDown:d,onClick:u,...i,className:(0,r.Z)("tabs__item",b.tabItem,null==i?void 0:i.className,{"tabs__item--active":a===t}),children:null!=n?n:t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function w(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,r.Z)("tabs-container",b.tabList),children:[(0,g.jsx)(x,{...t,...e}),(0,g.jsx)(y,{...t,...e})]})}function I(e){const t=(0,v.Z)();return(0,g.jsx)(w,{...e,children:d(e.children)},String(t))}},10993:(e,t,n)=>{n.d(t,{QA:()=>l,TS:()=>r,f5:()=>i,sD:()=>s,xo:()=>o});n(67294);var a=n(85893);function r(e){let{img:t,maxWidth:n="fit-content",maxHeight:r="fit-content"}=e;return(0,a.jsx)("img",{src:t,style:{width:"auto",height:"auto",maxWidth:n,maxHeight:r}})}function i(e){let{img:t,height:n="550px"}=e;return(0,a.jsx)("img",{src:t,style:{maxHeight:n}})}function o(e){let{img:t,height:n="550px",caption:r}=e;return(0,a.jsxs)("div",{children:[(0,a.jsx)("img",{src:t,style:{maxHeight:n}}),(0,a.jsx)("center",{children:(0,a.jsx)("b",{children:r})})]})}function l(e){let{children:t,flexWrap:n="wrap",alignItems:r="center",rowGap:i="15px",columnGap:o="25px"}=e;return(0,a.jsx)("div",{style:{display:"flex",alignItems:r,flexWrap:n,rowGap:i,columnGap:o,marginBottom:"20px"},children:t})}function s(e){let{img:t}=e;return(0,a.jsx)("img",{src:t,style:{border:"2px solid black"}})}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var a=n(67294);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);