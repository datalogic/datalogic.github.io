"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[3982],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58215:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294);function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return p}});var a=t(87462),i=t(67294),r=t(72389),o=t(63725),l=t(86010),s="tabItem_LplD";function c(e){var n,t,r,c=e.lazy,p=e.block,d=e.defaultValue,u=e.values,m=e.groupId,h=e.className,f=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=u?u:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,o.lx)(k,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var O=null===d?d:null!=(n=null!=d?d:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=f[0])?void 0:r.props.value;if(null!==O&&!k.some((function(e){return e.value===O})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+O+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,o.UB)(),S=v.tabGroupChoices,C=v.setTabGroupChoices,I=(0,i.useState)(O),b=I[0],N=I[1],E=[],y=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var D=S[m];null!=D&&D!==b&&k.some((function(e){return e.value===D}))&&N(D)}var P=function(e){var n=e.currentTarget,t=E.indexOf(n),a=k[t].value;a!==b&&(y(n),N(a),null!=m&&C(m,a))},T=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=E.indexOf(e.currentTarget)+1;t=E[a]||E[0];break;case"ArrowLeft":var i=E.indexOf(e.currentTarget)-1;t=E[i]||E[E.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},h)},k.map((function(e){var n=e.value,t=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:function(e){return E.push(e)},onKeyDown:T,onFocus:P,onClick:P},r,{className:(0,l.Z)("tabs__item",s,null==r?void 0:r.className,{"tabs__item--active":b===n})}),null!=t?t:n)}))),c?(0,i.cloneElement)(f.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==b})}))))}function p(e){var n=(0,r.Z)();return i.createElement(c,(0,a.Z)({key:String(n)},e))}},30625:function(e,n,t){t.r(n),t.d(n,{Img:function(){return u},assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),o=(t(9877),t(58215),["components"]),l={id:"tutorialcppscanner",title:"C++ Barcode Reader Tutorial",sidebar_label:"C++ Barcode Reader Tutorial"},s=void 0,c={unversionedId:"opos/develop/tutorialcppscanner",id:"opos/develop/tutorialcppscanner",title:"C++ Barcode Reader Tutorial",description:"<img src=",source:"@site/docs/opos/develop/tutorialcppscanner.md",sourceDirName:"opos/develop",slug:"/opos/develop/tutorialcppscanner",permalink:"/opos/develop/tutorialcppscanner",tags:[],version:"current",frontMatter:{id:"tutorialcppscanner",title:"C++ Barcode Reader Tutorial",sidebar_label:"C++ Barcode Reader Tutorial"},sidebar:"OPOS",previous:{title:"Introduction to the OPOS Tutorials",permalink:"/opos/develop/tutorialintro"},next:{title:"C++ Live Weight Reader Tutorial",permalink:"/opos/develop/tutorialcppscale"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a project",id:"creating-a-project",level:2},{value:"Exposing OPOS control objects",id:"exposing-opos-control-objects",level:2},{value:"Creating the OPOS scanner interface",id:"creating-the-opos-scanner-interface",level:2},{value:"Accessing the OPOS Scanner interface",id:"accessing-the-opos-scanner-interface",level:2},{value:"Creating a sink for the scanner",id:"creating-a-sink-for-the-scanner",level:2},{value:"Implementing IUnknown",id:"implementing-iunknown",level:4},{value:'Implementing IDispatch<a name="idispatch"></a>',id:"implementing-idispatch",level:4},{value:"Implementing event functions",id:"implementing-event-functions",level:4},{value:"Connecting the scanner and the sink",id:"connecting-the-scanner-and-the-sink",level:2},{value:"Tying it all together",id:"tying-it-all-together",level:2}],u=function(e){var n=e.src;return(0,r.kt)("img",{src:n,style:{maxWidth:"750px",maxHeight:"750px"}})},m={toc:d,Img:u};function h(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In this tutorial, we will be creating a simple console application in C++ that opens, claims and enables a scanner device and provides a mechanism to see what labels were scanned with that device. This tutorial only covers a very basic aspect of development using OPOS with C++, but should suffice as a starting point for any application that looks to read labels from a Datalogic scanning device."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Developing an application for a Datalogic scanning device requires you to first have Datalogic's OPOS installed. The OPOS installer ensures the required ActiveX Controls are registered and any supporting files are present."),(0,r.kt)("h2",{id:"creating-a-project"},"Creating a project"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Using Visual Studio 2019, navigate to ",(0,r.kt)("strong",{parentName:"li"},"File > New > Project ..."),(0,r.kt)(u,{src:"/img/opos/develop/cpp/filenewproject.png",mdxType:"Img"}))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the ",(0,r.kt)("strong",{parentName:"p"},"Create a new project")," dialog, set the filter to ",(0,r.kt)("strong",{parentName:"p"},"C++"),", select ",(0,r.kt)("strong",{parentName:"p"},"Console App")," and select ",(0,r.kt)("strong",{parentName:"p"},"Next")),(0,r.kt)(u,{src:"/img/opos/develop/cpp/createnewproject.png",mdxType:"Img"})),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the ",(0,r.kt)("strong",{parentName:"p"},"Configure your new project")," dialog, declare your ",(0,r.kt)("strong",{parentName:"p"},"Project name"),", ",(0,r.kt)("strong",{parentName:"p"},"Location")," and ",(0,r.kt)("strong",{parentName:"p"},"Solution name")," as desired and then select ",(0,r.kt)("strong",{parentName:"p"},"Create"),"."),(0,r.kt)(u,{src:"/img/opos/develop/cpp/scanner/configurenewproject.png",mdxType:"Img"}))),(0,r.kt)("h2",{id:"exposing-opos-control-objects"},"Exposing OPOS control objects"),(0,r.kt)("p",null,"The very first step is to reference the scanner ActiveX Control by its ProgID (Programmatic Identifier) using the ",(0,r.kt)("inlineCode",{parentName:"p"},"#import")," directive."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#import "progid:OPOS.Scanner"\n\nint main()\n{\n    return 0;\n}\n')),(0,r.kt)("p",null,"Compiling the project at this point, the ",(0,r.kt)("inlineCode",{parentName:"p"},"#import")," directive generates two files in your ",(0,r.kt)("inlineCode",{parentName:"p"},"$(Configuration)")," folder (i.e. Debug/Release). ",(0,r.kt)("inlineCode",{parentName:"p"},"OPOSScanner.tlh")," is the Type Library Header and ",(0,r.kt)("inlineCode",{parentName:"p"},"OPOSScanner.tli")," is the Type Library Interface. These files contain generated type information that bridges the COM object's interface with C++ language constructs."),(0,r.kt)("p",null,"While this makes the compiler aware of the COM object you're accessing, you'll likely find it helpful to make the Visual Studio IDE aware of of it as well; to do this you'll need to import the type library. Inside ",(0,r.kt)("inlineCode",{parentName:"p"},"OPOSScanner.tlh")," are a series of forward declared structs. The first struct reads: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'struct __declspec(uuid("<some-unique-identifier>"))\n/* LIBID */ __OposScanner_CCO;\n')),(0,r.kt)("p",null,"Adding ",(0,r.kt)("inlineCode",{parentName:"p"},'#import "libid:<some-unique-identifier>"')," to your project will inform the IDE of the COM interface and everything in the namespace OposScanner_CCO, but is not required for compilation. "),(0,r.kt)("p",null,"Now your application should look similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// This import statement causes generation of OPOSScanner.tlh and OPOSScanner.tli\n#import "progid:OPOS.Scanner"\n\n// This import statement informs the IDE of the COM interface and everything in the\n// namespace OposScanner_CCO, but is not required for compilation.\n#import "libid:ccb90180-b81e-11d2-ab74-0040054c3719"\n\nint main()\n{\n    return 0;\n}\n')),(0,r.kt)("h2",{id:"creating-the-opos-scanner-interface"},"Creating the OPOS scanner interface"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CoInitializeEx()")," must be called near the start of program to load and initialize the COM library and ",(0,r.kt)("inlineCode",{parentName:"p"},"CoUninitialize()")," must be called near the end of the program to unload the COM library."),(0,r.kt)("p",null,"The scanner is implemented using the smart pointer ",(0,r.kt)("inlineCode",{parentName:"p"},"IOPOSScannerPtr")," defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"OPOSScanner.tlh")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"_COM_SMARTPTR_TYPEDEF(IOPOSScanner, __uuidof(IOPOSScanner))"),", based on the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/cpp/cpp/com-ptr-t-class"},"_com_ptr_t class"),"."),(0,r.kt)("p",null,"An instance of the scanner is created by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"_com_ptr_t::CreateInstance(const char *progid)")," and is release by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"_com_ptr_t::Release()")," when no longer needed. Failure to release the object can cause problems with an actual POS system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// This import statement causes generation of OPOSScanner.tlh and OPOSScanner.tli\n#import "progid:OPOS.Scanner"\n\n// This import statement informs the IDE of the COM interface and everything in the\n// namespace OposScanner_CCO, but is not required for compilation.\n#import "libid:ccb90180-b81e-11d2-ab74-0040054c3719"\n\nint main()\n{\n    // Load and initialize the COM library.\n    CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);\n\n    // Create a COM object and point to it.\n    OposScanner_CCO::IOPOSScannerPtr scanner; \n    scanner.CreateInstance("OPOS.Scanner"); \n\n    //\n    // more to come .... \n    //\n\n    // Release the COM object\n    scanner.Release(); \n\n    // Unload the COM library.\n    CoUninitialize(); \n    return 0;\n}\n')),(0,r.kt)("h2",{id:"accessing-the-opos-scanner-interface"},"Accessing the OPOS Scanner interface"),(0,r.kt)("p",null,"At this point, you are ready to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"scanner")," object. "),(0,r.kt)("p",null,"The OPOS standard defines a general sequence to access a device:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"open"),": open a context to the device"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"claim"),": claim control over the device"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"enable"),": enable the device's operation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"disable"),": disable the device's  operation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"release"),": release control over the device"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"close"),": close the context to the device")),(0,r.kt)("p",null,"Opening a scanner context requires you to reference a ",(0,r.kt)("em",{parentName:"p"},"device profile")," (a device profile simply being a name representing a set of parameters relevant to the device). When OPOS is installed, scanner profiles are seen as the subkey names installed under the UPOS-specified registry key ",(0,r.kt)("inlineCode",{parentName:"p"},"HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\OLEforRetail\\ServiceOPOS\\SCANNER"),". It is your choice whether you want to programmatically obtain the profile names from the registry or to simply hard-code them in your application."),(0,r.kt)("p",null,"If the scanner context is successfully opened, you can then claim the device, gaining exclusive access to it. And if the device is successfully claimed, you can then enable it to perform subsequent operations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <string>\n\n// This import statement causes generation of OPOSScanner.tlh and OPOSScanner.tli\n#import "progid:OPOS.Scanner"\n\n// This import statement informs the IDE of the COM interface and everything in the\n// namespace OposScanner_CCO, but is not required for compilation.\n#import "libid:ccb90180-b81e-11d2-ab74-0040054c3719"\n\nint main()\n{\n    // Load and initialize the COM library.\n    CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);\n\n    // Create a COM object and point to it.\n    OposScanner_CCO::IOPOSScannerPtr scanner; \n    scanner.CreateInstance("OPOS.Scanner"); \n\n    // Open a context with the scanner (e.g. "USBScanner").\n    std::string profileName("<your selected profile>");\n    scanner->Open(profileName.c_str());\n\n    // Claim control of the scanner using a 1000 millisecond timeout.\n    scanner->ClaimDevice(1000L);\n    if (scanner->Claimed)\n    {\n        // Enable the device, label decoding and transmission of event data.\n        scanner->DeviceEnabled = true;        \n        scanner->DataEventEnabled = true;\n        scanner->DecodeData = true;\n\n        //\n        // more to come .... \n        //\n\n        // Disable, release and close the scanner.\n        scanner->DeviceEnabled = false;\n        scanner->ReleaseDevice();\n        scanner->Close();\n    }\n\n    // Release the COM object\n    scanner.Release(); \n\n    // Unload the COM library.\n    CoUninitialize(); \n    return 0;\n}\n')),(0,r.kt)("h2",{id:"creating-a-sink-for-the-scanner"},"Creating a sink for the scanner"),(0,r.kt)("p",null,"To make the application useful, we must create a scanner ",(0,r.kt)("em",{parentName:"p"},"sink")," (an object that receives input from the device)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Using the Visual Studio 2019 ",(0,r.kt)("strong",{parentName:"p"},"Solution Explorer"),", right mouse click ",(0,r.kt)("strong",{parentName:"p"},"Header Files")),(0,r.kt)(u,{src:"/img/opos/develop/cpp/scanner/addnewh_a.png",mdxType:"Img"})),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"And when the dialog appears add a header file named ScannerSink.h"),(0,r.kt)(u,{src:"/img/opos/develop/cpp/scanner/addnewh_b.png",mdxType:"Img"})),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Using the Visual Studio 2019 ",(0,r.kt)("strong",{parentName:"p"},"Solution Explorer"),", right mouse click ",(0,r.kt)("strong",{parentName:"p"},"Source Files")),(0,r.kt)(u,{src:"/img/opos/develop/cpp/scanner/addnew_a.png",mdxType:"Img"})),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"And when the dialog appears add a source file named ScannerSink.cpp"),(0,r.kt)(u,{src:"/img/opos/develop/cpp/scanner/addnew_b.png",mdxType:"Img"}))),(0,r.kt)("p",null,"The sink provides callback functions for use by the COM object. The callback functions provide implementations for the virtual methods of"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://msdn.microsoft.com/en-us/library/windows/desktop/ms221608(v=vs.85)"},"IDispatch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680509(v=vs.85)"},"IUnknown"))),(0,r.kt)("p",null,"and the ",(0,r.kt)("em",{parentName:"p"},"dispatch")," methods of"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"_IOPOSScannerEvents (defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"OPOSScanner.tli"),")")),(0,r.kt)("p",null,"You will also notice enum ScannerEvent whose values are used by the COM object to map events to the dispatch methods. These will be discussed later in ",(0,r.kt)("a",{parentName:"p",href:"#idispatch"},"Implementing IDispatch"),"."),(0,r.kt)("p",null,"The scanner sink is derived from OposScanner_CCO::_IOPOSScannerEvents as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// ScannerSink.h\n\n// This import statement causes generation of OPOSScanner.tlh and OPOSScanner.tli\n#import "progid:OPOS.Scanner"\n\n// This import statement informs the IDE of the COM interface and everything in the\n// namespace OposScanner_CCO, but is not required for compilation.\n#import "libid:ccb90180-b81e-11d2-ab74-0040054c3719"\n\nclass ScannerSink: public OposScanner_CCO::_IOPOSScannerEvents\n{\npublic:\n\n    ScannerSink(OposScanner_CCO::IOPOSScanner &scannerObject)\n      : scanner(scannerObject)\n      , ref(0)\n    {};\n\n    // IUnknown methods \n    IFACEMETHODIMP QueryInterface(REFIID riid, void **ppv);\n    IFACEMETHODIMP_(ULONG) AddRef();\n    IFACEMETHODIMP_(ULONG) Release();\n\n    // IDispatch methods\n    IFACEMETHODIMP GetTypeInfoCount(UINT *pctinfo);\n    IFACEMETHODIMP GetTypeInfo(UINT itinfo, \n        LCID lcid, ITypeInfo **iti);\n    IFACEMETHODIMP GetIDsOfNames(REFIID riid, LPOLESTR *names, \n        UINT size, LCID lcid,DISPID *rgDispId);\n    IFACEMETHODIMP Invoke(DISPID dispid, REFIID riid, LCID lcid, \n        WORD flags,DISPPARAMS *dispparams, VARIANT *result,\n        EXCEPINFO *exceptioninfo, UINT *argerr);\n\n    // _IOPOSScannerEvents methods\n    HRESULT DataEvent(long Status);\n    HRESULT DirectIOEvent(\n        long EventNumber,\n        long *Data,\n        BSTR *String);\n    HRESULT ErrorEvent(\n        long ResultCode,\n        long ResultCodeExtended,\n        long ErrorLocus,\n        long *ErrorResponse);\n    HRESULT StatusUpdateEvent(\n        long Data);\n\n    enum ScannerEvent: DISPID\n    {\n        Unused   = 0,\n        Data     = 1,\n        DirectIO = 2,\n        Error    = 3,\n        Reserved = 4,\n        StatusUpdate = 5,\n        Count    = 6\n    };\n\nprivate:\n\n    LONG ref;\n    OposScanner_CCO::IOPOSScanner &scanner;\n};\n')),(0,r.kt)("h4",{id:"implementing-iunknown"},"Implementing IUnknown"),(0,r.kt)("p",null,"IUnknown is inherited by every COM interface. IUnknown has three virtual\nmethods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AddRef()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"QueryInterface()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Release()"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AddRef()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Release()")," are used for reference counting and ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryInterface()")," retrieves the supported interfaces of an object. The implementation of IUnknown is often as straight-forward as seen in this tutorial, which is loosely based off of the MSDN article ",(0,r.kt)("a",{parentName:"p",href:"https://msdn.microsoft.com/en-us/library/office/cc839627.aspx"},"Implementing IUnknown in C++"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// ScannerSink.cpp\n#include "ScannerSink.h"\n\nIFACEMETHODIMP ScannerSink::QueryInterface(REFIID riid, void **ppv)\n{\n    *ppv = nullptr;\n    IID id = __uuidof(OposScanner_CCO::_IOPOSScannerEvents);\n    HRESULT hr = E_NOINTERFACE;\n    if (riid == IID_IUnknown || riid == IID_IDispatch || riid == id) {\n        *ppv = static_cast<OposScanner_CCO::_IOPOSScannerEvents *>(this);\n        AddRef();\n        hr = S_OK;\n    }\n    return hr;\n}\n\nIFACEMETHODIMP_(ULONG) ScannerSink::AddRef()\n{\n    return ++ref;\n}\n\nIFACEMETHODIMP_(ULONG) ScannerSink::Release()\n{\n    if (--ref == 0)\n        delete this;\n    return ref;\n}\n')),(0,r.kt)("h4",{id:"implementing-idispatch"},"Implementing IDispatch",(0,r.kt)("a",{name:"idispatch"})),(0,r.kt)("p",null,"IDispatch has four virtual methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Invoke()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetIDsOfNames()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetTypeInfo()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetTypeInfoCount()"))),(0,r.kt)("p",null,"The COM object calls ",(0,r.kt)("inlineCode",{parentName:"p"},"GetIDsOfNames()")," to obtain the dispatch id (",(0,r.kt)("inlineCode",{parentName:"p"},"DISPID"),") of a single class property or method. The dispatch id is then used by the COM object during subsequent calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"Invoke()"),". "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Invoke()")," allows the COM object to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"_IOPOSScannerEvents")," methods of the sink class. The ",(0,r.kt)("inlineCode",{parentName:"p"},"DISPID")," parameter identifies the method to call and ",(0,r.kt)("inlineCode",{parentName:"p"},"DISPPARAMS")," contains the values to be passed to the function. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GetTypeInfo()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"GetTypeInfoCount()")," are used to retrieve type information, but provide no value in our case."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// ScannerSink.cpp\nIFACEMETHODIMP ScannerSink::GetTypeInfoCount(UINT *pctinfo) \n{\n    *pctinfo = 0;\n    return E_NOTIMPL;\n}\n\nIFACEMETHODIMP ScannerSink::GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo **iti)\n{\n    *iti = nullptr;\n    return E_NOTIMPL;\n}\n\nIFACEMETHODIMP ScannerSink::GetIDsOfNames(REFIID riid, LPOLESTR *names,\n    UINT size, LCID lcid, DISPID *dispids)\n{\n    if (wcscmp(names[0], L"StatusUpdateEvent") == 0)\n        dispids[0] = ScannerEvent::StatusUpdate;\n    else if (wcscmp(names[0], L"DirectIOEvent") == 0)\n        dispids[0] = ScannerEvent::DirectIO;\n    else if (wcscmp(names[0], L"ErrorEvent") == 0)\n        dispids[0] = ScannerEvent::Error;\n    else if (wcscmp(names[0], L"DataEvent") == 0)\n        dispids[0] = ScannerEvent::Data;\n    else\n        dispids[0] = -1;\n\n    return ((dispids[0] == -1) ? E_NOTIMPL : S_OK);\n}\n\nIFACEMETHODIMP ScannerSink::Invoke(DISPID dispid, REFIID riid, LCID lcid,\n    WORD flags, DISPPARAMS *dispparams, VARIANT *result,\n    EXCEPINFO *exceptioninfo, UINT *argerr) \n{\n    if (ScannerEvent::Data == dispid)\n        return DataEvent(dispparams->rgvarg[0].lVal);\n    else\n        return S_OK;\n}\n')),(0,r.kt)("h4",{id:"implementing-event-functions"},"Implementing event functions"),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"IDispatch")," implemented the scanner sink will invoke its supported events. Per the UPOS specification, when the sink invokes a data event, subsequent data events are automatically suspended because ",(0,r.kt)("inlineCode",{parentName:"p"},"OPOSScanner.DataEventEnabled")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", resulting in queueing of subsequent data events. ",(0,r.kt)("inlineCode",{parentName:"p"},"DataEventEnabled")," must be reset to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to continue receiving more data events."),(0,r.kt)("p",null,"For the purpose of this tutorial, the scanned label data will simply be printed to the console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// ScannerSink.cpp\nHRESULT ScannerSink::DataEvent(long Status)\n{\n    std::cout << "Data: " << scanner.ScanDataLabel << std::endl;\n    scanner.DataEventEnabled = true;\n    return S_OK;\n}\n')),(0,r.kt)("h2",{id:"connecting-the-scanner-and-the-sink"},"Connecting the scanner and the sink"),(0,r.kt)("p",null,"Now we must inform the scanner of the sink. To do this query an ",(0,r.kt)("inlineCode",{parentName:"p"},"IConnectionPointContainer")," interface by calling\n",(0,r.kt)("inlineCode",{parentName:"p"},"QueryInterface()")," from the scanner. On the connection point container, get the interface of the ",(0,r.kt)("inlineCode",{parentName:"p"},"_IOPOSScannerEvents")," connection point by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"FindConnectionPoint()"),". Now a connection can be established between the scanner and the sink by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Advise()")," on the connection point."),(0,r.kt)("p",null,"The following code can be seen in context in the segment ",(0,r.kt)("a",{parentName:"p",href:"#together"},"Tying it all together"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"IConnectionPointContainer *cpc;\nscanner->QueryInterface(IID_IConnectionPointContainer, (void **) &cpc);\n\nIConnectionPoint *cp; \ncpc->FindConnectionPoint(__uuidof(OposScanner_CCO::_IOPOSScannerEvents), &cp);\ncpc->Release();\n\nScannerSink *sink = new ScannerSink(*scanner);  \nDWORD cookie;\ncp->Advise(sink, &cookie);\n")),(0,r.kt)("h2",{id:"tying-it-all-together"},"Tying it all together"),(0,r.kt)("p",null,"As any experienced developer knows, a huge part of writing code is defensive programming, guarding against potential errors. So be aware, for the sake of brevity, this tutorial has avoided addressing the myriad issues you may encounter."),(0,r.kt)("p",null,"That said, a more complete example can be found in the ",(0,r.kt)("a",{parentName:"p",href:"./datalogicoposexamples"},"Datalogic OPOS Examples"),"."),(0,r.kt)("p",null,"Refactoring a little, we can move shared #include and #import statements to a common location (ScannerSink.h in this tutorial)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'// ScannerSink.h\n#include <windows.h>\n#include <string>\n#include <iostream>\n\n// This import statement causes generation of OPOSScanner.tlh and OPOSScanner.tli\n#import "progid:OPOS.Scanner"\n\n// This import statement informs the IDE of the COM interface and everything in the\n// namespace OposScanner_CCO, but is not required for compilation.\n#import "libid:ccb90180-b81e-11d2-ab74-0040054c3719"\n')),(0,r.kt)("p",null,"Doing that simplifies the main file a little. Finally, we can add the code connecting the scanner to the sink.",(0,r.kt)("a",{name:"together"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "ScannerSink.h"\n#include <processthreadsapi.h>\n\nstatic DWORD threadID;\nstatic BOOL handler(DWORD event);\n\nint main()\n{\n    // Setup the console program to exit gracefully.\n    threadID = GetCurrentThreadId();\n    SetConsoleCtrlHandler((PHANDLER_ROUTINE)(handler), TRUE);\n\n    // Load and initialize the COM library.\n    CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);\n\n    // Create a COM object and point to it.\n    OposScanner_CCO::IOPOSScannerPtr scanner;\n    scanner.CreateInstance("OPOS.Scanner");\n\n    // Open a context with the scanner (e.g. "USBScanner").\n    std::string profileName("<your selected profile>");\n    scanner->Open(profileName.c_str());\n\n    // Claim control of the scanner using a 1000 millisecond timeout.\n    scanner->ClaimDevice(1000L);\n    if (scanner->Claimed)\n    {\n        // The scanner has been opened and claimed.\n\n        // Enable the device, label decoding and transmission of event data.\n        scanner->DeviceEnabled = true;\n        scanner->DataEventEnabled = true;\n        scanner->DecodeData = true;\n\n        // Determine whether scanner is connectable\n        IConnectionPointContainer* cpc;\n        bool isConnectable = (scanner->QueryInterface(IID_IConnectionPointContainer, (void**)&cpc) == S_OK);\n\n        if (isConnectable)\n        {\n            // Determine whether _IOPOSScannerEvents connection point is supported.\n            IConnectionPoint* cp;\n            bool haveConnectionPoint = (cpc->FindConnectionPoint(__uuidof(OposScanner_CCO::_IOPOSScannerEvents), &cp) == S_OK);\n            cpc->Release();\n\n            if (haveConnectionPoint)\n            {\n                ScannerSink* sink = new ScannerSink(*scanner);\n\n                // Connect cp with sink (subscribe to the sink).\n                // cookie is a token representing the connection,\n                // used later when deleting the connection.\n                DWORD cookie;\n                cp->Advise(sink, &cookie);\n\n                std::cout << "Press \\\'Ctrl + C\\\' to quit." << std::endl;\n\n                // The scanner message loop. Events will be handled by the methods of the sink.\n                static MSG msg = { 0 };\n                while (GetMessage(&msg, 0, 0, 0))\n                {\n                    TranslateMessage(&msg);\n                    DispatchMessage(&msg);\n                }\n\n                // Delete the connection (unsubscribe from the sink).\n                cp->Unadvise(cookie);\n                cp->Release();\n            }\n        }\n\n        // Disable, release and close the scanner.\n        scanner->DeviceEnabled = false;\n        scanner->ReleaseDevice();\n        scanner->Close();\n    }\n\n    // Release the COM object\n    scanner.Release();\n\n    // Unload libraries on this thread.\n    CoUninitialize();\n    return 0;\n}\n\nBOOL handler(DWORD event)\n{\n    PostThreadMessage(threadID, WM_QUIT, 0, 0);\n    return TRUE;\n}\n')))}h.isMDXComponent=!0}}]);