"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[7236],{3905:function(e,t,i){i.d(t,{Zo:function(){return m},kt:function(){return f}});var l=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,l)}return i}function n(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,l,r=function(e,t){if(null==e)return{};var i,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)i=a[l],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)i=a[l],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var o=l.createContext({}),c=function(e){var t=l.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):n(n({},t),e)),i},m=function(e){var t=c(e.components);return l.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(i),f=r,d=p["".concat(o,".").concat(f)]||p[f]||u[f]||a;return i?l.createElement(d,n(n({ref:t},m),{},{components:i})):l.createElement(d,n({ref:t},m))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,n=new Array(a);n[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,n[1]=s;for(var c=2;c<a;c++)n[c]=i[c];return l.createElement.apply(null,n)}return l.createElement.apply(null,i)}p.displayName="MDXCreateElement"},62494:function(e,t,i){i.r(t),i.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var l=i(87462),r=i(63366),a=(i(67294),i(3905)),n=["components"],s={title:"CE Device Sync API",sidebar_label:"API"},o=void 0,c={unversionedId:"cesync/api",id:"cesync/api",title:"CE Device Sync API",description:"static class USBLAN",source:"@site/docs/cesync/api.md",sourceDirName:"cesync",slug:"/cesync/api",permalink:"/cesync/api",tags:[],version:"current",frontMatter:{title:"CE Device Sync API",sidebar_label:"API"},sidebar:"CESyncSDK",previous:{title:"Overview",permalink:"/cesync/overview"},next:{title:"Sample Apps",permalink:"/cesync/samples"}},m={},u=[{value:"static class USBLAN",id:"static-class-usblan",level:2},{value:"Methods",id:"methods",level:3},{value:"static bool StartProcess(string exec, string params)",id:"static-bool-startprocessstring-exec-string-params",level:4},{value:"static IEnumerable&lt;SimpleFileInfo&gt; FindFiles(string directory, string mask)",id:"static-ienumerablesimplefileinfo-findfilesstring-directory-string-mask",level:4},{value:"static IEnumerable&lt;SimpleFileInfo&gt; FindDirectories(string directory, string mask)",id:"static-ienumerablesimplefileinfo-finddirectoriesstring-directory-string-mask",level:4},{value:"static bool CreateDirectory(string deviceDirName)",id:"static-bool-createdirectorystring-devicedirname",level:4},{value:"static bool PushFileToDevice(string localFilePath, string deviceFilePath, bool replaceExisting)",id:"static-bool-pushfiletodevicestring-localfilepath-string-devicefilepath-bool-replaceexisting",level:4},{value:"static bool PullFileFromDevice(string deviceFilePath, string localFilePath, bool replaceExisting)",id:"static-bool-pullfilefromdevicestring-devicefilepath-string-localfilepath-bool-replaceexisting",level:4},{value:"static bool SetFileDateTime(string deviceFilePath, DateTime lastWriteDateTime)",id:"static-bool-setfiledatetimestring-devicefilepath-datetime-lastwritedatetime",level:4},{value:"static bool DeleteFile(string deviceFilePath)",id:"static-bool-deletefilestring-devicefilepath",level:4},{value:"class SimpleFileInfo",id:"class-simplefileinfo",level:2},{value:"Members",id:"members",level:3},{value:"Constructors",id:"constructors",level:3},{value:"SimpleFileInfo(IO.FileInfo fi)",id:"simplefileinfoiofileinfo-fi",level:4},{value:"SimpleFileInfo(string fullName, long length, DateTime lastWriteTime)",id:"simplefileinfostring-fullname-long-length-datetime-lastwritetime",level:4}],p={toc:u};function f(e){var t=e.components,i=(0,r.Z)(e,n);return(0,a.kt)("wrapper",(0,l.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"static-class-usblan"},"static class USBLAN"),(0,a.kt)("h3",{id:"methods"},"Methods"),(0,a.kt)("h4",{id:"static-bool-startprocessstring-exec-string-params"},"static bool StartProcess(string exec, string params)"),(0,a.kt)("p",null,"Start a process on the device."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string exe"),": Path to the program to execute."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string parms"),": Parameters to send to exe. If using multiple parameters, separate with a space."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if process successfully started, or was already running. False otherwise.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-ienumerablesimplefileinfo-findfilesstring-directory-string-mask"},"static IEnumerable\\<SimpleFileInfo",">"," FindFiles(string directory, string mask)"),(0,a.kt)("p",null," Search a directory on the device for files whose names satisfy the mask."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string directory"),": Path to the directory on device to search inside."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string mask"),": Name or pattern to search."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": IEnumerable of the query results. Entries contain info on files. Null if an error occurred.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-ienumerablesimplefileinfo-finddirectoriesstring-directory-string-mask"},"static IEnumerable\\<SimpleFileInfo",">"," FindDirectories(string directory, string mask)"),(0,a.kt)("p",null," Search a directory on the device for directories whose names satisfy the mask."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string directory"),": Path to the directory on device to search inside."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string mask"),": Name or pattern to search."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": IEnumerable of the query results. Entries contain info on directories. Null if an error occurred.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-bool-createdirectorystring-devicedirname"},"static bool CreateDirectory(string deviceDirName)"),(0,a.kt)("p",null," Create a new directory on the device."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string deviceDirName"),": The path to the new directory on the device."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if directory did not already exist and was successfully created. False otherwise.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-bool-pushfiletodevicestring-localfilepath-string-devicefilepath-bool-replaceexisting"},"static bool PushFileToDevice(string localFilePath, string deviceFilePath, bool replaceExisting)"),(0,a.kt)("p",null," Copy a file from the host machine to the device."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string localFilePath"),": Source path on host."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string deviceFilePath"),": Destination path on device."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"bool replaceExisting"),": Should an existing file be overwritten?"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if file successfully copied to device, False otherwise.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-bool-pullfilefromdevicestring-devicefilepath-string-localfilepath-bool-replaceexisting"},"static bool PullFileFromDevice(string deviceFilePath, string localFilePath, bool replaceExisting)"),(0,a.kt)("p",null," Copy a file from the device to the host machine."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string deviceFilePath"),": Source path on device."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string localFilePath"),": Destination path on host."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"bool replaceExisting"),": Should an existing file be overwritten?"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if file successfully pulled from device and written to local file, False otherwise.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-bool-setfiledatetimestring-devicefilepath-datetime-lastwritedatetime"},"static bool SetFileDateTime(string deviceFilePath, DateTime lastWriteDateTime)"),(0,a.kt)("p",null," Set the last modified time of a file on the device."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string deviceFilePath"),": Path to file on device."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"DateTime lastWriteDateTime"),": The time the file will be set to."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if time on file is successfully set, False otherwise.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"static-bool-deletefilestring-devicefilepath"},"static bool DeleteFile(string deviceFilePath)"),(0,a.kt)("p",null," Delete a specified file from the device."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Parameters"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string deviceFilePath"),": Path to file on device."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if file found, file is not Read-only, and file successfully deleted from device. False otherwise.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"class-simplefileinfo"},"class SimpleFileInfo"),(0,a.kt)("h3",{id:"members"},"Members"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string Name"),": The name of the file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string DirectoryName"),": The path of the directory the file is in."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string Extension"),": The file extension."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string fullName"),": The full file path."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"DateTime LastWriteTime"),": The last time the file was modified."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"long Length"),": Length of the file.")),(0,a.kt)("h3",{id:"constructors"},"Constructors"),(0,a.kt)("h4",{id:"simplefileinfoiofileinfo-fi"},"SimpleFileInfo(IO.FileInfo fi)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"FileInfo fi"),": Make a new object representing this object.")),(0,a.kt)("h4",{id:"simplefileinfostring-fullname-long-length-datetime-lastwritetime"},"SimpleFileInfo(string fullName, long length, DateTime lastWriteTime)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"string fullName"),": Full file path."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"long length"),": Length of the file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"DateTime lastWriteTime"),": Last modified time.")))}f.isMDXComponent=!0}}]);