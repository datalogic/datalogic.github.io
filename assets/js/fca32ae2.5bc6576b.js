"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[10542],{39282:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(85893),i=t(11151),r=(t(74866),t(85162),t(10993));const o={id:"kbd-integration",title:"Keyboard Integration",sidebar_label:"Keyboard"},l=void 0,s={id:"aladdin/kbd-integration",title:"Keyboard Integration",description:"It is recommended that Native Interface Integration be used instead of Keyboard integration on devices that support it.",source:"@site/docs/aladdin/kbd-integration.mdx",sourceDirName:"aladdin",slug:"/aladdin/kbd-integration",permalink:"/aladdin/kbd-integration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"kbd-integration",title:"Keyboard Integration",sidebar_label:"Keyboard"},sidebar:"Aladdin",previous:{title:"Home Page",permalink:"/aladdin/home-page"},next:{title:"SDK",permalink:"/aladdin/sdk-integration"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Switching On-Screen Keyboards",id:"switching-on-screen-keyboards",level:3},{value:"Keyboard settings",id:"keyboard-settings",level:3},{value:"Keyboard barcode Settings",id:"keyboard-barcode-settings",level:3},{value:"Keyboard Mode",id:"keyboard-mode",level:3}];function u(e){const n={a:"a",admonition:"admonition",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["It is recommended that ",(0,a.jsx)(n.a,{href:"../aladdin/native-integration",children:"Native Interface Integration"})," be used instead of Keyboard integration on devices that support it."]})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["This section outlines the capabilities of the keyboard integration, which facilitates the entering of barcode data as though it had been typed on a keyboard.  To accomplish this, the Aladdin app replaces the on-screen keyboard (Gboard) with a its own.  This on-screen keyboard then works with the Aladdin app to output barcode data as keyboard input. This can be done on ",(0,a.jsx)(n.a,{href:"../aladdin/overview#aladdin-on-screen-keyboard-optional",children:"setup"}),' or manually by going to "Android Settings" > "Language & Inputs" > "On-Screen Keyboards" in the Settings app.']}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.p,{children:'To configure keyboard integration settings tap on the "Keyboard" button on the integration screen.'}),"\n",(0,a.jsx)(n.h3,{id:"switching-on-screen-keyboards",children:"Switching On-Screen Keyboards"}),"\n",(0,a.jsx)(n.p,{children:"The keyboard integration settings:"}),"\n",(0,a.jsxs)(r.QA,{columnGap:"50px",children:[(0,a.jsx)(r.f5,{img:"/img/aladdin/integration-keyboard-settings.png"}),(0,a.jsx)(r.f5,{img:"/img/aladdin/integration-keyboard-input-method.png"})]}),"\n",(0,a.jsx)(n.p,{children:"If you have not selected the Aladdin keyboard during the initial CODiScan onboarding, the application will display a hint at the top of the integration landing page as shown in the screenshot below."}),"\n",(0,a.jsx)(r.f5,{img:"/img/aladdin/integration-choose-keyboard.png"}),"\n",(0,a.jsx)(n.h3,{id:"keyboard-settings",children:"Keyboard settings"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Auto Paste"})," \u2013 Barcode data scanned by the CODiScan is automatically copied to the open application like the web browser, notes, etc."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clipboard"})," \u2013 Barcode data scanned by the CODiScan is copied to the clipboard, and can then be manually pasted to applications like the web browser, notes, etc."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"keyboard-barcode-settings",children:"Keyboard barcode Settings"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Append"})," \u2013  This function will append barcode data, one by one, as you keep scanning multiple barcodes in succession to the open application."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Substitution"})," \u2013 This function will replace previously scanned barcode data with the latest data as you keep scanning multiple barcodes in succession."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"keyboard-mode",children:"Keyboard Mode"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Numeric"})," \u2013 the Aladdin keyboard will display only numeric keypads."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Alpha Numeric"})," \u2013 the Aladdin keyboard will display a full-fledged keyboard."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Minimized Keyboard"})," \u2013 you can choose to display or minimize the keyboard with this toggle."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>o});t(67294);var a=t(36905);const i={tabItem:"tabItem_Ymn6"};var r=t(85893);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,o),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>j});var a=t(67294),i=t(36905),r=t(12466),o=t(16550),l=t(20469),s=t(91980),d=t(67392),c=t(50012);function u(e){var n,t;return null!=(n=null==(t=a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=null!=n?n:function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function b(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const i=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=h(e),[o,s]=(0,a.useState)((()=>function(e){var n;let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}const i=null!=(n=a.find((e=>e.default)))?n:a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[d,u]=p({queryString:t,groupId:i}),[g,m]=function(e){let{groupId:n}=e;const t=function(e){return e?"docusaurus.tab."+e:null}(n),[i,r]=(0,c.Nk)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),f=(()=>{const e=null!=d?d:g;return b({value:e,tabValues:r})?e:null})();(0,l.Z)((()=>{f&&s(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!b({value:e,tabValues:r}))throw new Error("Can't select invalid tab value="+e);s(e),u(e),m(e)}),[u,m,r]),tabValues:r}}var m=t(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(85893);function v(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.o5)(),c=e=>{const n=e.currentTarget,t=s.indexOf(n),i=l[t].value;i!==a&&(d(n),o(i))},u=e=>{var n;let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{var a;const n=s.indexOf(e.currentTarget)+1;t=null!=(a=s[n])?a:s[0];break}case"ArrowLeft":{var i;const n=s.indexOf(e.currentTarget)-1;t=null!=(i=s[n])?i:s[s.length-1];break}}null==(n=t)||n.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>s.push(e),onKeyDown:u,onClick:c,...r,className:(0,i.Z)("tabs__item",f.tabItem,null==r?void 0:r.className,{"tabs__item--active":a===n}),children:null!=t?t:n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function k(e){const n=g(e);return(0,y.jsxs)("div",{className:(0,i.Z)("tabs-container",f.tabList),children:[(0,y.jsx)(v,{...n,...e}),(0,y.jsx)(x,{...n,...e})]})}function j(e){const n=(0,m.Z)();return(0,y.jsx)(k,{...e,children:u(e.children)},String(n))}},10993:(e,n,t)=>{t.d(n,{QA:()=>l,TS:()=>i,f5:()=>r,sD:()=>s,xo:()=>o});t(67294);var a=t(85893);function i(e){let{img:n,maxWidth:t="fit-content",maxHeight:i="fit-content"}=e;return(0,a.jsx)("img",{src:n,style:{width:"auto",height:"auto",maxWidth:t,maxHeight:i}})}function r(e){let{img:n,height:t="550px"}=e;return(0,a.jsx)("img",{src:n,style:{maxHeight:t}})}function o(e){let{img:n,height:t="550px",caption:i}=e;return(0,a.jsxs)("div",{children:[(0,a.jsx)("img",{src:n,style:{maxHeight:t}}),(0,a.jsx)("center",{children:(0,a.jsx)("b",{children:i})})]})}function l(e){let{children:n,flexWrap:t="wrap",alignItems:i="center",rowGap:r="15px",columnGap:o="25px"}=e;return(0,a.jsx)("div",{style:{display:"flex",alignItems:i,flexWrap:t,rowGap:r,columnGap:o,marginBottom:"20px"},children:n})}function s(e){let{img:n}=e;return(0,a.jsx)("img",{src:n,style:{border:"2px solid black"}})}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var a=t(67294);const i={},r=a.createContext(i);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);