"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[1792],{3905:function(e,o,r){r.d(o,{Zo:function(){return c},kt:function(){return m}});var t=r(67294);function n(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function a(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?a(Object(r),!0).forEach((function(o){n(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function p(e,o){if(null==e)return{};var r,t,n=function(e,o){if(null==e)return{};var r,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||(n[r]=e[r]);return n}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=t.createContext({}),l=function(e){var o=t.useContext(i),r=o;return e&&(r="function"==typeof e?e(o):s(s({},o),e)),r},c=function(e){var o=l(e.components);return t.createElement(i.Provider,{value:o},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},g=t.forwardRef((function(e,o){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),g=n,m=u["".concat(i,".").concat(g)]||u[g]||f[g]||a;return r?t.createElement(m,s(s({ref:o},c),{},{components:r})):t.createElement(m,s({ref:o},c))}));function m(e,o){var r=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=g;var p={};for(var i in o)hasOwnProperty.call(o,i)&&(p[i]=o[i]);p.originalType=e,p[u]="string"==typeof e?e:n,s[1]=p;for(var l=2;l<a;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},34237:function(e,o,r){r.r(o),r.d(o,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return u}});var t=r(87462),n=r(63366),a=(r(67294),r(3905)),s=["components"],p={id:"jposproperties",title:"JPOS Configuration Reference",sidebar_label:"jpos.properties"},i=void 0,l={unversionedId:"javapos/configref/jposproperties",id:"javapos/configref/jposproperties",title:"JPOS Configuration Reference",description:"Overview",source:"@site/docs/javapos/configref/jposproperties.md",sourceDirName:"javapos/configref",slug:"/javapos/configref/jposproperties",permalink:"/javapos/configref/jposproperties",draft:!1,tags:[],version:"current",frontMatter:{id:"jposproperties",title:"JPOS Configuration Reference",sidebar_label:"jpos.properties"},sidebar:"JavaPOS",previous:{title:"javax.usb.properties",permalink:"/javapos/configref/javaxusbproperties"},next:{title:"log4j2.xml",permalink:"/javapos/configref/log4j2xml"}},c={},u=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"jpos.loader.serviceManagerClass",id:"jposloaderservicemanagerclass",level:3},{value:"jpos.config.regPopulatorClass",id:"jposconfigregpopulatorclass",level:3},{value:"jpos.config.simple.SimpleRegPopulator",id:"jposconfigsimplesimpleregpopulator",level:4},{value:"jpos.config.simple.xml.XercesRegPopulator",id:"jposconfigsimplexmlxercesregpopulator",level:4},{value:"jpos.config.simple.xml.Xerces2RegPopulator",id:"jposconfigsimplexmlxerces2regpopulator",level:4},{value:"jpos.config.populatorFile",id:"jposconfigpopulatorfile",level:3},{value:"jpos.tracing",id:"jpostracing",level:3},{value:"Default configuration file",id:"default-configuration-file",level:2}],f={toc:u},g="wrapper";function m(e){var o=e.components,r=(0,n.Z)(e,s);return(0,a.kt)(g,(0,t.Z)({},f,r,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The OMG JavaPOS Reference uses the jpos.properties file to configure the JPOS device registry. This document covers the configuration file and the settings used by Datalogic JavaPOS. ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Care must be taken changing any values in this file."))),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("h3",{id:"jposloaderservicemanagerclass"},"jpos.loader.serviceManagerClass"),(0,a.kt)("p",null,'This property specifies the manager bootstrap class for the whole JCL.  Use this property to replace the default "simple" JCL implementation with your own.  The value must be a fully qualified class name that implements the interface jpos.loader.JposServiceManager'),(0,a.kt)("h3",{id:"jposconfigregpopulatorclass"},"jpos.config.regPopulatorClass"),(0,a.kt)("p",null,"This property specifies the registry populator class that populates the entry registry.  It must be a fully qualified class name that implements the jpos.config.JposRegPopulator interface.  If you want to specify multiple populators then you should instead use the jpos.config.populator.class.",(0,a.kt)("em",{parentName:"p"},"N")," property, defined below, that allows you to specify many populators"),(0,a.kt)("p",null,"There are 3 populators that are provided with the JCL by default:"),(0,a.kt)("h4",{id:"jposconfigsimplesimpleregpopulator"},"jpos.config.simple.SimpleRegPopulator"),(0,a.kt)("p",null,"This populator loads/saves JposEntry objects as serialized objects in a Java serialized file, typically named: jpos.cfg"),(0,a.kt)("h4",{id:"jposconfigsimplexmlxercesregpopulator"},"jpos.config.simple.xml.XercesRegPopulator"),(0,a.kt)("p",null,"This populator uses Xerces and implements an XML parser according to the jpos/res/jcl.dtd.  By default, the XML file must be named jpos.xml However, this named can be changed using the property (see below): jpos.config.populator.file.",(0,a.kt)("em",{parentName:"p"},"N")),(0,a.kt)("h4",{id:"jposconfigsimplexmlxerces2regpopulator"},"jpos.config.simple.xml.Xerces2RegPopulator"),(0,a.kt)("p",null,"This populator uses Xerces2 and implements an XML parser according to the jpos/res/jcl.xsd XML schema.  The file name is same as above; however, since this parser expects an XML schema, the XML file header is different."),(0,a.kt)("p",null,"See the jpos-schema.xml file."),(0,a.kt)("p",null,"NOTE: Xerces and Xerces2 are XML parsers from the ",(0,a.kt)("a",{parentName:"p",href:"http://www.apache.org"},"http://www.apache.org")," Jakarta projects."),(0,a.kt)("h3",{id:"jposconfigpopulatorfile"},"jpos.config.populatorFile"),(0,a.kt)("p",null,"Use this property to for the JCL to load a specific file (cfg or XML) when not using multiple populators via the jpos.config.populator.class.",(0,a.kt)("em",{parentName:"p"},"N")," multi-property"),(0,a.kt)("h3",{id:"jpostracing"},"jpos.tracing"),(0,a.kt)("p",null,"The jpos.tracing property is a legacy property that turns on all JPOS tracing. Tracing in JPOS is performed by printing to STDOUT as described in the default configuration file."),(0,a.kt)("h2",{id:"default-configuration-file"},"Default configuration file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties"},'#------------------------------------------------------------------------------\n# JposTestCase.createPropFile() --\x3e ./jpos/res/jpos.properties file\n# Thu Jul 05 11:37:25 EDT 2001\n#------------------------------------------------------------------------------\n\n#------------------------------------------------------------------------------\n# Required properties\n# -------------------\n# 1) jpos.loader.serviceManagerClass\n#\n#    This property specifies the manager bootstrap class for the whole JCL.  Use\n#    this property to replace the default "simple" JCL implementation with your\n#    own.  The value must be a fully qualified class name that implements the\n#    interface jpos.loader.JposServiceManager\n#\n# 2) jpos.config.regPopulatorClass\n#\n#    This property specifies the registry populator class---that populates the\n#    entry registry.  It must be a fully qualified class name that implements\n#    the jpos.config.JposRegPopulator interface.  If you want to specify \n#    multiple populators then you should instead use the:\n#    jpos.config.populator.class.<n>\n#    property---defined below---that allows you to specify many populators\n#    There are 3 populators that are provided with the JCL by default:\n#    a) jpos.config.simple.SimpleRegPopulator\n#       This populator loads/saves JposEntry objects as serialized objects in\n#       a Java serialized file, typically named: jpos.cfg\n#    b) jpos.config.simple.xml.XercesRegPopulator \n#       This populator uses Xerces and implements an XML parser according to\n#       the jpos/res/jcl.dtd.  By default, the XML file must be named jpos.xml\n#       However, this named can be changed using the property (see below):\n#       jpos.config.populator.file.<n>\n#    c) jpos.config.simple.xml.Xerces2RegPopulator\n#       This populator uses Xerces2 and implements an XML parser according to\n#       the jpos/res/jcl.xsd XML schema.  The file name is same as above; however,\n#       since this parser expects an XML schema, the XML file header is different.\n#       See the jpos-schema.xml file.\n# \n# NOTE: Xerces and Xerces2 are XML parsers from the http://www.apache.org \n#       Jakarta projects.\n#------------------------------------------------------------------------------\n\njpos.loader.serviceManagerClass=jpos.loader.simple.SimpleServiceManager\n\n#jpos.config.regPopulatorClass=jpos.config.simple.SimpleRegPopulator\n#jpos.config.regPopulatorClass=jpos.config.simple.xml.SimpleXmlRegPopulator\njpos.config.regPopulatorClass=jpos.config.simple.xml.XercesRegPopulator\n\n#------------------------------------------------------------------------------\n# Use this property to for the JCL to load a specific file (cfg or XML)\n# when not using multiple populators via the jpos.config.populator.class.<n>\n# multi-property\n#------------------------------------------------------------------------------\n\n#jpos.config.populatorFile=jpos1.cfg\n\n#------------------------------------------------------------------------------\n# To define multiple populator then comment the property \n# "jpos.config.regPopulatorClass"\n# and use the following multiproperty properties (defines 2 populators one \n# XML and one serialized)\n#------------------------------------------------------------------------------\n\n#jpos.config.populator.class.0=jpos.config.simple.xml.SimpleXmlRegPopulator\n#jpos.config.populator.class.1=jpos.config.simple.SimpleRegPopulator\n\n#------------------------------------------------------------------------------\n# You can also define populator files for each populator as follows\n#------------------------------------------------------------------------------\n\n#jpos.config.populator.file.0=jpos0.xml\n#jpos.config.populator.file.1=jpos1.cfg\n\n#------------------------------------------------------------------------------\n# Tracing properties\n# ------------------\n# All tracing properties that are boolean attributes can be turned on of\n# off using ON/on/TRUE/true or OFF/false for any other value.\n# The available properties are (see commented properties below):\n# 1) jpos.tracing\n# This is a legacy property and will turn the global tracer on.  You should\n# note that it is preferable to use the named tracing property instead\n# 2) jpos.util.tracing.TurnOnAllNamedTracers\n# This property when turned on will enable all named tracers.  A named tracer\n# will print out a message prepended by [<name>] where <name> is the name of\n# the tracer in question.\n# 3) jpos.util.tracing.TurnOnNamedTracers = name1, name2, ...\n# This will turn on the named tracers listed as name1, name2, ... this is \n# useful if when all named tracers are on you want to filter the output\n#------------------------------------------------------------------------------\n\n#jpos.tracing=ON\n#jpos.util.tracing.TurnOnNamedTracers=XercesRegPopulator, AbstractRegPopulator, MainFrame\n#jpos.util.tracing.TurnOnNamedTracers=JposServiceLoader,SimpleEntryRegistry,SimpleRegPopulator,XercesRegPopulator \n#jpos.util.tracing.TurnOnAllNamedTracers=OFF\n')))}m.isMDXComponent=!0}}]);