"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[80265],{66554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var r=n(85893),s=n(11151);const i={id:"classes",title:"Classes",sidebar_label:"Classes"},c=void 0,a={id:"capturesdk/classes",title:"Classes",description:"The following classes are required for the SDK.",source:"@site/docs/capturesdk/classes.md",sourceDirName:"capturesdk",slug:"/capturesdk/classes",permalink:"/capturesdk/classes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"classes",title:"Classes",sidebar_label:"Classes"},sidebar:"CaptureSDK",previous:{title:"Interfaces",permalink:"/capturesdk/interfaces"},next:{title:"Enumerations",permalink:"/capturesdk/enums"}},d={},o=[{value:"DatalogicDeviceManager",id:"datalogicdevicemanager",level:2},{value:"DatalogicDevice",id:"datalogicdevice",level:2},{value:"DatalogicBluetoothDevice",id:"datalogicbluetoothdevice",level:2},{value:"UsbScanData",id:"usbscandata",level:2}];function l(e){const t={h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The following classes are required for the SDK."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Classes"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DatalogicDeviceManager"}),(0,r.jsx)(t.td,{children:"Manages the connected Datalogic Scanner."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DatalogicDevice"}),(0,r.jsx)(t.td,{children:"Stands for the Datalogic Scanner. It contains the Datalogic Scanner details and all the functions to interact with it."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DatalogicBluetoothDevice"}),(0,r.jsx)(t.td,{children:"Stands for the Datalogic Bluetooth Scanner. It contains the Datalogic Bluetooth Scanner details and all the functions to interact with it."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["UsbScanData(",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"val rawData: ByteArray,",(0,r.jsx)("br",{}),(0,r.jsx)("br",{})," val barcodeData: String,",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"val barcodeType: String ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),")",(0,r.jsx)("br",{}),(0,r.jsx)("br",{})]}),(0,r.jsx)(t.td,{children:"Data class passed by onScan to retrieve scanned data from the USB Scanner."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["ScaleData(",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"val status: String,",(0,r.jsx)("br",{}),(0,r.jsx)("br",{})," val weight: String,",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"val unit: ScaleUnit ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),")",(0,r.jsx)("br",{}),(0,r.jsx)("br",{})]}),(0,r.jsx)(t.td,{children:"Data class passed by onScale to retrieve scale data from the USB Scanner."})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"datalogicdevicemanager",children:"DatalogicDeviceManager"}),"\n",(0,r.jsx)(t.p,{children:"Management class for the Datalogic Scanner device. Used to detect USB Scanner Devices and register scanner events. USB permission is required to communicate with USB devices."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Public Methods"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ArrayList < DatalogicDevice >  detectDevice(context: Context)"}),(0,r.jsx)(t.td,{children:"Gets the connected devices list and prepares the DatalogicDevice based on the product Id. Returns the connected device list of ArrayList < DatalogicDevice >."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int registerUsbListener(listener: UsbListener)"}),(0,r.jsx)(t.td,{children:"Registers a listener for USB Events to notify when the USB Scanner connected or disconnected."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int unregisterUsbListener(listener: UsbListener)"}),(0,r.jsx)(t.td,{children:"Unregisters a listener for USB Events."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int registerStatusListener(listener: StatusListener)"}),(0,r.jsx)(t.td,{children:"Registers a listener for device Status Changes."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int unregisterStatusListener(listener: StatusListener)"}),(0,r.jsx)(t.td,{children:"Unregistered listeners for Status event."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Bitmap qrCodeGenerator(context: Context, bluetoothProfile: BluetoothProfile)"}),(0,r.jsx)(t.td,{children:"Generates the barcode image to pair  the Bluetooth device. Read this barcode with the scanner to pair it to the Android device via Bluetooth connection."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"scanBluetoothDevices(context: Activity, onComplete: (BluetoothPairingData) -> Unit)"}),(0,r.jsx)(t.td,{children:"Start scanning the Bluetooth scanner device (that has scanned the barcode from qrCodeGenerator) to pair it. The pair result is returned on BluetoothPairingData."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"stopScanBluetoothDevices(context: Context)"}),(0,r.jsx)(t.td,{children:"Reset the Bluetooth device scanning configuration. You can use it before executing scanBluetoothDevices to make sure that all the settings are set to default."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"getAllBluetoothDevice(context: Context, onComplete: (ArrayList < BluetoothDevice >) -> Unit)"}),(0,r.jsx)(t.td,{children:"Gets all the current Bluetooth devices. The Bluetooth devices are returned in (ArrayList< BluetoothDevice >). Note: it includes not only the Datalogic Scanner device but all the Bluetooth devices."})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"datalogicdevice",children:"DatalogicDevice"}),"\n",(0,r.jsx)(t.p,{children:"Stands for the Datalogic Scanner. It contains the Datalogic Scanner details and all the functions to interact with it."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Public Methods"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int openDevice(context: Context)"}),(0,r.jsx)(t.td,{children:"This method opens a connection to the specified DatalogicDevice, allowing for communication with the device\u2019s endpoints. Return 0 if the interface was successfully opened, -1 otherwise."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int closeDevice()"}),(0,r.jsx)(t.td,{children:"Close the DatalogicDevice."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int registerUsbScanListener(listener: UsbScanListener)"}),(0,r.jsx)(t.td,{children:"Register listener for USB scan event to be notified when the Scanner scans the barcodes."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int unregisterUsbScanListener(listener: UsbScanListener)"}),(0,r.jsx)(t.td,{children:"Unregister listeners for Scan event."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int registerUsbDioListener(listener: UsbDioListener)"}),(0,r.jsx)(t.td,{children:"Register listener for Usb dio event to be notified when the Dio Commands get failed."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Int unregisterUsbDioListener(listener: UsbDioListener)"}),(0,r.jsx)(t.td,{children:"Unregistered listeners for dio error event."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"String dioCommand (device: UsbDeviceDescriptor, commandType: DIOCmdValue,cmd: String, context: Context)"}),(0,r.jsx)(t.td,{children:"Function to execute the DIO Commands and return status value (Command type and valid command value should be correct for output)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"HashMap < ConfigurationFeature, String > readConfig(device: UsbDeviceDescriptor, context: Context)"}),(0,r.jsx)(t.td,{children:"Function to execute the read config Commands."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"HashMap < ConfigurationFeature, String > writeConfig(type: String, data: HashMap < ConfigurationFeature, String > )"}),(0,r.jsx)(t.td,{children:"Function to execute the write config Commands."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ByteArray imageCaptureAuto(currentBrightness, currentContrast)"}),(0,r.jsx)(t.td,{children:"Function to capture image. The parameter currentBrightness and currentContrast only is applied for HHS device."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Boolean startScale()"}),(0,r.jsx)(t.td,{children:"Start to receive scale data."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Boolean stopScale()"}),(0,r.jsx)(t.td,{children:"Stop to receive scale data."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Boolean isScaleAvailable()"}),(0,r.jsx)(t.td,{children:"Check if this device is a supported scale or not."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"String  getCustomConfiguration()"}),(0,r.jsx)(t.td,{children:"Gets all the current configurations on the device."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ConfigurationResult writeCustomConfiguration(configStr: String)"}),(0,r.jsx)(t.td,{children:"Write all the configurations in configStr into the device."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Boolean upgradeFirmware(file: File, fileType: String, context: Context, resetCallback: () -> Unit, progressCallback: (Int) -> Unit, isBulkTransfer: Boolean)"}),(0,r.jsxs)(t.td,{children:["Upgrade the device firmware. ",(0,r.jsx)("br",{}),"- file: Path to the firmware file on local folder ",(0,r.jsx)("br",{}),"- fileType:  can be \u201cDFW\u201d, \u201cSWU\u201d, \u201cS37\u201d",(0,r.jsx)("br",{}),"- isBulkTransfer: set to \u201ctrue\u201d to use Bulk Transfer protocol to speed up firmware upgrade. Only support \u201cS37\u201d on Magellan 9600i, 900i, 9550i."]})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"datalogicbluetoothdevice",children:"DatalogicBluetoothDevice"}),"\n",(0,r.jsx)(t.p,{children:"Stands for the Datalogic Bluetooth Scanner. It contains the Datalogic Bluetooth Scanner details and all the functions to interact with it."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Public Methods"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DatalogicBluetoothDevice(bluetoothDevice: BluetoothDevice, bluetoothProfile: BluetoothProfile, hostType: HostType)"}),(0,r.jsx)(t.td,{children:"Creates the Bluetooth SPP scanner:"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DatalogicBluetoothDevice(device, BluetoothProfile.SPP, HostType.Unconfigured)."}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"connectDevice(serialListener: UsbScanListener, context: Activity,  onComplete: (BluetoothPairingStatus) -> Unit)"}),(0,r.jsx)(t.td,{children:"Connects the Bluetooth scanner."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"clearConnection(context: Context)"}),(0,r.jsx)(t.td,{children:"Disconnects the Bluetooth scanner."})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"usbscandata",children:"UsbScanData"}),"\n",(0,r.jsx)(t.p,{children:"Data class containing the data of a scanned code. Can retrieve barcode data either as a String or an array if bytes."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Public Properties"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"byte[] rawData"}),(0,r.jsx)(t.td,{children:"Gets the barcode data as an array of bytes."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"String barcodeData"}),(0,r.jsx)(t.td,{children:"Gets the barcode data as a String."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"String barcodeType"}),(0,r.jsx)(t.td,{children:"Gets the barcode ID as a String."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>c});var r=n(67294);const s={},i=r.createContext(s);function c(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);