"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[56102],{6097:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var r=i(85893),s=i(11151);const t={id:"device",title:"DeviceManager"},l=void 0,c={id:"aladdin/codiscan/device",title:"DeviceManager",description:"Summary",source:"@site/docs/aladdin/codiscan/device-manager.md",sourceDirName:"aladdin/codiscan",slug:"/aladdin/codiscan/device",permalink:"/aladdin/codiscan/device",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"device",title:"DeviceManager"},sidebar:"Aladdin",previous:{title:"CodiscanSDK",permalink:"/aladdin/codiscan/codiscan-sdk"},next:{title:"ConfigurationManager",permalink:"/aladdin/codiscan/configuration"}},a={},d=[{value:"Summary",id:"summary",level:2},{value:"Functions",id:"functions",level:3},{value:"Functions",id:"functions-1",level:2},{value:"triggerPairingObject",id:"triggerpairingobject",level:3},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"triggerDisconnect",id:"triggerdisconnect",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"triggerBatteryStatus",id:"triggerbatterystatus",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"triggerDeviceDetails",id:"triggerdevicedetails",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"findMyDevice",id:"findmydevice",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"registerConnectListener",id:"registerconnectlistener",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"removeConnectListener",id:"removeconnectlistener",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"registerDisconnectListener",id:"registerdisconnectlistener",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"removeDisconnectListener",id:"removedisconnectlistener",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"registerPairingCodeListener",id:"registerpairingcodelistener",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"removePairingCodeListener",id:"removepairingcodelistener",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"registerScanListener",id:"registerscanlistener",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-11",level:4},{value:"removeScanListener",id:"removescanlistener",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example",id:"example-12",level:4},{value:"registerBatteryStatusListener",id:"registerbatterystatuslistener",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-13",level:4},{value:"removeBatteryStatusListener",id:"removebatterystatuslistener",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example",id:"example-14",level:4},{value:"registerDeviceDetailsListener",id:"registerdevicedetailslistener",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example",id:"example-15",level:4},{value:"removeDeviceDetailsListener",id:"removedevicedetailslistener",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Example",id:"example-16",level:4}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Inner class of the CodiscanSDK class. Used to pair with a CODiScan device, request CODiScan device data, and trigger the findMe function."}),"\n",(0,r.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Function"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#triggerpairingobject",children:(0,r.jsx)(n.strong,{children:"triggerPairingObject"})})}),(0,r.jsxs)(n.td,{children:["Trigger the CODiScan service to send a pairing code to connect a CODiScan device by invoking any registered ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"}),"'s onPairingCode callback."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#triggerdisconnect",children:(0,r.jsx)(n.strong,{children:"triggerDisconnect"})})}),(0,r.jsxs)(n.td,{children:["Disconnect the connected CODiScan device. Will invoke any registered ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"}),"s."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#triggerbatterystatus",children:(0,r.jsx)(n.strong,{children:"triggerBatteryStatus"})})}),(0,r.jsxs)(n.td,{children:["Trigger the connected CODiScan device to send battery data by invoking any registered ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"}),"'s onBatteryStatus callback."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#triggerdevicedetails",children:(0,r.jsx)(n.strong,{children:"triggerDeviceDetails"})})}),(0,r.jsxs)(n.td,{children:["Trigger the connected CODiScan device to send device data by invoking any registered ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"}),"'s onDeviceDetails callback."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#findmydevice",children:(0,r.jsx)(n.strong,{children:"findMyDevice"})})}),(0,r.jsx)(n.td,{children:'Send the "Find My Device" command to the connected CODiScan. Causes the devices to flash and beep.'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registerconnectlistener",children:(0,r.jsx)(n.strong,{children:"registerConnectListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#connectlistener",children:"ConnectListener"})," to receive onConnect callbacks when a CODiScan device pairs with the mobile device."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removeconnectlistener",children:(0,r.jsx)(n.strong,{children:"removeConnectListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#connectlistener",children:"ConnectListener"})," to stop receiving onConnect callbacks."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registerdisconnectlistener",children:(0,r.jsx)(n.strong,{children:"registerDisconnectListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"})," to receive onDisconnect callbacks when a CODiScan device disconnects from the mobile device."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removedisconnectlistener",children:(0,r.jsx)(n.strong,{children:"removeDisconnectListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"})," to stop receiving onDisconnect callbacks."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registerpairingcodelistener",children:(0,r.jsx)(n.strong,{children:"registerPairingCodeListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"})," to receive onPairingCode callbacks when a new pairing code is sent from the CODiScan service."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removepairingcodelistener",children:(0,r.jsx)(n.strong,{children:"removePairingCodeListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"})," to stop receiving onPairingCode callbacks."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registerscanlistener",children:(0,r.jsx)(n.strong,{children:"registerScanListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#scanlistener",children:"ScanListener"})," to receive onScan callbacks when a barcode is scanned by the connected CODiScan device."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removescanlistener",children:(0,r.jsx)(n.strong,{children:"removeScanListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#scanlistener",children:"ScanListener"})," to stop receiving onScan callbacks."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registerbatterystatuslistener",children:(0,r.jsx)(n.strong,{children:"registerBatteryStatusListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"})," to receive onBatteryStatus callbacks when battery data is received from the connected CODiScan device. Triggered by calling triggerBatteryStatus."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removebatterystatuslistener",children:(0,r.jsx)(n.strong,{children:"removeBatteryStatusListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"})," to stop receiving onBatteryStatus callbacks."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#registerdevicedetailslistener",children:(0,r.jsx)(n.strong,{children:"registerDeviceDetailsListener"})})}),(0,r.jsxs)(n.td,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"})," to receive onDeviceDetails callbacks when device data is received from the connected CODiScan device. Triggered by calling triggerDeviceDetails."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#removedevicedetailslistener",children:(0,r.jsx)(n.strong,{children:"removeDeviceDetailsListener"})})}),(0,r.jsxs)(n.td,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"})," to stop receiving onDeviceDetails callbacks."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"functions-1",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"triggerpairingobject",children:"triggerPairingObject"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun triggerPairingObject(): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Trigger the CODiScan service to send a pairing code to connect a CODiScan device by invoking any registered ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"}),"'s onPairingCode callback."]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"5 -> Fail, already connected."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.triggerPairingObject() != 0) {\n    Log.i("MY_APP", "Failed to trigger pairing object for the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"triggerdisconnect",children:"triggerDisconnect"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun triggerDisconnect(): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Disconnect the connected CODiScan device. Will invoke any registered ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"}),"s."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"1 -> Fail, CODiScan device already disconnected."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.triggerPairingObject() != 0) {\n    Log.i("MY_APP", "Failed to disconnect from the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"triggerbatterystatus",children:"triggerBatteryStatus"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun triggerBatteryStatus(): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Trigger the connected CODiScan device to send battery data by invoking any registered ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"}),"'s onBatteryStatus callback."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"1 -> Fail, CODiScan device disconnected."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.triggerBatteryStatus() != 0) {\n    Log.i("MY_APP", "Failed to trigger battery status from the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"triggerdevicedetails",children:"triggerDeviceDetails"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun triggerDeviceDetails(): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Trigger the connected CODiScan device to send device data by invoking any registered ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"}),"'s onDeviceDetails callback."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"1 -> Fail, CODiScan device disconnected."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.triggerDeviceDetails() != 0) {\n    Log.i("MY_APP", "Failed to trigger device details from the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"findmydevice",children:"findMyDevice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun findMyDevice(): Int\n"})}),"\n",(0,r.jsx)(n.p,{children:'Send the "Find My Device" command to the connected CODiScan. Causes the devices to flash and beep.'}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"1 -> Fail, CODiScan device disconnected."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.findMyDevice() != 0) {\n    Log.i("MY_APP", "Failed to trigger the \\"Find My Device\\" command for the CODiScan!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registerconnectlistener",children:"registerConnectListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerConnectListener(listener: ConnectListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#connectlistener",children:"ConnectListener"})," to receive onConnect callbacks when a CODiScan device pairs with the mobile device."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"listener - the given GetConfigListener."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.registerConnectListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the connect listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removeconnectlistener",children:"removeConnectListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeConnectListener(listener: ConnectListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#connectlistener",children:"ConnectListener"})," to stop receiving onConnect callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#connectlistener",children:"ConnectListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.removeConnectListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the connect listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registerdisconnectlistener",children:"registerDisconnectListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerConnectListener(listener: DisconnectListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"})," to receive onDisconnect callbacks when a CODiScan device disconnects from the mobile device."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"listener - the given GetConfigListener."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.registerDisconnectListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the disconnect listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removedisconnectlistener",children:"removeDisconnectListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeDisconnectListener(listener: DisconnectListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"})," to stop receiving onDisconnect callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#disconnectlistener",children:"DisconnectListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.removeDisconnectListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the disconnect listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registerpairingcodelistener",children:"registerPairingCodeListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerPairingCodeListener(listener: PairingCodeListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"})," to receive onPairingCode callbacks when a new pairing code is sent from the CODiScan service."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.registerPairingCodeListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the pairing code listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removepairingcodelistener",children:"removePairingCodeListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removePairingCodeListener(listener: PairingCodeListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"})," to stop receiving onPairingCode callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#pairingcodelistener",children:"PairingCodeListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.removePairingCodeListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the pairing code listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registerscanlistener",children:"registerScanListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerScanListener(listener: ScanListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#scanlistener",children:"ScanListener"})," to receive onScan callbacks when a barcode is scanned by the connected CODiScan device."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#scanlistener",children:"ScanListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.registerScanListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the scan listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removescanlistener",children:"removeScanListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeScanListener(listener: ScanListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#scanlistener",children:"ScanListener"})," to stop receiving onScan callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#scanlistener",children:"ScanListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.removeScanListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the scan listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registerbatterystatuslistener",children:"registerBatteryStatusListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerBatteryStatusListener(listener: BatteryStatusListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"})," to stop receiving onBatteryStatus callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.registerBatteryStatusListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the battery status listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removebatterystatuslistener",children:"removeBatteryStatusListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeBatteryStatusListener(listener: BatteryStatusListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"})," to stop receiving onBatteryStatus callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#batterystatuslistener",children:"BatteryStatusListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-14",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.removeBatteryStatusListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the battery status listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registerdevicedetailslistener",children:"registerDeviceDetailsListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun registerDeviceDetailsListener(listener: DeviceDetailsListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register a given ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"})," to receive onDeviceDetails callbacks when device data is received from the connected CODiScan device. Triggered by calling triggerDeviceDetails."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"2 -> Fail, unable to register listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-15",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.registerDeviceDetailsListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with registering the device details listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"removedevicedetailslistener",children:"removeDeviceDetailsListener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun removeDeviceDetailsListener(listener: DeviceDetailsListener): Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove a given ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"})," to stop receiving onDeviceDetails callbacks."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["listener - the given ",(0,r.jsx)(n.a,{href:"./interfaces#devicedetailslistener",children:"DeviceDetailsListener"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"0 -> Success."}),"\n",(0,r.jsx)(n.li,{children:"3 -> Fail, unable to remove listener."}),"\n",(0,r.jsx)(n.li,{children:"6 -> Fail, CODiScan service unbound."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-16",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'if (codiscanSDK.deviceManager.removeDeviceDetailsListener(this) != 0) {\n    Log.i("MY_APP", "Something went wrong with de-registering the device details listener!")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>l});var r=i(67294);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);