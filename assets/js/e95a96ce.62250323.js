"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[9193],{13511:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var t=i(85893),a=i(11151);const r={title:"Datalogic Android SDK 1.35",author:"Datalogic Android SDK",author_image_url:"/img/homepage/home-android-sdk.png",author_url:"/android/overview",tags:["datalogic-android-sdk"]},o=void 0,d={permalink:"/releases/2024/02/20/datalogic-android-sdk-v1.35",source:"@site/blog/2024-02-20-datalogic-android-sdk-v1.35.md",title:"Datalogic Android SDK 1.35",description:"Datalogic Android SDK 1.35 is now available.",date:"2024-02-20T00:00:00.000Z",tags:[{label:"datalogic-android-sdk",permalink:"/releases/tags/datalogic-android-sdk"}],readingTime:1.33,hasTruncateMarker:!1,authors:[{name:"Datalogic Android SDK",url:"/android/overview",imageURL:"/img/homepage/home-android-sdk.png"}],frontMatter:{title:"Datalogic Android SDK 1.35",author:"Datalogic Android SDK",author_image_url:"/img/homepage/home-android-sdk.png",author_url:"/android/overview",tags:["datalogic-android-sdk"]},unlisted:!1,prevItem:{title:"OEMConfig 2.5.1",permalink:"/releases/2024/03/01/oemconfig"},nextItem:{title:"Aladdin for CODiScan 3.0.5",permalink:"/releases/2024/02/12/aladdin-v3.0.5"}},s={authorsImageUrls:[void 0]},l=[{value:"Enhancements",id:"enhancements",level:2}];function c(e){const n={a:"a",h2:"h2",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Datalogic Android SDK 1.35 is now available."}),"\n",(0,t.jsxs)(n.p,{children:["You can access the ",(0,t.jsx)(n.a,{href:"/android/overview",children:"documentation here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"enhancements",children:"Enhancements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Intents for configuring the Battery Manager App to log Battery properties"}),"\n",(0,t.jsx)(n.li,{children:"Intents for monitoring the Battery Swap events"}),"\n",(0,t.jsx)(n.li,{children:'"action" extra field definition for firmware update intent'}),"\n",(0,t.jsx)(n.li,{children:"Advanced Ethernet settings in Configuration Manager"}),"\n",(0,t.jsx)(n.li,{children:"Multiple Choices properties to Configuration Manager"}),"\n",(0,t.jsx)(n.li,{children:"Wi-Fi Bands and Touch Mode flags as Multiple Choices properties"}),"\n",(0,t.jsx)(n.li,{children:"Charging Sources as Multiple Choices property for supporting the configuration of several power sources, such as USB, Wireless Charging and Wired Cradle."}),"\n",(0,t.jsxs)(n.li,{children:["extended Wifi802Dot11Mode (WiFi 802.11ax modes M30/M35) for supporting:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"802.11abgn mode (Wi-Fi 4),"}),"\n",(0,t.jsx)(n.li,{children:"802.11abgnac mode (Wi-Fi 5),"}),"\n",(0,t.jsx)(n.li,{children:"and 802.11abgnax mode (Wi-Fi 6)."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"WIFI_BSSID_SCAN_STABLE_TIME (M11) property to Configuration Manager"}),"\n",(0,t.jsx)(n.li,{children:"extended WifiRoamingProfile for supporting LEGACY profile (M11)"}),"\n",(0,t.jsx)(n.li,{children:"extended ScannerEngineType for supporting XENON and ARGON (M30/M35)"}),"\n",(0,t.jsx)(n.li,{children:"extended LoggerBufferSize for supporting LOGGER_BUFFER_SIZE_8M (A13 do not support LOGGER_BUFFER_SIZE_16M)"}),"\n",(0,t.jsx)(n.li,{children:"extended DeviceType for supporting M11 and NEBULA_PDA"}),"\n",(0,t.jsxs)(n.li,{children:["extended keyboard remap feature adding the following classes:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"MappingObject: a generic representation of actions to be executed when certain key events occur"}),"\n",(0,t.jsx)(n.li,{children:"CompositionMapping: a complex MappingObject that represents a sequence of actions to be executed when certain key events occur"}),"\n",(0,t.jsx)(n.li,{children:"KeyActionMapping: a MappingObject represents a key action"}),"\n",(0,t.jsx)(n.li,{children:"StringMapping: a MappingObject represents a Unicode string"}),"\n",(0,t.jsx)(n.li,{children:"IntentMapping: a MappingObject represents an Android intent"}),"\n",(0,t.jsx)(n.li,{children:"DelayMapping: a MappingObject represents a simple delay action"}),"\n",(0,t.jsx)(n.li,{children:"MappingTriggerPolicy: a key event trigger policy"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"mapKey() API for mapping a key event to a customized action"}),"\n",(0,t.jsx)(n.li,{children:"renamed Battery Intents"}),"\n",(0,t.jsx)(n.li,{children:"improved documentation for Battery Charging Profile"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>o});var t=i(67294);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);