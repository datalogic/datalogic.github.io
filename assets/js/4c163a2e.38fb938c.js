"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[31884],{67292:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(85893),s=t(11151);const o={id:"event-yaml",title:"Magellan SDK",sidebar_label:"Event YAML"},r=void 0,i={id:"magellansdk/event-yaml",title:"Magellan SDK",description:"",source:"@site/docs/magellansdk/event-yaml.mdx",sourceDirName:"magellansdk",slug:"/magellansdk/event-yaml",permalink:"/magellansdk/event-yaml",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"event-yaml",title:"Magellan SDK",sidebar_label:"Event YAML"},sidebar:"MagellanSDK",previous:{title:"REST API",permalink:"/magellansdk/rest-api"},next:{title:"Rest YAML",permalink:"/magellansdk/rest-yaml"}},c={},p=[];function l(n){const e={code:"code",pre:"pre",...(0,s.a)(),...n.components};return(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'asyncapi: 2.6.0\ninfo:\n  title: Datalogic Fixed Retail Scanner - Event API\n  version: "1.0"\n  # description: "Real time events from 9600i/9900i Fixed Retail Scanners"\n  # language=markdown\n  description: |\n    # FOR INTERNAL REVIEW ONLY #\n\n    The Datalogic Fixed Retail Scanner Event API allows third party clients to:\n\n    - Receive updates on mode/state changes\n    - Receive notification on Scanner System Events:\n\n        - Label Reads\n        - Scale Steady Weight/Weight Change/Zero\n        - Scale Sentry Beam Block/Unblocked\n        - Object Seen/Leaving Field of View\n\n    This API should be used alongside the Magellan 9900i/9600i SDK REST API to:\n\n    - Retrieve captured images\n    - Start/stop video streaming\n    - Read information and statistics\n\n    For details of the REST API, see the `Magellan 9900i/9600i SDK REST API`.\n    The REST is available from the scanner at `https://datalogic-base-SERIAL_NUMBER.local`.\n  termsOfService: https://someurl.com/terms\n  contact:\n    name: Fixed Retail Scanner Software Support\n    email: some_address@datalogic.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n\nservers:\n  websockets_server:\n    url: datalogic-base-serialNumber.local:433\n    protocol: wss\n    protocolVersion: "13"\n    description: Private 9600i/9900i WebSocket Server\nchannels:\n  /:\n    # language=markdown\n    description: |\n      Channel for all Events\n\n      Note: All paths after the port number are ignored\n      \n      e.g. datalogic-base-serialNumber.local:433/ equivalent to datalogic-base-serialNumber.local:433/ws\n    subscribe:\n      description: Messages sent from Scanner\n      operationId: onScannerEvent\n      message:\n        oneOf:\n          - $ref: "#/components/messages/welcomeMsg"\n          - $ref: "#/components/messages/pongMsg"\n          - $ref: "#/components/messages/scannerModeStateMsg"\n          - $ref: "#/components/messages/scannerSystemLabelReadMsg"\n          - $ref: "#/components/messages/scannerSystemScaleMsg"\n          - $ref: "#/components/messages/scannerSystemScaleSentryMsg"\n          - $ref: "#/components/messages/scannerSystemObjectDetectMsg"\n    publish:\n      description: Messages sent to Scanner\n      operationId: sendMessageToScanner\n      message:\n        oneOf:\n          - $ref: "#/components/messages/pingMsg"\n\ncomponents:\n  messages:\n    welcomeMsg:\n      contentType: application/json\n      description: Welcome message sent to client on new connection\n      payload:\n        type: object\n        required:\n          - type\n          - data\n        properties:\n          type:\n            type: string\n            description: Type of message\n            enum:\n              - welcomeMsg\n          data:\n            type: object\n            required:\n              - eventId\n              - connectionId\n              - apiVersionStr\n              - applicationVersionStr\n              - serialNumber\n              - buildVersion\n            properties:\n              eventId:\n                $ref: "#/components/schemas/eventId"\n              connectionId:\n                $ref: "#/components/schemas/connectionId"\n              apiVersionStr:\n                $ref: "#/components/schemas/apiVersionStr"\n              applicationVersionStr:\n                $ref: "#/components/schemas/applicationVersionStr"\n              serialNumber:\n                $ref: "#/components/schemas/serialNumber"\n              buildVersion:\n                $ref: "#/components/schemas/buildVersion"\n        examples:\n          - type: welcomeMsg\n            data:\n              eventId: "0123450"\n              connectionId: "1278248556"\n              apiVersionStr: "1.0"\n              applicationVersionStr: "DR941630"\n              serialNumber: "G23HBCXKE"\n              buildVersion: "9698e41a5b"\n\n    pingMsg:\n      contentType: application/json\n      description: Application level ping by client, server will respond back with a pong message\n      payload:\n        $ref: "#/components/schemas/pingMsg"\n      x-response:\n        $ref: "#/components/messages/pongMsg"\n    pongMsg:\n      contentType: application/json\n      description: Server response to ping message\n      payload:\n        $ref: "#/components/schemas/pongMsg"\n    scannerModeStateMsg:\n      contentType: application/json\n      # language=markdown\n      description: Indicates the mode or state of the scanner has changed\n      payload:\n        type: object\n        required:\n          - type\n          - data\n        properties:\n          type:\n            type: string\n            description: Type of message\n            enum:\n              - scannerModeStateMsg\n          data:\n            type: object\n            required:\n              - eventId\n              - currentMode\n              - currentState\n            properties:\n              eventId:\n                $ref: "#/components/schemas/eventId"\n              currentMode:\n                type: string\n                # language=markdown\n                description: |\n                  The mode the scanner is currently operating in\n                  # sys_mode_t\n                enum:\n                  - PRE_OPERATING       # SYS_PREOPERATING_MODE\n                  - LIMITED_SCANNING    # SYS_LIMITED_SCANNING_MODE\n                  - ACTIVE              # SYS_ACTIVE_MODE\n                  - PROGRAMMING         # SYS_PROGRAMMING_MODE\n                  - FRU_ISOLATION       # SYS_FRU_ISOLATION_MODE\n                  - ERROR               # SYS_ERROR_MODE\n                  - DIAGNOSTICS         # SYS_DIAGNOSTICS_MODE\n                  - SCALE_DIAGNOSTICS   # SYS_SCALE_DIAG_MODE\n                  - SCALE_CALIBRATION   # SYS_SCALE_CALIBRATION_MODE\n                  - ORT                 # SYS_ORT_MODE\n                examples:\n                  - ACTIVE\n              currentState:\n                type: string\n                # language=markdown\n                description: |\n                  The corresponding state for \'currentMode\'\n                  # sys_state_t\n                enum:\n                  - IDLE                # SYS_IDLE_STATE\n                  - SCANNING_DISABLED   # SYS_SCANNING_DISABLED_STATE\n                  - SCANNING_ENABLED    # SYS_SCANNING_ENABLED_STATE\n                  - SLEEP               # SYS_SLEEP_STATE\n                  - SLUMBER             # SYS_SLUMBER_STATE\n                examples:\n                  - SCANNING_ENABLED\n        examples:\n          - type: scannerModeStateMsg\n            data:\n              eventId: "0123450"\n              currentMode: ACTIVE\n              currentState: SCANNING_ENABLED\n    scannerSystemLabelReadMsg:\n      # language=markdown\n      description: |\n        Indicates a label has been read\n\n        Note: The following labels won\'t be sent to clients:\n          - Any special purpose label read by the scanner\n          - Any scanner programming label\n          - Any label whose source is from an attached USB barcode reader\n          - Any special purpose label generated by the scanner\n      contentType: application/json\n      payload:\n        type: object\n        properties:\n          type:\n            type: string\n            description: Type of message\n            enum:\n              - scannerSystemLabelReadMsg\n          data:\n            type: object\n            required:\n              - eventId\n              - labelIdType\n              - labelSubType\n              - aimID\n              - labelSource\n              - labelData\n            properties:\n              eventId:\n                $ref: "#/components/schemas/eventId"\n              labelIdType:\n                type: string\n                # language=markdown\n                description: |\n                  The label type\n\n                  Note: `INVALID_LABEL_TYPE` indicates the type could not be determined\n                enum:\n                  - ABC_CODABAR\n                  - ANKER_PLESSEY\n                  - AZTEC\n                  - BC412\n                  - C128_ADDON\n                  - C128_PROGRAMMING_LABEL\n                  - CAPTURE_IMAGE_LABEL\n                  - CC_A\n                  - CC_B\n                  - CC_C\n                  - CODABAR\n                  - CODABLOCK_A\n                  - CODABLOCK_F\n                  - CODE11\n                  - CODE128\n                  - CODE16K\n                  - CODE32\n                  - CODE39\n                  - CODE39_CIP\n                  - CODE39_DANISH_PPT\n                  - CODE39_LAPOSTE\n                  - CODE39_PZN\n                  - CODE4\n                  - CODE49\n                  - CODE5\n                  - CODE93\n                  - COMPRESSED_2OF5\n                  - DATABAR_14\n                  - DATABAR_14_COMPOSITE\n                  - DATABAR_EXPANDED\n                  - DATABAR_EXPANDED_COMPOSITE\n                  - DATABAR_LIMITED\n                  - DATABAR_LIMITED_COMPOSITE\n                  - DATALOGIC_2OF5\n                  - DATAMATRIX\n                  - DATAMATRIX_PROGRAMMING_LABEL\n                  - DIGIMARC_NATIVE\n                  - DOTCODE\n                  - EAN128\n                  - EAN128_COMPOSITE\n                  - EAN13\n                  - EAN13_COMPOSITE\n                  - EAN13_P2\n                  - EAN13_P5\n                  - EAN13_P8\n                  - EAN8\n                  - EAN8_COMPOSITE\n                  - EAN8_P2\n                  - EAN8_P5\n                  - EAN8_P8\n                  - FNC3_C128_LABEL\n                  - FOLLETT_2OF5\n                  - GENERIC_DATA\n                  - GS1_DATAMATRIX\n                  - GS1_DIGITAL_LINK_LABEL_SET_ID\n                  - GS1_QR_CODE\n                  - GTIN\n                  - GTIN_P2\n                  - GTIN_P5\n                  - GTIN_P8\n                  - HAN_XIN_CODE\n                  - IATA_INDUSTRIAL_2OF5\n                  - INDUSTRIAL_2OF5\n                  - INTERLEAVED_2OF5\n                  - INTERLEAVED_2OF5_CIP_HR\n                  - ISBN\n                  - ISBT128\n                  - ISSN\n                  - LABELIMAGE\n                  - MATRIX_2OF5\n                  - MAXICODE\n                  - MICRO_PDF\n                  - MICROQR\n                  - MSI\n                  - NW7_CODABAR\n                  - OCR_A\n                  - OCR_B\n                  - OCR_MICR\n                  - PDF417\n                  - PHARMACODE_ONE_TRACK\n                  - PHARMACODE_TWO_TRACK\n                  - PLESSEY\n                  - POSTAL_AUSTRALIAN\n                  - POSTAL_IMB\n                  - POSTAL_JAPANESE\n                  - POSTAL_KIX\n                  - POSTAL_PLANET\n                  - POSTAL_PORTUGAL\n                  - POSTAL_ROYAL_MAIL\n                  - POSTAL_SWEDISH\n                  - POSTNET\n                  - QR_CODE\n                  - STANDARD_2OF5\n                  - TIMER_EXPIRED_EVENT\n                  - TLC39\n                  - TRIOPTIC\n                  - TWO_LABEL_PAIR\n                  - UPC2\n                  - UPC5\n                  - UPCA\n                  - UPCA_COMPOSITE\n                  - UPCA_P2\n                  - UPCA_P5\n                  - UPCA_P8\n                  - UPCE\n                  - UPCE_COMPOSITE\n                  - UPCE_P2\n                  - UPCE_P5\n                  - UPCE_P8\n                  - INVALID_LABEL_TYPE # Could not determine label type\n              labelSubType:\n                description: May contain addition data about the label type\n                type: string\n                examples:\n                  - ""\n              aimID:\n                # language=markdown\n                description: |\n                  The standard 3 character ISO/IEC label identifier.\n\n                  For possible values, see the ISO/IEC 15424 specification.\n\n                  Labels without a defined value are reported as `]X0`\n                type: string\n                minLength: 3\n                maxLength: 3\n                examples:\n                  - "]E0"\n                  - "]X0"\n              labelSource:\n                # language=markdown\n                description: |\n                  The source of the scanned label\n\n                  - `horizontal`: The horizontal plane (below the platter) on the base barcode scanner\n                  - `vertical`: The vertical plane (in the bonnet) on the base barcode scanner\n                  - `tdr`: The Top Down Reader (TDR)\n                  - `cfr`: The Customer Facing Reader (CFR) attached to the TDR\n                  - `stitched`: The label was a result of stitching multiple pieces together.\n                      - The pieces may have been from multiple source so the "true source" is unknown.\n                type: string\n                enum:\n                  - horizontal\n                  - vertical\n                  - tdr\n                  - cfr\n                  - stitched\n                examples:\n                  - horizontal\n              labelData:\n                type: string\n                # language=markdown\n                description: |\n                  The label data\n                examples:\n                  - "123456789012"\n        examples:\n          - type: scannerSystemLabelReadMsg\n            data:\n              eventId: "0123451"\n              labelIdType: "UPCA"\n              labelSubType: ""\n              aimID: "]E0"\n              labelSource: "horizontal"\n              labelData: "123456789012"\n    scannerSystemScaleMsg:\n      contentType: application/json\n      payload:\n        type: object\n        required:\n          - type\n          - data\n        properties:\n          type:\n            type: string\n            description: Type of message\n            enum:\n              - scannerSystemScaleMsg\n          data:\n            type: object\n            required:\n              - eventId\n              - scaleEventType\n              - scaleWeight\n              - scaleUnits\n            properties:\n              eventId:\n                $ref: "#/components/schemas/eventId"\n              scaleEventType:\n                type: string\n                # language=markdown\n                description: |\n                  The type of scale event. This is only sent when using the internal scale.\n\n                  - `STEADY_WEIGHT`: Scale is at a steady weight\n                  - `ZERO_WEIGHT`: Scale is at center of zero (0.00)\n                  - `STEADY_WEIGHT_CHANGED`: Weight is steady but has changed from the prior steady weight\n                    without going to steady zero before.\n                enum:\n                  - STEADY_WEIGHT           # SYS_EVENT_STEADY_WEIGHT\n                  - ZERO_WEIGHT             # SYS_EVENT_ZERO_WEIGHT\n                  - STEADY_WEIGHT_CHANGED   # SYS_EVENT_STEADY_WEIGHT_CHANGED\n                examples:\n                  - STEADY_WEIGHT\n              scaleWeight:\n                type: string\n                # language=markdown\n                description: |\n                  The weight on the scale.\n                examples:\n                  - "1.23"\n              scaleUnits:\n                type: string\n                # language=markdown\n                description: |\n                  `scaleWeight` units\n                enum:\n                  - lb\n                  - kg\n                examples:\n                  - lb\n        examples:\n          - type: scannerSystemScaleMsg\n            data:\n              eventId: "0123452"\n              scaleEventType: "STEADY_WEIGHT"\n              scaleWeight: "0.50"\n              scaleUnits: "lb"\n    scannerSystemScaleSentryMsg:\n      contentType: application/json\n      payload:\n        type: object\n        required:\n          - type\n          - data\n        properties:\n          type:\n            type: string\n            description: Type of message\n            enum:\n              - scannerSystemScaleSentryMsg\n          data:\n            type: object\n            required:\n              - eventId\n              - scaleSentryEventType\n            properties:\n              eventId:\n                $ref: "#/components/schemas/eventId"\n              scaleSentryEventType:\n                type: string\n                # language=markdown\n                description: |\n                  The type of Scale Sentry event\n                enum:\n                  - BEAM_BLOCKED    # SYS_EVENT_SCALE_SENTRY_BEAM_BLOCKED\n                  - BEAM_UNBLOCKED  # SYS_EVENT_SCALE_SENTRY_BEAM_UNBLOCKED\n                examples:\n                  - BEAM_BLOCKED\n        examples:\n          - type: scannerSystemScaleSentryMsg\n            data:\n              eventId: "0123453"\n              scaleSentryEventType: BEAM_BLOCKED\n    scannerSystemObjectDetectMsg:\n      contentType: application/json\n      payload:\n        type: object\n        required:\n          - type\n          - data\n        properties:\n          type:\n            type: string\n            description: Type of message\n            enum:\n              - scannerSystemObjectDetectMsg\n          data:\n            type: object\n            required:\n              - eventId\n              - objectDetectEventType\n            properties:\n              eventId:\n                $ref: "#/components/schemas/eventId"\n              objectDetectEventType:\n                type: string\n                # language=markdown\n                description: |\n                  The type of Object Sense event\n                enum:\n                  - OBJECT_SEEN       # SYS_EVENT_OBJECT_SEEN\n                  - OBJECT_NOT_SEEN   # SYS_EVENT_OBJECT_NOT_SEEN\n                examples:\n                  - OBJECT_SEEN\n        examples:\n          - type: scannerSystemObjectDetectMsg\n            data:\n              eventId: "0123454"\n              objectDetectEventType: OBJECT_SEEN\n  schemas:\n    reqId:\n      type: string\n      description: Request ID sent by the client and sent back by the server\n      examples:\n        - "123"\n    eventId:\n      type: string\n      description: Unique Id of the event\n      examples:\n        - "123450"\n    connectionId:\n      type: string\n      description: Connection ID to identify the session\n      examples:\n        - "1278248556"\n    apiVersionStr:\n      type: string\n      description: Version of the API\n      examples:\n        - "1.0"\n    applicationVersionStr:\n      type: string\n      description: Version of the Scanner application\n      minLength: 1\n      examples:\n        - "DR941630"\n    serialNumber:\n      type: string\n      # language=markdown\n      description: The serial number of the device\n      minLength: 1\n      maxLength: 32\n      examples:\n        - "G23HBCXKE"\n    buildVersion:\n      type: string\n      description: Software Build Version\n      examples:\n        - "9698e41a5b"\n    pingMsg:\n      type: object\n      required:\n        - type\n        - data\n      properties:\n        type:\n          type: string\n          description: Type of message\n          enum:\n            - pingMsg\n        data:\n          type: object\n          required:\n            - reqId\n          properties:\n            reqId:\n              $ref: "#/components/schemas/reqId"\n      examples:\n        - type: pingMsg\n          data:\n            reqId: "123"\n    pongMsg:\n      type: object\n      required:\n        - type\n        - data\n      properties:\n        type:\n          type: string\n          description: Type of message\n          enum:\n            - pongMsg\n        data:\n          type: object\n          required:\n            - reqId\n            - connectionId\n            - apiVersionStr\n            - applicationVersionStr\n            - serialNumber\n            - buildVersion\n          properties:\n            reqId:\n              $ref: "#/components/schemas/reqId"\n            connectionId:\n              $ref: "#/components/schemas/connectionId"\n            apiVersionStr:\n              $ref: "#/components/schemas/apiVersionStr"\n            applicationVersionStr:\n              $ref: "#/components/schemas/applicationVersionStr"\n            serialNumber:\n              $ref: "#/components/schemas/serialNumber"\n            buildVersion:\n              $ref: "#/components/schemas/buildVersion"\n      examples:\n        - type: pongMsg\n          data:\n            reqId: "123"\n            connectionId: "1278248556"\n            apiVersionStr: "1.0"\n            applicationVersionStr: "DR941630"\n            serialNumber: "G23HBCXKE"\n            buildVersion: "9698e41a5b"\n'})})}function d(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>r});var a=t(67294);const s={},o=a.createContext(s);function r(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);