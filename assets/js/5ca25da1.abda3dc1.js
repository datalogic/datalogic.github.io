"use strict";(self.webpackChunkdatalogic_github_io=self.webpackChunkdatalogic_github_io||[]).push([[7074],{3905:function(e,n,a){a.d(n,{Zo:function(){return d},kt:function(){return u}});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return a?t.createElement(h,l(l({ref:n},d),{},{components:a})):t.createElement(h,l({ref:n},d))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=a[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},74596:function(e,n,a){a.r(n),a.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return c}});var t=a(87462),i=a(63366),o=(a(67294),a(3905)),l=["components"],r={id:"overview",title:"Scan2Deploy CE"},s=void 0,p={unversionedId:"scan2deploy-ce/overview",id:"scan2deploy-ce/overview",title:"Scan2Deploy CE",description:"Scan2Deploy is an application devoted to the initial staging of devices by reading a barcode sequence. Depending on the content of the staging barcodes Scan2Deploy will (in this order):",source:"@site/docs/scan2deploy-ce/overview.md",sourceDirName:"scan2deploy-ce",slug:"/scan2deploy-ce/overview",permalink:"/scan2deploy-ce/overview",tags:[],version:"current",frontMatter:{id:"overview",title:"Scan2Deploy CE"},sidebar:"Scan2DeployCE",next:{title:"Windows CE Schema",permalink:"/scan2deploy-ce/ce-schema"}},d={},c=[{value:"Creating Scan2Deploy files",id:"creating-scan2deploy-files",level:2},{value:"$schema",id:"schema",level:3},{value:"Choosing an editor",id:"choosing-an-editor",level:3},{value:"Barcode Generation using dl_config.exe",id:"barcode-generation-using-dl_configexe",level:2},{value:"Command Output",id:"command-output",level:3},{value:"Example",id:"example",level:4},{value:"Required parameters",id:"required-parameters",level:4},{value:"Options",id:"options",level:4},{value:"Examples",id:"examples",level:2},{value:"Example: EAP-FAST and applying a .dxu file",id:"example-eap-fast-and-applying-a-dxu-file",level:3},{value:"Example: WPA2-PSK and firmware update",id:"example-wpa2-psk-and-firmware-update",level:3},{value:"Example:  WEP, MS-DOS commands, and applying a .dxu file",id:"example--wep-ms-dos-commands-and-applying-a-dxu-file",level:3},{value:"Example: Download an executable file and run executable with a shell command",id:"example-download-an-executable-file-and-run-executable-with-a-shell-command",level:3}],m={toc:c};function u(e){var n=e.components,a=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Scan2Deploy")," is an application devoted to the initial staging of devices by reading a barcode sequence. Depending on the content of the staging barcodes ",(0,o.kt)("inlineCode",{parentName:"p"},"Scan2Deploy")," will (in this order):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"configure the device Wi-Fi network,"),(0,o.kt)("li",{parentName:"ul"},"download a data archive from a HTTP/HTTPS server and unpack it to the device,"),(0,o.kt)("li",{parentName:"ul"},"execute a series of shell commands")),(0,o.kt)("p",null,"It's worth noticing that the application is ",(0,o.kt)("em",{parentName:"p"},"not")," a resident service. The above-mentioned actions are performed as long as ",(0,o.kt)("inlineCode",{parentName:"p"},"Scan2Deploy")," is active and in use."),(0,o.kt)("h2",{id:"creating-scan2deploy-files"},"Creating Scan2Deploy files"),(0,o.kt)("p",null,"You will need to create your Scan2Deploy JSON files using a text editor. A JSON schema is available to help ensure valid file content. There are several advantages to using an editor that supports this schema:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Provides help text for each field"),(0,o.kt)("li",{parentName:"ul"},"Provides real-time compiler-like messages letting you know when you have made a mistake"),(0,o.kt)("li",{parentName:"ul"},"Allows you to write files faster and with fewer mistakes")),(0,o.kt)("h3",{id:"schema"},"$schema"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON schema")," file is used to define the structure and features available in Scan2Deploy. The ",(0,o.kt)("inlineCode",{parentName:"p"},"$schema")," tag is used to indicate which version of the schema you are using. You can get details regarding versions of the schema along with complete field documentation ",(0,o.kt)("a",{parentName:"p",href:"/scan2deploy-ce/ce-schema"},"here"),"."),(0,o.kt)("p",null,"The latest schema can be referenced like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "$schema": "https://raw.githubusercontent.com/datalogic/scan2deploy-ce-schema/master/schema.json"\n}\n')),(0,o.kt)("p",null,"You can also point to a specific version of the schema by pointing to the desired tag. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "$schema": "https://raw.githubusercontent.com/datalogic/scan2deploy-ce-schema/v1-0-0/schema.json"\n}\n')),(0,o.kt)("h3",{id:"choosing-an-editor"},"Choosing an editor"),(0,o.kt)("p",null,"There are several good JSON editors available. We recommend ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"Visual Studio Code"),". It is free and has ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/languages/json"},"many features designed to make writing JSON files easier"),", including utilizing JSON schemas."),(0,o.kt)("p",null,"By including the aforementioned ",(0,o.kt)("inlineCode",{parentName:"p"},"$schema")," tag in you JSON file, Visual Studio Code will provide automatic tool tips and error underlining:"),(0,o.kt)("p",null,"Some other editors know to use the schema files on schemastore.org when a given file uses a specific file extension that is registered on schemastore.org:  ",(0,o.kt)("inlineCode",{parentName:"p"},"file-name.dla.json")),(0,o.kt)("h2",{id:"barcode-generation-using-dl_configexe"},"Barcode Generation using dl_config.exe"),(0,o.kt)("p",null,"Scan2Deploy barcodes for Windows CE are generated with ",(0,o.kt)("inlineCode",{parentName:"p"},"dl_config.exe"),", a Windows application that runs at the ",(0,o.kt)("inlineCode",{parentName:"p"},"Command Prompt"),". Download the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/datalogic/dl_config/releases"},"latest version here"),"."),(0,o.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"dl_config.exe")," can trigger false positives in some anti-virus software packages, as dl_config.exe uses a popular PDF generation library that has unfortunately been utilized in some viruses as well. Since a portion of the file matches the signature of a virus, it is therefore falsely flagged by anti-virus software packages as potentially harmful.  We apologize for any confusion or concerns this may cause, but ",(0,o.kt)("strong",{parentName:"p"},"dl_config.exe")," is safe to use on any version of Windows and contains no viruses."))),(0,o.kt)("h3",{id:"command-output"},"Command Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ dl_config.exe\nDatalogic Staging Configurator (ver 1.7.1524)\nCopyright (c) 2016-2017 by Datalogic MCSA S.r.l.\n======================================================================\nUsage: dl_config.exe <input-file> <output-file> [options]\nOptions:\n  --outputfolder=<string>\n  --barcodetype=<1d|2d>\n  --barcode1dlimit=<integer>\n  --barcode2dlimit=<integer>\n  --legacymode=<boolean>\n  --version=<integer>\n  --enroll=<boolean>\n  --description=<string>\n  --encodeonly=<boolean>\n")),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("p",null,"The following command will create a PDF document with a ",(0,o.kt)("inlineCode",{parentName:"p"},"Scan2Deploy")," barcode, including a description of ",(0,o.kt)("inlineCode",{parentName:"p"},"Store 123 Wi-Fi and apps"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'dl_config.exe input.json output.pdf --description="Store 123 Wi-Fi and apps"\n')),(0,o.kt)("h4",{id:"required-parameters"},"Required parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"input-file")," is a JSON document, driving the application behavior"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"output-file")," is a PDF document that will be created based on the contents of the ",(0,o.kt)("inlineCode",{parentName:"li"},"input-file"),".")),(0,o.kt)("h4",{id:"options"},"Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"outputfolder"),": ",(0,o.kt)("strong",{parentName:"li"},"Deprecated")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"barcodetype"),": Controls the output barcode type to use, that is QRcode (",(0,o.kt)("inlineCode",{parentName:"li"},"2d"),") or CODE-128 (",(0,o.kt)("inlineCode",{parentName:"li"},"1d"),")- The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"2d"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"barcode1dlimit"),": Maximum data length for each generated 1D barcode. The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"50"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"barcode2dlimit"),": Maximum data length for each generated 2D barcode. The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"500"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"legacymode"),": ",(0,o.kt)("strong",{parentName:"li"},"Deprecated")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"version"),": Controls the data encoding version and should not be used unless necessary. The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"0")," for 1D barcodes, and ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," for 1D barcode."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"enroll"),": ",(0,o.kt)("strong",{parentName:"li"},"Android Only")," Boolean flag instructing DL-Config to generate Scan2Deploy Device Owner Enrollment QRcode in output file. The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"description"),": Free-form description field. Description will be displayed in header of output file. The default description is ",(0,o.kt)("inlineCode",{parentName:"li"},"none"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"encodeonly"),": ",(0,o.kt)("strong",{parentName:"li"},"*Android Only")," Boolean flag. If set to ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),', the encoded data generated by the tool will only be displayed on the command line for easy copy-paste. This data can be included in a start-activity intent to Scan2Deploy Android, effectively allowing you to "scan" without a barcode and programmatically apply a given configuration. The filename provided for ',(0,o.kt)("inlineCode",{parentName:"li"},"output-file")," will be ignored and a PDF file will not be created. You can therefore enter any value for ",(0,o.kt)("inlineCode",{parentName:"li"},"output-file")," (",(0,o.kt)("inlineCode",{parentName:"li"},"-")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"dummy")," are valid values for instance) The default value for ",(0,o.kt)("inlineCode",{parentName:"li"},"encodeonly")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"In order to describe the JSON input-file structure, the following example templates show how the available parameters are used:"),(0,o.kt)("h3",{id:"example-eap-fast-and-applying-a-dxu-file"},"Example: EAP-FAST and applying a .dxu file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "$schema": "https://raw.githubusercontent.com/datalogic/scan2deploy-ce-schema/master/schema.json",\n    "layout": {\n      "description": "This is for our WEC7 devices, configures EAP-FAST network and applies .dxu file"\n    },\n    "global": {\n        "target-path": "\\\\FlashDisk",\n        "action": "warm-boot",\n    "ping-timeout": 1000\n},\n"settings": {\n    "usb-function": "usblan"\n},\n"network": {\n    "profile": "my_fast",\n    "essid": "eapfast",\n    "mode": "wpa2-aes",\n    "eap-method": "fast",\n    "eap-username": "eapfast",\n    "eap-password": "1234567890",\n    "credentials-type": "password",\n    "credentials-source": "profile",\n    "validate-server": false,\n    "connect-to-server": false,\n    "connect-to-server-names": "",\n    "server-cert-name": "",\n    "outer-identity": "",\n    "fast-reconnect": false,\n    "inner-method": "eap-MsChapV2",\n    "auto-pac": true,\n    "pac-file-path": "",\n    "pac-aid-info": ""\n},\n"deployment": {\n    "scheme": "http",\n    "host": "10.1.20.123",\n    "port": 8080,\n    "path": "target.zip"\n},\n"shell": {\n    "cmds" : [\n        {\n            "app-name": "\\\\windows\\\\dldxu.exe",\n            "args": "\\\\FlashDisk\\\\target\\\\config.dxu"\n        }\n    ]\n}\n}\n')),(0,o.kt)("h3",{id:"example-wpa2-psk-and-firmware-update"},"Example: WPA2-PSK and firmware update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n"$schema": "https://raw.githubusercontent.com/datalogic/scan2deploy-ce-schema/master/schema.json",\n"layout": {\n    "description": "This is for our WEC7 devices, configures wpa2-psk network and performs firmware update"\n},\n"global": {\n    "target-path": "\\\\FlashDisk",\n    "action": "close",\n    "ping-timeout": 1000\n},\n"settings": {\n    "usb-function": "active-sync-usb"\n},\n"network": {\n    "profile": "my_psk",\n    "essid": "tsunami",\n    "mode": "wpa2-psk",\n    "mode-key": "1234567890",\n    "eap-method": "none"\n},\n"deployment": {\n    "scheme": "http",\n    "host": "10.1.20.123",\n    "port": 8080,\n    "path": "target.zip"\n},\n"shell": {\n    "cmds" : [\n        {\n            "app-name": "\\\\windows\\\\fupdate.exe",\n            "args": "\\\\FlashDisk\\\\target\\\\nk.img"\n        }\n    ]\n}\n}\n')),(0,o.kt)("h3",{id:"example--wep-ms-dos-commands-and-applying-a-dxu-file"},"Example:  WEP, MS-DOS commands, and applying a .dxu file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n"$schema": "https://raw.githubusercontent.com/datalogic/scan2deploy-ce-schema/master/schema.json",\n"layout": {\n    "description": "This is for our WEC7 devices, configures WEP network and applies .dxu file"\n},\n"global": {\n    "target-path": "\\\\",\n    "action": "warm-boot",\n    "ping-timeout": 1000\n},\n"settings": {\n    "usb-function": "usblan"\n},\n"network": {\n    "profile": "my_wep",\n    "essid": "tsunami",\n    "mode": "wep-104",\n    "mode-key": "1234567890123",\n    "index": 1,\n    "eap-method": "none"\n},\n"deployment": {\n    "scheme": "http",\n    "host": "10.1.20.123",\n    "port": 8080,\n    "path": "FlashDisk.zip",\n    "skip-inflation": false\n},\n"shell": {\n    "cmds" : [\n        {\n            "app-name": "\\\\windows\\\\cmd.exe",\n            "args": "/c copy \\\\FlashDisk\\\\config.dxu \\\\Temp"\n        },\n        {\n            "app-name": "\\\\windows\\\\dldxu.exe",\n            "args": "\\\\Temp\\\\config.dxu"\n        },\n        {\n            "app-name": "\\\\windows\\\\cmd.exe",\n            "args": "/c del \\\\Temp\\\\config.dxu"\n        }\n    ]\n}\n}\n')),(0,o.kt)("h3",{id:"example-download-an-executable-file-and-run-executable-with-a-shell-command"},"Example: Download an executable file and run executable with a shell command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "$schema": "https://raw.githubusercontent.com/datalogic/scan2deploy-ce-schema/master/schema.json",\n    "layout": {\n        "description": "download and run \'myapp.exe\' on CE device"\n    },\n    "global": {\n        "target-path": "\\\\FlashDisk",\n        "action": "close"\n    },\n    "network": {\n        "profile": "my_psk",\n        "essid": "tsunami",\n        "mode": "wpa2-psk",\n        "mode-key": "1234567890"\n    },\n    "deployment": {\n        "scheme": "http",\n        "host": "10.1.20.123",\n        "port": 8080,\n        "path": "apps/myapp.exe",\n        "skip-inflation": true\n    },\n    "shell": {\n        "cmds": [\n            {\n                "app-name": "\\\\FlashDisk\\\\myapp.exe"\n            }\n        ]\n    }\n}\n')))}u.isMDXComponent=!0}}]);