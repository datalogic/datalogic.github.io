(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{297:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=a,u=d["".concat(i,".").concat(b)]||d[b]||h[b]||o;return n?r.a.createElement(u,c(c({ref:t},s),{},{components:n})):r.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),o=(n(0),n(297)),i={id:"tutorial",title:"Label Reader Tutorial",sidebar_label:"Label Reader Tutorial"},c={unversionedId:"javapos/develop/tutorial",id:"javapos/develop/tutorial",isDocsHomePage:!1,title:"Label Reader Tutorial",description:"This section covers a basic Java Application tutorial. The tutorial will demonstrate how to create a basic label reader application using Java and the Datalogic JavaPOS API.",source:"@site/docs/javapos/develop/tutorial.md",slug:"/javapos/develop/tutorial",permalink:"/javapos/develop/tutorial",version:"current",sidebar_label:"Label Reader Tutorial",sidebar:"JavaPOS",previous:{title:"Application Integration",permalink:"/javapos/develop/appintegrate"},next:{title:"HelloDatalogicJavaPOS",permalink:"/javapos/develop/hellodatalogicjavapos"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Prerequisites",id:"prerequisites",children:[{value:"Support Libraries",id:"support-libraries",children:[]},{value:"Configuration Files",id:"configuration-files",children:[]}]},{value:"Application Development",id:"application-development",children:[{value:"The Tutorial Class",id:"the-tutorial-class",children:[]}]},{value:"Summary",id:"summary",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This section covers a basic Java Application tutorial. The tutorial will demonstrate how to create a basic label reader application using Java and the Datalogic JavaPOS API."),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"For this tutorial, we will be creating a simple console application in Java that opens, claims and enables a scanner device and provides a mechanism to see what labels were scanned with that device. This tutorial only covers a very basic aspect of development in JavaPOS, but should suffice as a starting point for any application that looks to read labels from a Datalogic scanning device."),Object(o.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.b)("p",null,"In order to develop an application for Datalogic Scanning devices, you will need to first have the supporting JAR libraries and configuration files needed for Datalogic JavaPOS present. "),Object(o.b)("h3",{id:"support-libraries"},"Support Libraries"),Object(o.b)("p",null,"The easiest way to integrate JavaPOS into your application is to copy the entire SupportJars folder from the installed JavaPOS location to your project. This will add a SupportJars folder to your project and will contain all of the support libraries needed for JavaPOS. You will also need to copy the JavaPOS.jar file to your project. This file can be copied to the SupportJars folder if you wish, or can be copied to your application's directory."),Object(o.b)("h3",{id:"configuration-files"},"Configuration Files"),Object(o.b)("p",null,"In order for JavaPOS to operate correctly, you will need the configuration files that are installed with JavaPOS copied into your application's directory."),Object(o.b)("h2",{id:"application-development"},"Application Development"),Object(o.b)("h3",{id:"the-tutorial-class"},"The Tutorial Class"),Object(o.b)("p",null,"In order to respond to JPOS events, your class will need to implement the jpos.events.DataListener interface in your class. This interface is part of the OMG JPOS 1.14 library (jpos114.jar). In order to implement the listener, you will also need to import the jpos.events.DataEvent class. Add the following imports to your class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"import jpos.events.DataEvent;\nimport jpos.events.DataListener;\n")),Object(o.b)("p",null,"Now create your Tutorial class which implements the DataListener interface as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public class Tutorial implements DataListener {\n    public void dataOccurred(DataEvent de) {\n    }\n}\n")),Object(o.b)("p",null,"Note that each time data is received from the Scanner device, the dataOccurred method will be called. This method is where we will put our label processing."),Object(o.b)("h4",{id:"the-scanner-implementation"},"The Scanner implementation"),Object(o.b)("p",null,"In order to program for a UPOS Scanner device, we will need to import the jpos.Scanner class. This class is the UPOS Scanner device implementation."),Object(o.b)("p",null,"Add the following import to the Tutorial class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"import jpos.Scanner;\n")),Object(o.b)("p",null,"Next, we will add a member variable to the Tutorial class to hold the Scanner instance."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public class Tutorial implements DataListener {\n    private Scanner scanner;\n")),Object(o.b)("p",null,"Next, add a constructor for the Tutorial class that instantiates the Scanner instance as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public class Tutorial implements DataListener {\n    private Scanner scanner;\n\n    public Tutorial() {\n        this.scanner = new Scanner();\n    }\n")),Object(o.b)("p",null,"Now the Tutorial class has a member variable named scanner that holds a generic UPOS Scanner instance."),Object(o.b)("h4",{id:"open---claim---enable"},"Open -> Claim -> Enable"),Object(o.b)("p",null,"In order for an application to read labels using a UPOS Scanning device, the application must first open the UPOS device. The application must then claim the device. Finally, the application sends an enable command to the claimed device allowing the device to begin reading labels. Each step of this process is represented by a method within the UPOS Scanner class. Each of these methods potentially throws a JposException when they are called, so it is a good time to import jpos.JposException by adding the following to your Tutorial class imports:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"import jpos.JposException;\n")),Object(o.b)("h5",{id:"jposxml-profile"},"jpos.xml Profile"),Object(o.b)("p",null,"The JPOS Scanner.open method takes a single argument denoting the name of the jpos.xml Profile to use. This profile must match the ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"logicalName"))," attribute of a ",Object(o.b)("strong",{parentName:"p"},"JposEntry")," element in the jpos.xml file. For this example, I will be using the default jpos.xml that is shipped with Datalogic JavaPOS, and I will be using the ",Object(o.b)("strong",{parentName:"p"},"DL-Gryphon-GD4430-USB-OEM")," profile from jpos.xml. You can find the beginning of this profile by looking in the jpos.xml file, but it is included here as well."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'<JposEntry logicalName="DL-Gryphon-GD4430-USB-OEM">\n    <creation factoryClass="com.dls.jpos.service.DLSScannerInstanceFactory" serviceClass="com.dls.jpos.service.DLSScannerService"/>\n    <vendor name="DLA" url="http://www.adc.datalogic.com"/>\n    <jpos category="Scanner" version="1.13"/>\n    <product description="ScannerService" name="ScannerService" url="http://www.adc.datalogic.com"/>\n')),Object(o.b)("h5",{id:"connecting-to-the-device"},"Connecting to the device"),Object(o.b)("p",null,"Now that I have my profile selected, it is time to add a method for connecting to the Scanner device. Add a method to your class to encapsulate connecting to a Scanner device. This method should take a single parameter that contains the logicalName of the profile to use. This method should return a boolean indicating whether it succeeded in connecting to the device."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public boolean connectScanner(String profile) {\n\n}\n")),Object(o.b)("p",null,"Next, we will add the call to Scanner.open. Because this call can throw an exception, we will need to surround it in a try .. catch clause. If the device fails to open, we need to notify the user and return false. ",Object(o.b)("em",{parentName:"p"},"Note that the call to open merely loads the jpos.xml profile and does not attempt to connect to the device. The only reason that this call should fail is if a ",Object(o.b)("strong",{parentName:"em"},"JposEntry")," element could not be found with the profile name.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public boolean connectScanner(String profile) {\n    try {\n        this.scanner.open(profile);\n    } catch (JposException je) {\n        System.err.println("ERROR: Failed to open profile: " + profile + ", " + je);\n        return false;\n    }\n}\n')),Object(o.b)("p",null,"After the device profile has been loaded through the call to Scanner.open, it is time to claim the device using Scanner.claim. Like Scanner.open, Scanner.claim can throw an exception and will need to be surrounded in a try .. catch clause. There are a variety of reasons that a call to claim would throw an exception, so it is important to examine the exception thrown and close the device if an exception is thrown during the call to Scanner.claim.\nThe call to Scanner.claim takes a single integer argument indicating the number of milliseconds to wait before timeout when claiming a device. For the purpose of this tutorial, we will be using a fixed timeout of 1000 milliseconds or one second, but it is recommended that this argument be configurable externally so that the code does not have to be rebuilt to change the value."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public boolean connectScanner(String profile) {\n    try {\n        this.scanner.open(profile);\n    } catch (JposException openx) {\n        System.err.println("ERROR: Failed to open profile: " + profile + ", " + openx);\n        return false;\n    }\n\n    try {\n        this.scanner.claim(1000);\n    } catch (JposException claimx) {\n        System.err.println("ERROR: Failed to claim scanner: " + claimx);\n        try {\n            this.scanner.close();\n        } catch (JposException closex) {\n            System.err.println("ERROR: Failed to close device: " + closex);\n        }\n        return false;\n    }\n}\n')),Object(o.b)("p",null,"At this point, it is time to enable the device. The Scanner device is enabled by a call to Scanner.setDeviceEnabled with the argument of true. The Scanner.setDeviceEnabled method can throw a JposException, so it is necessary to wrap it in a try .. catch clause. If the call fails, it will be necessary to close the scanner before returning false."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        this.scanner.setDeviceEnabled(true);\n    } catch (JposException enablex) {\n        System.err.println("ERROR: Failed to enable device: " + enablex);\n        try {\n            this.scanner.close();\n        } catch (JposException closex) {\n            System.err.println("ERROR: Failed to close device: " + closex);\n        }\n        return false;\n    }\n')),Object(o.b)("p",null,"The device should now be opened, claimed and enabled. However, there will be no data delivered from the device until the Data Event Enabled is set to true. This step is performed by a call to Scanner.setDataEventEnabled. Because Scanner.setDataEventEnabled can throw an exception, it is necessary to surround the statement in a try .. catch clause. Add the following code after the call to Scanner.setDeviceEnabled."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        this.scanner.setDataEventEnabled(true);\n    } catch (JposException datax) {\n        System.err.println("ERROR: Failed to enable Data Events: " + datax);\n        try {\n            this.scanner.close();\n        } catch (JposException closex) {\n            System.err.println("ERROR: Failed to close device: " + closex);\n        }\n        return false;\n    }\n')),Object(o.b)("p",null,"Now that the scanner is opened, claimed, enabled and has Data Events enabled, the device can now start to deliver events to our application. In order to process those events, we will need to add our application as a data listener for the device. This will result in our dataOccurred method being called each time a data event is delivered from the device. Add the following to the end of your connectScanner method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"    this.scanner.addDataListener(this);\n    return true;\n")),Object(o.b)("p",null,"Here is the completed Tutorial.connectScanner method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public boolean connectScanner(String profile) {\n    try {\n        this.scanner.open(profile);\n    } catch (JposException openx) {\n        System.err.println("ERROR: Failed to open profile: " + profile + ", " + openx);\n        return false;\n    }\n\n    try {\n        this.scanner.claim(1000);\n    } catch (JposException claimx) {\n        System.err.println("ERROR: Failed to claim scanner: " + claimx);\n        try {\n            this.scanner.close();\n        } catch (JposException closex) {\n            System.err.println("ERROR: Failed to close device: " + closex);\n        }\n        return false;\n    }\n\n    try {\n        this.scanner.setDeviceEnabled(true);\n    } catch (JposException enablex) {\n        System.err.println("ERROR: Failed to enable device: " + enablex);\n        try {\n            this.scanner.close();\n        } catch (JposException closex) {\n            System.err.println("ERROR: Failed to close device: " + closex);\n        }\n        return false;\n    }\n\n    try {\n        this.scanner.setDataEventEnabled(true);\n    } catch (JposException datax) {\n        System.err.println("ERROR: Failed to enable Data Events: " + datax);\n        try {\n            this.scanner.close();\n        } catch (JposException closex) {\n            System.err.println("ERROR: Failed to close device: " + closex);\n        }\n        return false;\n    }\n\n    this.scanner.addDataListener(this);\n    return true;\n}\n')),Object(o.b)("h4",{id:"disable---release---close"},"Disable -> Release -> Close"),Object(o.b)("p",null,"Similar to the Open -> Claim -> Enable process, the Disable -> Release -> Close process is necessary to properly disconnect from the Scanner device. The UPOS Scanner class has methods for each of the steps to properly disconnect and the entire process should be encapsulated within a method similar to connectScanner. In this section, we will create a disconnectScanner method that facilitates this process. For the purpose of this tutorial, we will not be implementing any error handling outside of displaying the error that occurred, so there will be no need to return a value from this method."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public void disconnectScanner() {\n\n}\n")),Object(o.b)("p",null,"The first thing that we need to do is remove our application as a Data listener. This will stop any calls to the dataOccured method in our application."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public void disconnectScanner() {\n    this.scanner.removeDataListener(this);\n}\n")),Object(o.b)("p",null,"At this point, we will assume that the device is in the Device Enabled state. This means that the first thing that we will need to do is disable the device by calling the Scanner.setDeviceEnabled with false for the argument. This method can throw an exception, so we will need to surround it in a try .. catch clause. If an exception is thrown here, we will not return and instead carry on to the next step of the process."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        this.scanner.setDeviceEnabled(false);\n    } catch (JposException enablex) {\n        System.err.println("ERROR: Failed to disable device: " + enablex);\n    }\n')),Object(o.b)("p",null,"The device has now been returned to the Claimed state. The next step in the process is to release the device from our application. This is accomplished by calling the UPOS Scanner.release method. The release method can throw an exception, so we will need to surround it in a try .. catch clause. If an exception is thrown here, we will not return and instead carry on to the final step of the process."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        this.scanner.release();\n    } catch (JposException releasex) {\n        System.err.println("ERROR: Failed to release device: " + releasex);\n    }\n')),Object(o.b)("p",null,"The device has now been returned to the Open state. The final step in the process is to close the device from our application. This is accomplished by calling the UPOS Scanner.close method. The close method can throw an exception, so we will need to surround it in a try .. catch clause. If an exception is thrown here, we will not return as there is no further action to be taken."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        this.scanner.close();\n    } catch (JposException closex) {\n        System.err.println("ERROR: Failed to close device: " + closex);\n    }\n')),Object(o.b)("p",null,"Now we have a method to properly disconnect from the device. The error handling is very simple, but suffices for the purpose of this tutorial. Here is the entire disconnectScanner method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public void disconnectScanner() {\n    this.scanner.removeDataListener(this);\n\n    try {\n        this.scanner.setDeviceEnabled(false);\n    } catch (JposException enablex) {\n        System.err.println("ERROR: Failed to disable device: " + enablex);\n    }\n\n    try {\n        this.scanner.release();\n    } catch (JposException releasex) {\n        System.err.println("ERROR: Failed to release device: " + releasex);\n    }\n\n    try {\n        this.scanner.close();\n    } catch (JposException closex) {\n        System.err.println("ERROR: Failed to close device: " + closex);\n    }\n}\n')),Object(o.b)("h4",{id:"data-events"},"Data Events"),Object(o.b)("p",null,"A Data Event is produced each time data is received from the Scanner device. For the purpose of this tutorial, we are going to concentrate on gathering Label events and ignore all other types of Data events. We have already implemented the dataOccurred event as part of implementing the DataListener interface. Each time a Label is scanned using a Scanner device, a Data Event occurs, and our dataOccurred method is called."),Object(o.b)("p",null,"With Label data, we are concerned with three pieces of data: the raw Label data, the decoded Label data and the Label type. The UPOS Scanner class provides three methods to obtain this data. Scanner.getScanData returns a byte array containing the raw Label data. Scanner.getScanDataLabel returns a byte array containing the decoded Label data. Scanner.getScanDataType returns an integer denoting the symbology used to encode the Label data."),Object(o.b)("p",null,"We will now expand our dataOccurred method by adding local variables to hold the potential label data during each Data Event. Add the following to your dataOccurred method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public void dataOccurred(DataEvent de) {\n    byte[] scanData = new byte[]{};\n    byte[] scanDataLabel = new byte[]{};\n    int scanDataType = -1;\n}\n")),Object(o.b)("p",null,"The three methods used to populate our local variables are each methods that can throw an exception. It is usually not best practice to group statements into a single try .. catch clause, in this particular case, we will be grouping the three calls into a single try .. catch for brevity and clarity."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        scanData = this.scanner.getScanData();\n        scanDataLabel = this.scanner.getScanDataLabel();\n        scanDataType = this.scanner.getScanDataType();\n    } catch (JposException scannerx) {\n        System.err.println("ERROR: JPOS Exception during data event: " + scannerx);\n    }\n')),Object(o.b)("p",null,"At this point, any sort of Data event may have been triggered. Calling each of these three methods will return a value regardless of whether a label event occurred. We are only interested in Scanned Label Events for the purpose of this tutorial, so we will test the length of the local scanData byte array to determine if we have any scan data, and display the information that was returned from the Scanner to the user. Add the following to your dataOccurred method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    if (scanData.length > 0) {\n        String sData = new String(scanData);\n        String sLabel = new String(scanDataLabel);\n        System.out.println("Raw Data: " + sData + ", Label Data: " + sLabel +\n            ", Type: " + scanDataType);\n    }\n')),Object(o.b)("p",null,"Now when a label is scanned, our event handler will output the data from the label. By default, the Data Event Enable is automatically set to false each time a Data Event is delivered. In order to get another label to read, we will need to set the Data Event Enabled to true again. Each time a data event is delivered, we need to repeat this process. As before, the Scanner.setDataEventEnabled can throw an exception, so we will surround it in a try .. catch clause."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    try {\n        this.scanner.setDataEventEnabled(true);\n    } catch (JposException datax) {\n        System.err.println("ERROR: Failed to enable Data Events. " + datax);\n    }\n')),Object(o.b)("p",null,"Now our event handler displays label events for the user and enables Data Events for another label read. The complete dataOccurred method is here for reference:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public void dataOccurred(DataEvent de) {\n    byte[] scanData = new byte[]{};\n    byte[] scanDataLabel = new byte[]{};\n    int scanDataType = -1;\n\n    try {\n        scanData = this.scanner.getScanData();\n        scanDataLabel = this.scanner.getScanDataLabel();\n        scanDataType = this.scanner.getScanDataType();\n    } catch (JposException scannerx) {\n        System.err.println("ERROR: JPOS Exception during data event: " + scannerx);\n    }\n\n    if (scanData.length > 0) {\n        String sData = new String(scanData);\n        String sLabel = new String(scanDataLabel);\n        System.out.println("Raw Data: " + sData + ", Label Data: " + sLabel +\n            ", Type: " + scanDataType);\n    }\n\n    try {\n        this.scanner.setDataEventEnabled(true);\n    } catch (JposException datax) {\n        System.err.println("ERROR: Failed to enable Data Events. " + datax);\n    }\n}\n')),Object(o.b)("h4",{id:"the-main-method"},"The main method"),Object(o.b)("p",null,"Now it is time to tie everything together into a working console application. We will now add a main method to our class to allow this tutorial to be launched from the command line. For the purpose of this tutorial, we will be creating a simple loop waiting for the user to press the Enter key. Until the user has pressed this key, the application will continue to read and display label events. Add a main method to your Tutorial class as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public static void main(String[] args) {\n    Tutorial tutorial = new Tutorial();\n}\n")),Object(o.b)("p",null,"As mentioned previously, we will be using the ",Object(o.b)("strong",{parentName:"p"},"DL-Gryphon-GD4430-USB-OEM")," profile from the default ",Object(o.b)("strong",{parentName:"p"},"jpos.xml")," file that is distributed with JavaPOS. If you have a different device that you are writing for, change this to the name of the profile that you are using in your ",Object(o.b)("strong",{parentName:"p"},"jpos.xml"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public static void main(String[] args) {\n    Tutorial tutorial = new Tutorial();\n    String profileName = "DL-Gryphon-GD4430-USB-OEM";\n}\n')),Object(o.b)("p",null,"The next step is to connect to the scanner. We will be testing the boolean returned by the Tutorial.connectScanner method to determine whether the device is connected before proceeding. If the device does not connect, there is no reason to continue executing, so we will simply exit if Tutorial.connectScanner fails."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"    if (!tutorial.connectScanner(profileName)) {\n        System.exit(1);\n    }\n")),Object(o.b)("h5",{id:"using-a-bufferedreader"},"Using a BufferedReader"),Object(o.b)("p",null,"For our main loop, we will be using a BufferedReader instance to read from an InputStreamReader instance that is attached to System.in. This will allow us to read input from the console and determine when to stop executing. In order to use these classes, the following imports will need to be added to the ",Object(o.b)("strong",{parentName:"p"},"Tutorial")," class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n")),Object(o.b)("p",null,"Now we will add our loop to the main method after our call to Tutorial.connect."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    while (true) {\n        System.out.println("Press Enter to exit.");\n        try {\n            reader.readLine();\n        } catch (IOException iox) {\n            System.err.println("ERROR: I/O Exception reading from System.in: " + iox);\n        }\n    }\n')),Object(o.b)("p",null,"Once the user has pressed Enter and is exiting the program, we will need to go ahead and disconnect from the scanner. Add the following to your main method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'    tutorial.disconnectScanner();\n    System.out.println("Disconnected from device.");\n    System.exit(0);\n')),Object(o.b)("p",null,"Here is the completed Tutorial.main method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public static void main(String[] args) {\n    Tutorial tutorial = new Tutorial();\n    String profileName = "DL-Gryphon-GD4430-USB-OEM";\n\n    if (!tutorial.connectScanner(profileName)) {\n        System.exit(1);\n    }\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    while (true) {\n        System.out.println("Press Enter to exit.");\n        try {\n            reader.readLine();\n        } catch (IOException iox) {\n            System.err.println("ERROR: I/O Exception reading from System.in: " + iox);\n        }\n    }\n\n    tutorial.disconnectScanner();\n    System.out.println("Disconnected from device.");\n    System.exit(0);\n}\n')),Object(o.b)("h2",{id:"summary"},"Summary"),Object(o.b)("p",null,"We have now created a simple application that will allow a user to connect to a Scanner device, display Label events until the user presses Enter and then disconnect from the Scanner device. This is, of course, a very minimal example and does not cover the full capabilities of the Datalogic JavaPOS API, however, it serves as an excellent starting point for applications that use the Datalogic JavaPOS API."))}p.isMDXComponent=!0}}]);