(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{214:function(e,r,o){"use strict";o.r(r),o.d(r,"frontMatter",(function(){return s})),o.d(r,"metadata",(function(){return p})),o.d(r,"rightToc",(function(){return i})),o.d(r,"default",(function(){return c}));var t=o(3),n=o(8),a=(o(0),o(295)),s={id:"jposproperties",title:"JPOS Configuration Reference",sidebar_label:"jpos.properties"},p={unversionedId:"javapos/configref/jposproperties",id:"javapos/configref/jposproperties",isDocsHomePage:!1,title:"JPOS Configuration Reference",description:"Overview",source:"@site/docs/javapos/configref/jposproperties.md",slug:"/javapos/configref/jposproperties",permalink:"/javapos/configref/jposproperties",version:"current",sidebar_label:"jpos.properties",sidebar:"JavaPOS",previous:{title:"javax.usb.properties Reference",permalink:"/javapos/configref/javaxusbproperties"},next:{title:"Logging Configuration Reference",permalink:"/javapos/configref/log4j2xml"}},i=[{value:"Overview",id:"overview",children:[]},{value:"Reference",id:"reference",children:[{value:"jpos.loader.serviceManagerClass",id:"jposloaderservicemanagerclass",children:[]},{value:"jpos.config.regPopulatorClass",id:"jposconfigregpopulatorclass",children:[]},{value:"jpos.config.populatorFile",id:"jposconfigpopulatorfile",children:[]},{value:"jpos.tracing",id:"jpostracing",children:[]}]},{value:"Default configuration file",id:"default-configuration-file",children:[]}],l={rightToc:i};function c(e){var r=e.components,o=Object(n.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},l,o,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("p",null,"The OMG JavaPOS Reference uses the jpos.properties file to configure the JPOS device registry. This document covers the configuration file and the settings used by Datalogic JavaPOS. ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"Care must be taken changing any values in this file."))),Object(a.b)("h2",{id:"reference"},"Reference"),Object(a.b)("h3",{id:"jposloaderservicemanagerclass"},"jpos.loader.serviceManagerClass"),Object(a.b)("p",null,'This property specifies the manager bootstrap class for the whole JCL.  Use this property to replace the default "simple" JCL implementation with your own.  The value must be a fully qualified class name that implements the interface jpos.loader.JposServiceManager'),Object(a.b)("h3",{id:"jposconfigregpopulatorclass"},"jpos.config.regPopulatorClass"),Object(a.b)("p",null,"This property specifies the registry populator class that populates the entry registry.  It must be a fully qualified class name that implements the jpos.config.JposRegPopulator interface.  If you want to specify multiple populators then you should instead use the jpos.config.populator.class.",Object(a.b)("em",{parentName:"p"},"N")," property, defined below, that allows you to specify many populators"),Object(a.b)("p",null,"There are 3 populators that are provided with the JCL by default:"),Object(a.b)("h4",{id:"jposconfigsimplesimpleregpopulator"},"jpos.config.simple.SimpleRegPopulator"),Object(a.b)("p",null,"This populator loads/saves JposEntry objects as serialized objects in a Java serialized file, typically named: jpos.cfg"),Object(a.b)("h4",{id:"jposconfigsimplexmlxercesregpopulator"},"jpos.config.simple.xml.XercesRegPopulator"),Object(a.b)("p",null,"This populator uses Xerces and implements an XML parser according to the jpos/res/jcl.dtd.  By default, the XML file must be named jpos.xml However, this named can be changed using the property (see below): jpos.config.populator.file.",Object(a.b)("em",{parentName:"p"},"N")),Object(a.b)("h4",{id:"jposconfigsimplexmlxerces2regpopulator"},"jpos.config.simple.xml.Xerces2RegPopulator"),Object(a.b)("p",null,"This populator uses Xerces2 and implements an XML parser according to the jpos/res/jcl.xsd XML schema.  The file name is same as above; however, since this parser expects an XML schema, the XML file header is different."),Object(a.b)("p",null,"See the jpos-schema.xml file."),Object(a.b)("p",null,"NOTE: Xerces and Xerces2 are XML parsers from the ",Object(a.b)("a",Object(t.a)({parentName:"p"},{href:"http://www.apache.org"}),"http://www.apache.org")," Jakarta projects."),Object(a.b)("h3",{id:"jposconfigpopulatorfile"},"jpos.config.populatorFile"),Object(a.b)("p",null,"Use this property to for the JCL to load a specific file (cfg or XML) when not using multiple populators via the jpos.config.populator.class.",Object(a.b)("em",{parentName:"p"},"N")," multi-property"),Object(a.b)("h3",{id:"jpostracing"},"jpos.tracing"),Object(a.b)("p",null,"The jpos.tracing property is a legacy property that turns on all JPOS tracing. Tracing in JPOS is performed by printing to STDOUT as described in the default configuration file."),Object(a.b)("h2",{id:"default-configuration-file"},"Default configuration file"),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{}),'#------------------------------------------------------------------------------\n# JposTestCase.createPropFile() --\x3e ./jpos/res/jpos.properties file\n# Thu Jul 05 11:37:25 EDT 2001\n#------------------------------------------------------------------------------\n\n#------------------------------------------------------------------------------\n# Required properties\n# -------------------\n# 1) jpos.loader.serviceManagerClass\n#\n#    This property specifies the manager bootstrap class for the whole JCL.  Use\n#    this property to replace the default "simple" JCL implementation with your\n#    own.  The value must be a fully qualified class name that implements the\n#    interface jpos.loader.JposServiceManager\n#\n# 2) jpos.config.regPopulatorClass\n#\n#    This property specifies the registry populator class---that populates the\n#    entry registry.  It must be a fully qualified class name that implements\n#    the jpos.config.JposRegPopulator interface.  If you want to specify \n#    multiple populators then you should instead use the:\n#    jpos.config.populator.class.<n>\n#    property---defined below---that allows you to specify many populators\n#    There are 3 populators that are provided with the JCL by default:\n#    a) jpos.config.simple.SimpleRegPopulator\n#       This populator loads/saves JposEntry objects as serialized objects in\n#       a Java serialized file, typically named: jpos.cfg\n#    b) jpos.config.simple.xml.XercesRegPopulator \n#       This populator uses Xerces and implements an XML parser according to\n#       the jpos/res/jcl.dtd.  By default, the XML file must be named jpos.xml\n#       However, this named can be changed using the property (see below):\n#       jpos.config.populator.file.<n>\n#    c) jpos.config.simple.xml.Xerces2RegPopulator\n#       This populator uses Xerces2 and implements an XML parser according to\n#       the jpos/res/jcl.xsd XML schema.  The file name is same as above; however,\n#       since this parser expects an XML schema, the XML file header is different.\n#       See the jpos-schema.xml file.\n# \n# NOTE: Xerces and Xerces2 are XML parsers from the http://www.apache.org \n#       Jakarta projects.\n#------------------------------------------------------------------------------\n\njpos.loader.serviceManagerClass=jpos.loader.simple.SimpleServiceManager\n\n#jpos.config.regPopulatorClass=jpos.config.simple.SimpleRegPopulator\n#jpos.config.regPopulatorClass=jpos.config.simple.xml.SimpleXmlRegPopulator\njpos.config.regPopulatorClass=jpos.config.simple.xml.XercesRegPopulator\n\n#------------------------------------------------------------------------------\n# Use this property to for the JCL to load a specific file (cfg or XML)\n# when not using multiple populators via the jpos.config.populator.class.<n>\n# multi-property\n#------------------------------------------------------------------------------\n\n#jpos.config.populatorFile=jpos1.cfg\n\n#------------------------------------------------------------------------------\n# To define multiple populator then comment the property \n# "jpos.config.regPopulatorClass"\n# and use the following multiproperty properties (defines 2 populators one \n# XML and one serialized)\n#------------------------------------------------------------------------------\n\n#jpos.config.populator.class.0=jpos.config.simple.xml.SimpleXmlRegPopulator\n#jpos.config.populator.class.1=jpos.config.simple.SimpleRegPopulator\n\n#------------------------------------------------------------------------------\n# You can also define populator files for each populator as follows\n#------------------------------------------------------------------------------\n\n#jpos.config.populator.file.0=jpos0.xml\n#jpos.config.populator.file.1=jpos1.cfg\n\n#------------------------------------------------------------------------------\n# Tracing properties\n# ------------------\n# All tracing properties that are boolean attributes can be turned on of\n# off using ON/on/TRUE/true or OFF/false for any other value.\n# The available properties are (see commented properties below):\n# 1) jpos.tracing   \n# This is a legacy property and will turn the global tracer on.  You should\n# note that it is preferable to use the named tracing property instead\n# 2) jpos.util.tracing.TurnOnAllNamedTracers\n# This property when turned on will enable all named tracers.  A named tracer\n# will print out a message prepended by [<name>] where <name> is the name of\n# the tracer in question.\n# 3) jpos.util.tracing.TurnOnNamedTracers = name1, name2, ...\n# This will turn on the named tracers listed as name1, name2, ... this is \n# useful if when all named tracers are on you want to filter the output\n#------------------------------------------------------------------------------\n\n#jpos.tracing=ON\n#jpos.util.tracing.TurnOnNamedTracers=XercesRegPopulator, AbstractRegPopulator, MainFrame\n#jpos.util.tracing.TurnOnNamedTracers=JposServiceLoader,SimpleEntryRegistry,SimpleRegPopulator,XercesRegPopulator \n#jpos.util.tracing.TurnOnAllNamedTracers=OFF\n')))}c.isMDXComponent=!0},295:function(e,r,o){"use strict";o.d(r,"a",(function(){return u})),o.d(r,"b",(function(){return g}));var t=o(0),n=o.n(t);function a(e,r,o){return r in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e}function s(e,r){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),o.push.apply(o,t)}return o}function p(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?s(Object(o),!0).forEach((function(r){a(e,r,o[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(o,r))}))}return e}function i(e,r){if(null==e)return{};var o,t,n=function(e,r){if(null==e)return{};var o,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],r.indexOf(o)>=0||(n[o]=e[o]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],r.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=n.a.createContext({}),c=function(e){var r=n.a.useContext(l),o=r;return e&&(o="function"==typeof e?e(r):p(p({},r),e)),o},u=function(e){var r=c(e.components);return n.a.createElement(l.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},m=n.a.forwardRef((function(e,r){var o=e.components,t=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(o),m=t,g=u["".concat(s,".").concat(m)]||u[m]||f[m]||a;return o?n.a.createElement(g,p(p({ref:r},l),{},{components:o})):n.a.createElement(g,p({ref:r},l))}));function g(e,r){var o=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=o.length,s=new Array(a);s[0]=m;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p.mdxType="string"==typeof e?e:t,s[1]=p;for(var l=2;l<a;l++)s[l]=o[l];return n.a.createElement.apply(null,s)}return n.a.createElement.apply(null,o)}m.displayName="MDXCreateElement"}}]);